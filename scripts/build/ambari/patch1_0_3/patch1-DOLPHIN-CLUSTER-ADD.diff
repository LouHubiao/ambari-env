Subject: [PATCH] optimized: 优化了redis里的部分配置
---
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision eef11e458f51f75f2bb9f7699fed22a994bf0799)
+++ b/README.md	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -1,43 +1,71 @@
-<!---
-   Licensed to the Apache Software Foundation (ASF) under one or more
-   contributor license agreements.  See the NOTICE file distributed with
-   this work for additional information regarding copyright ownership.
-   The ASF licenses this file to You under the Apache License, Version 2.0
-   (the "License"); you may not use this file except in compliance with
-   the License.  You may obtain a copy of the License at
+# Ambari 2.8.0 + Bigtop 3.2.0 🎉 民间版
+
+[![构建状态](https://builds.apache.org/buildStatus/icon?job=Ambari-trunk-Commit)](https://builds.apache.org/view/A/view/Ambari/job/Ambari-trunk-Commit/)
+![许可证](http://img.shields.io/badge/license-Apache%20v2-blue.svg)
+
+咦？**Ambari** 居然又开始活跃了？😲 是的！这次并非来自官方更新，而是由 **大数据技术爱好者"小饕"** 自发打造的 **民间魔改版**
+！🎉
+
+你一定好奇，为什么要进行魔改呢？🤔 其实，**Ambari** 的架构设计非常灵活，扩展性和可玩性都极高，给了我无穷的想象空间！因此，我们决定动手，将它与
+**Bigtop 3.2.0** 相结合，融入最前沿的现代技术，重塑新一代的大数据平台架构！💪
+
+在这个民间版中，我们突破了原有的限制，打造出更适合大数据平台定制开发与部署的解决方案。不仅适合企业级用户，还为想要深入研究大数据技术的个人提供了自由探索的空间。无论是灵活的组件编译，还是强大的集群管理，这个版本都能满足你的需求，帮助你更轻松地驾驭大数据世界！🌐
+
+📢 **特别提醒！** 我们非常期待你能关注我们的微信公众号，获取最新的技术资讯、教程和魔改项目的更新！通过关注，你将获得一手的技术干货，并且可以加入更多大数据爱好者的讨论。立即扫码关注吧！📱
+
+![wechat.png](wechat.png)
+---
+
+## 🚀 版本亮点

-       http://www.apache.org/licenses/LICENSE-2.0
+以下是各个版本的组件支持情况：

-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
---->
-# Apache Ambari
-[![Build Status](https://builds.apache.org/buildStatus/icon?job=Ambari-trunk-Commit)](https://builds.apache.org/view/A/view/Ambari/job/Ambari-trunk-Commit/)
-![license](http://img.shields.io/badge/license-Apache%20v2-blue.svg)
+| **版本**     | **组件名称**         | **组件版本**   | **env版本** | **时间**          |
+|------------|------------------|------------|-----------|-----------------|
+| **v1.0.4** | Doris            | 待定         | 1.0.4     | 待定              |
+|            | 其他待定             | 待定         | 1.0.4     | 待定              |
+| **v1.0.3** | Phoenix          | 5.1.2      | 1.0.3     | 2024/10/15      |
+|            | Dolphinscheduler | 3.2.2      | 1.0.3     | 2024/10/15      |
+| **v1.0.2** | Redis            | 7.4.0      | 1.0.2     | 2024/09/10(已支持) |
+| **v1.0.1** | Sqoop            | 1.4.7      | 1.0.1     | 2024/08/15(已支持) |
+|            | Ranger           | 2.4.0      | 1.0.1     | 2024/08/15(已支持) |
+| **v1.0.0** | Zookeeper        | 3.5.9      | 1.0.0     | 2024/08/01(已支持) |
+|            | Hadoop           | 3.3.4      | 1.0.0     | 2024/08/01(已支持) |
+|            | Flink            | 1.15.3     | 1.0.0     | 2024/08/01(已支持) |
+|            | HBase            | 2.4.13     | 1.0.0     | 2024/08/01(已支持) |
+|            | Hive             | 3.1.3      | 1.0.0     | 2024/08/01(已支持) |
+|            | Kafka            | 2.8.1      | 1.0.0     | 2024/08/01(已支持) |
+|            | Spark            | 3.2.3      | 1.0.0     | 2024/08/01(已支持) |
+|            | Solr             | 8.11.2     | 1.0.0     | 2024/08/01(已支持) |
+|            | Tez              | 0.10.1     | 1.0.0     | 2024/08/01(已支持) |
+|            | Zeppelin         | 0.10.1     | 1.0.0     | 2024/08/01(已支持) |
+|            | Livy             | 0.7.1      | 1.0.0     | 2024/08/01(已支持) |
+|            | Ambari           | branch-2.8 | 1.0.0     | 2024/08/01(已支持) |
+|            | Ambari Metrics   | branch-3.0 | 1.0.0     | 2024/08/01(已支持) |
+|            | Ambari Infra     | master     | 1.0.0     | 2024/08/01(已支持) |

-Apache Ambari is a tool for provisioning, managing, and monitoring Apache Hadoop clusters. Ambari consists of a set of RESTful APIs and a browser-based management interface.
+## 📦 快速入门

-## Sub-projects
+源码编译环节请参考下面章节：

-- Ambari Metrics ([GitHub](https://github.com/apache/ambari-metrics), [GitBox](https://gitbox.apache.org/repos/asf?p=ambari-metrics.git))
-- Ambari Log Search ([GitHub](https://github.com/apache/ambari-logsearch), [GitBox](https://gitbox.apache.org/repos/asf?p=ambari-logsearch.git))
-- Ambari Infra ([GitHub](https://github.com/apache/ambari-infra), [GitBox](https://gitbox.apache.org/repos/asf?p=ambari-infra.git))
+- **ambari-env**：这是一个为 Ambari + Bigtop 提供的 **一站式编译、集成解决方案**，帮助您轻松构建和管理大数据平台。（持续更新中...）

-## Getting Started
+  👉 快速体验请访问：[ambari-env on Gitee](https://gitee.com/tt-bigdata/ambari-env)

-https://cwiki.apache.org/confluence/display/AMBARI/Quick+Start+Guide
+- **ambari-index**：这是一个汇集了大数据相关技术学习资料的集合平台，适合所有大数据开发者，帮助您系统学习并掌握 Ambari 和
+  Bigtop 的架构、原理和实战技巧。

-## Built With
+  📚 学习资料请访问：[ambari-index](https://gitee.com/tt-bigdata/ambari-index)

-https://cwiki.apache.org/confluence/display/AMBARI/Technology+Stack
+## 🤝 加入我们的讨论

-## Contributing
+如果您有兴趣深入交流或想了解更多关于 **Ambari + Bigtop** 的技术细节，欢迎点击以下链接加入我的 QQ
+群，和“小饕”一起探索大数据的无限可能！

-https://cwiki.apache.org/confluence/display/AMBARI/How+to+Contribute
+点击链接加入QQ群聊：[ambari-env（Ambari+Bigtop）](https://qm.qq.com/q/6eVjEFEHBu)

-## License
+## 📜 许可证

-http://ambari.apache.org/license.html
+本项目遵循 Apache 2.0 许可证，详情请参阅：
+[Apache License 2.0](http://www.apache.org/licenses/LICENSE-2.0)
+
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/alerts.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/alerts.json b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/alerts.json
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/alerts.json	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,131 @@
+{
+  "DOLPHINSCHEDULER": {
+    "service": [],
+    "DOLPHIN_API": [
+      {
+        "name": "dolphin_api_port_check",
+        "label": "dolphin_api_port_check",
+        "description": "dolphin_api_port_check.",
+        "interval": 10,
+        "scope": "ANY",
+        "source": {
+          "type": "PORT",
+          "uri": "{{dolphin-api-server-application/server.port}}",
+          "default_port": 12345,
+          "reporting": {
+            "ok": {
+              "text": "TCP OK - {0:.3f}s response on port {1}"
+            },
+            "warning": {
+              "text": "TCP OK - {0:.3f}s response on port {1}",
+              "value": 1.5
+            },
+            "critical": {
+              "text": "Connection failed: {0} to {1}:{2}",
+              "value": 5.0
+            }
+          }
+        }
+      }
+    ],
+    "DOLPHIN_MASTER": [
+      {
+        "name": "DOLPHIN_MASTER_CHECK",
+        "label": "check dolphin scheduler master status",
+        "description": "",
+        "interval":10,
+        "scope": "HOST",
+        "enabled": true,
+        "source": {
+          "type": "SCRIPT",
+          "path": "BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/alerts/alert_dolphin_scheduler_status.py",
+          "parameters": [
+
+            {
+              "name": "connection.timeout",
+              "display_name": "Connection Timeout",
+              "value": 5.0,
+              "type": "NUMERIC",
+              "description": "The maximum time before this alert is considered to be CRITICAL",
+              "units": "seconds",
+              "threshold": "CRITICAL"
+            },
+            {
+              "name": "alertName",
+              "display_name": "alertName",
+              "value": "DOLPHIN_MASTER",
+              "type": "STRING",
+              "description": "alert name"
+            }
+          ]
+        }
+      }
+    ],
+    "DOLPHIN_WORKER": [
+      {
+        "name": "DOLPHIN_WORKER_CHECK",
+        "label": "check dolphin scheduler worker status",
+        "description": "",
+        "interval":10,
+        "scope": "HOST",
+        "enabled": true,
+        "source": {
+          "type": "SCRIPT",
+          "path": "BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/alerts/alert_dolphin_scheduler_status.py",
+          "parameters": [
+
+            {
+              "name": "connection.timeout",
+              "display_name": "Connection Timeout",
+              "value": 5.0,
+              "type": "NUMERIC",
+              "description": "The maximum time before this alert is considered to be CRITICAL",
+              "units": "seconds",
+              "threshold": "CRITICAL"
+            },
+            {
+              "name": "alertName",
+              "display_name": "alertName",
+              "value": "DOLPHIN_WORKER",
+              "type": "STRING",
+              "description": "alert name"
+            }
+          ]
+        }
+      }
+    ],
+    "DOLPHIN_ALERT": [
+      {
+        "name": "DOLPHIN_DOLPHIN_ALERT_CHECK",
+        "label": "check dolphin scheduler alert status",
+        "description": "",
+        "interval":10,
+        "scope": "HOST",
+        "enabled": true,
+        "source": {
+          "type": "SCRIPT",
+          "path": "BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/alerts/alert_dolphin_scheduler_status.py",
+          "parameters": [
+
+            {
+              "name": "connection.timeout",
+              "display_name": "Connection Timeout",
+              "value": 5.0,
+              "type": "NUMERIC",
+              "description": "The maximum time before this alert is considered to be CRITICAL",
+              "units": "seconds",
+              "threshold": "CRITICAL"
+            },
+            {
+              "name": "alertName",
+              "display_name": "alertName",
+              "value": "DOLPHIN_ALERT",
+              "type": "STRING",
+              "description": "alert name"
+            }
+          ]
+        }
+      }
+    ]
+  }
+}
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-alert-server-application.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-alert-server-application.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-alert-server-application.xml
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-alert-server-application.xml	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,151 @@
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the "License"); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<configuration>
+	<property>
+		<name>server.port</name>
+		<value>50053</value>
+		<on-ambari-upgrade add="true"/>
+	</property>
+	<property>
+		<name>alert.port</name>
+		<value>50052</value>
+		<on-ambari-upgrade add="true"/>
+	</property>
+	<property>
+		<name>content</name>
+		<display-name>Dolphinscheduler alert-server application.yaml </display-name>
+		<description>Dolphinscheduler alert-server application.yaml</description>
+		<value>#
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+spring:
+  jackson:
+    time-zone: GMT+8
+    date-format: "yyyy-MM-dd HH:mm:ss"
+  banner:
+    charset: UTF-8
+  datasource:
+    driver-class-name: {{ dolphin_database_config['dolphin_database_driver'] }}
+    url: {{ dolphin_database_config['dolphin_database_url'] }}
+    username: {{ dolphin_database_config['dolphin_database_username'] }}
+    password: {{ dolphin_database_config['dolphin_database_password'] }}
+    hikari:
+      connection-test-query: select 1
+      minimum-idle: 5
+      auto-commit: true
+      validation-timeout: 3000
+      pool-name: DolphinScheduler
+      maximum-pool-size: 50
+      connection-timeout: 30000
+      idle-timeout: 600000
+      leak-detection-threshold: 0
+      initialization-fail-timeout: 1
+
+# Mybatis-plus configuration, you don't need to change it
+mybatis-plus:
+  mapper-locations: classpath:org/apache/dolphinscheduler/dao/mapper/*Mapper.xml
+  type-aliases-package: org.apache.dolphinscheduler.dao.entity
+  configuration:
+    cache-enabled: false
+    call-setters-on-nulls: true
+    map-underscore-to-camel-case: true
+    jdbc-type-for-null: NULL
+  global-config:
+    db-config:
+      id-type: auto
+    banner: false
+server:
+  port: {{ dolphin_alert_server_application_map['server.port'] }}
+
+management:
+  endpoints:
+    web:
+      exposure:
+        include: health,metrics,prometheus
+  endpoint:
+    health:
+      enabled: true
+      show-details: always
+  health:
+    db:
+      enabled: true
+    defaults:
+      enabled: false
+  metrics:
+    tags:
+      application: ${spring.application.name}
+
+alert:
+  port: {{ dolphin_alert_server_application_map['alert.port'] }}
+  # Mark each alert of alert server if late after x milliseconds as failed.
+  # Define value is (0 = infinite), and alert server would be waiting alert result.
+  wait-timeout: 0
+  heartbeat-interval: 60s
+
+registry:
+  type: zookeeper
+  zookeeper:
+    namespace: dolphinscheduler
+    connect-string: {{ zookeeper_quorum }}
+    retry-policy:
+      base-sleep-time: 60ms
+      max-sleep: 300ms
+      max-retries: 5
+    session-timeout: 30s
+    connection-timeout: 9s
+    block-until-connected: 600ms
+    digest: ~
+
+metrics:
+  enabled: true
+
+# Override by profile
+
+---
+spring:
+  config:
+    activate:
+      on-profile: mysql
+  datasource:
+    driver-class-name: {{ dolphin_database_config['dolphin_database_driver'] }}
+    url: {{ dolphin_database_config['dolphin_database_url'] }}
+    username: {{ dolphin_database_config['dolphin_database_username'] }}
+    password: {{ dolphin_database_config['dolphin_database_password'] }}
+
+		</value>
+    <value-attributes>
+			<type>content</type>
+			<empty-value-valid>false</empty-value-valid>
+			<show-property-name>false</show-property-name>
+		</value-attributes>
+		<on-ambari-upgrade add="true"/>
+	</property>
+</configuration>
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-alert-server-logback-spring.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-alert-server-logback-spring.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-alert-server-logback-spring.xml
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-alert-server-logback-spring.xml	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,90 @@
+<?xml version="1.0"?>
+<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
+<!--
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+<configuration supports_adding_forbidden="true">
+    <property>
+        <name>content</name>
+        <description>Dolphinscheduler alert-server logback-spring.xml</description>
+        <value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the "License"); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<configuration scan="true" scanPeriod="120 seconds">
+    <property name="log.base" value="logs"/>
+
+    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
+        <encoder>
+            <pattern>
+                [%level] %date{yyyy-MM-dd HH:mm:ss.SSS Z} %logger{96}:[%line] - %msg%n
+            </pattern>
+            <charset>UTF-8</charset>
+        </encoder>
+    </appender>
+
+    <appender name="ALERTLOGFILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
+        <file>${log.base}/dolphinscheduler-alert.log</file>
+        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
+            <fileNamePattern>${log.base}/dolphinscheduler-alert.%d{yyyy-MM-dd_HH}.%i.log</fileNamePattern>
+            <maxHistory>20</maxHistory>
+            <maxFileSize>64MB</maxFileSize>
+            <totalSizeCap>50GB</totalSizeCap>
+            <cleanHistoryOnStart>true</cleanHistoryOnStart>
+        </rollingPolicy>
+        <encoder>
+            <pattern>
+                [%level] %date{yyyy-MM-dd HH:mm:ss.SSS Z} %logger{96}:[%line] - %msg%n
+            </pattern>
+            <charset>UTF-8</charset>
+        </encoder>
+    </appender>
+
+    <root level="INFO">
+        <if condition="${DOCKER:-false}">
+            <then>
+                <appender-ref ref="STDOUT"/>
+            </then>
+        </if>
+        <appender-ref ref="ALERTLOGFILE"/>
+    </root>
+</configuration>
+
+]]>
+        </value>
+        <value-attributes>
+            <type>content</type>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+</configuration>
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-api-server-application.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-api-server-application.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-api-server-application.xml
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-api-server-application.xml	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,272 @@
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the "License"); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<configuration>
+	<property>
+		<name>server.port</name>
+		<value>12345</value>
+		<on-ambari-upgrade add="true"/>
+	</property>
+	<property>
+		<name>content</name>
+		<display-name>Dolphinscheduler api-server application.yaml </display-name>
+		<description>Dolphinscheduler api-server application.yaml</description>
+		<value>#
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+server:
+  port: {{ dolphin_api_server_application_map['server.port'] }}
+  servlet:
+    session:
+      timeout: 120m
+    context-path: /dolphinscheduler/
+  compression:
+    enabled: true
+    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json,application/xml
+  jetty:
+    max-http-form-post-size: 5000000
+
+spring:
+  banner:
+    charset: UTF-8
+  jackson:
+    time-zone: GMT+8
+    date-format: "yyyy-MM-dd HH:mm:ss"
+  servlet:
+    multipart:
+      max-file-size: 1024MB
+      max-request-size: 1024MB
+  messages:
+    basename: i18n/messages
+  datasource:
+    driver-class-name: {{ dolphin_database_config['dolphin_database_driver'] }}
+    url: {{ dolphin_database_config['dolphin_database_url'] }}
+    username: {{ dolphin_database_config['dolphin_database_username'] }}
+    password: {{ dolphin_database_config['dolphin_database_password'] }}
+    hikari:
+      connection-test-query: select 1
+      minimum-idle: 5
+      auto-commit: true
+      validation-timeout: 3000
+      pool-name: DolphinScheduler
+      maximum-pool-size: 50
+      connection-timeout: 30000
+      idle-timeout: 600000
+      leak-detection-threshold: 0
+      initialization-fail-timeout: 1
+  quartz:
+    auto-startup: false
+    job-store-type: jdbc
+    jdbc:
+      initialize-schema: never
+    properties:
+      org.quartz.jobStore.isClustered: true
+      org.quartz.jobStore.class: org.springframework.scheduling.quartz.LocalDataSourceJobStore
+      org.quartz.scheduler.instanceId: AUTO
+      org.quartz.jobStore.tablePrefix: QRTZ_
+      org.quartz.jobStore.acquireTriggersWithinLock: true
+      org.quartz.scheduler.instanceName: DolphinScheduler
+      org.quartz.threadPool.class: org.apache.dolphinscheduler.scheduler.quartz.QuartzZeroSizeThreadPool
+      org.quartz.jobStore.useProperties: false
+      org.quartz.jobStore.misfireThreshold: 60000
+      org.quartz.scheduler.makeSchedulerThreadDaemon: true
+      org.quartz.jobStore.driverDelegateClass: org.quartz.impl.jdbcjobstore.PostgreSQLDelegate
+      org.quartz.jobStore.clusterCheckinInterval: 5000
+      org.quartz.scheduler.batchTriggerAcquisitionMaxCount: 1
+  mvc:
+    pathmatch:
+      matching-strategy: ANT_PATH_MATCHER
+    static-path-pattern: /static/**
+springdoc:
+  swagger-ui:
+    path: /swagger-ui.html
+  packages-to-scan: org.apache.dolphinscheduler.api
+
+
+# Mybatis-plus configuration, you don't need to change it
+mybatis-plus:
+  mapper-locations: classpath:org/apache/dolphinscheduler/dao/mapper/*Mapper.xml
+  type-aliases-package: org.apache.dolphinscheduler.dao.entity
+  configuration:
+    cache-enabled: false
+    call-setters-on-nulls: true
+    map-underscore-to-camel-case: true
+    jdbc-type-for-null: NULL
+  global-config:
+    db-config:
+      id-type: auto
+    banner: false
+
+
+management:
+  endpoints:
+    web:
+      exposure:
+        include: health,metrics,prometheus
+  endpoint:
+    health:
+      enabled: true
+      show-details: always
+  health:
+    db:
+      enabled: true
+    defaults:
+      enabled: false
+  metrics:
+    tags:
+      application: ${spring.application.name}
+
+registry:
+  type: zookeeper
+  zookeeper:
+    namespace: dolphinscheduler
+    connect-string: {{ zookeeper_quorum }}
+    retry-policy:
+      base-sleep-time: 60ms
+      max-sleep: 300ms
+      max-retries: 5
+    session-timeout: 30s
+    connection-timeout: 9s
+    block-until-connected: 600ms
+    digest: ~
+
+api:
+  audit-enable: false
+  # Traffic control, if you turn on this config, the maximum number of request/s will be limited.
+  # global max request number per second
+  # default tenant-level max request number
+  traffic-control:
+      global-switch: false
+      max-global-qps-rate: 300
+      tenant-switch: false
+      default-tenant-qps-rate: 10
+        #customize-tenant-qps-rate:
+        # eg.
+      #tenant1: 11
+      #tenant2: 20
+  python-gateway:
+    # Weather enable python gateway server or not. The default value is true.
+    enabled: true
+    # Authentication token for connection from python api to python gateway server. Should be changed the default value
+    # when you deploy in public network.
+    auth-token: jwUDzpLsNKEFER4*a8gruBH_GsAurNxU7A@Xc
+    # The address of Python gateway server start. Set its value to `0.0.0.0` if your Python API run in different
+    # between Python gateway server. It could be be specific to other address like `127.0.0.1` or `localhost`
+    gateway-server-address: 0.0.0.0
+    # The port of Python gateway server start. Define which port you could connect to Python gateway server from
+    # Python API side.
+    gateway-server-port: 25333
+    # The address of Python callback client.
+    python-address: 127.0.0.1
+    # The port of Python callback client.
+    python-port: 25334
+    # Close connection of socket server if no other request accept after x milliseconds. Define value is (0 = infinite),
+    # and socket server would never close even though no requests accept
+    connect-timeout: 0
+    # Close each active connection of socket server if python program not active after x milliseconds. Define value is
+    # (0 = infinite), and socket server would never close even though no requests accept
+    read-timeout: 0
+
+metrics:
+  enabled: true
+
+security:
+  authentication:
+    # Authentication types (supported types: PASSWORD,LDAP,CASDOOR_SSO)
+    type: PASSWORD
+    # IF you set type `LDAP`, below config will be effective
+    ldap:
+      # ldap server config
+      urls: ldap://ldap.forumsys.com:389/
+      base-dn: dc=example,dc=com
+      username: cn=read-only-admin,dc=example,dc=com
+      password: password
+      user:
+        # admin userId when you use LDAP login
+        admin: read-only-admin
+        identity-attribute: uid
+        email-attribute: mail
+        # action when ldap user is not exist (supported types: CREATE,DENY)
+        not-exist-action: CREATE
+      ssl:
+        enable: false
+        # jks file absolute path password
+        trust-store: "/ldapkeystore.jks"
+        trust-store-password: "password"
+    oauth2:
+      enable: false
+      provider:
+        github:
+          authorizationUri: ""
+          redirectUri: ""
+          clientId: ""
+          clientSecret: ""
+          tokenUri: ""
+          userInfoUri: ""
+          callbackUrl: ""
+          iconUri: ""
+          provider: github
+        google:
+          authorizationUri: ""
+          redirectUri: ""
+          clientId: ""
+          clientSecret: ""
+          tokenUri: ""
+          userInfoUri: ""
+          callbackUrl: ""
+          iconUri: ""
+          provider: google
+
+# Override by profile
+
+---
+spring:
+  config:
+    activate:
+      on-profile: mysql
+  datasource:
+    driver-class-name: {{ dolphin_database_config['dolphin_database_driver'] }}
+    url: {{ dolphin_database_config['dolphin_database_url'] }}
+    username: {{ dolphin_database_config['dolphin_database_username'] }}
+    password: {{ dolphin_database_config['dolphin_database_password'] }}
+
+  quartz:
+    properties:
+      org.quartz.jobStore.driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
+
+		</value>
+    <value-attributes>
+			<type>content</type>
+			<empty-value-valid>false</empty-value-valid>
+			<show-property-name>false</show-property-name>
+		</value-attributes>
+		<on-ambari-upgrade add="true"/>
+	</property>
+</configuration>
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-api-server-logback-spring.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-api-server-logback-spring.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-api-server-logback-spring.xml
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-api-server-logback-spring.xml	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,99 @@
+<?xml version="1.0"?>
+<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
+<!--
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+<configuration supports_adding_forbidden="true">
+    <property>
+        <name>content</name>
+        <description>Dolphinscheduler api-server logback-spring.xml</description>
+        <value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the "License"); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<configuration scan="true" scanPeriod="120 seconds">
+    <property name="log.base" value="logs"/>
+    <property scope="context" name="log.base.ctx" value="${log.base}" />
+
+    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
+        <encoder>
+            <pattern>
+                [%level] %date{yyyy-MM-dd HH:mm:ss.SSS Z} %logger{96}:[%line] - %msg%n
+            </pattern>
+            <charset>UTF-8</charset>
+        </encoder>
+    </appender>
+
+    <appender name="APILOGFILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
+        <file>${log.base}/dolphinscheduler-api.log</file>
+
+
+
+        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
+            <fileNamePattern>${log.base}/dolphinscheduler-api.%d{yyyy-MM-dd_HH}.%i.log</fileNamePattern>
+            <maxHistory>168</maxHistory>
+            <maxFileSize>64MB</maxFileSize>
+            <totalSizeCap>50GB</totalSizeCap>
+            <cleanHistoryOnStart>true</cleanHistoryOnStart>
+        </rollingPolicy>
+        <encoder>
+            <pattern>
+                [%level] %date{yyyy-MM-dd HH:mm:ss.SSS Z} %logger{96}:[%line] - %msg%n
+            </pattern>
+            <charset>UTF-8</charset>
+        </encoder>
+    </appender>
+
+    <logger name="org.apache.zookeeper" level="WARN"/>
+    <logger name="org.apache.hbase" level="WARN"/>
+    <logger name="org.apache.hadoop" level="WARN"/>
+
+    <root level="INFO">
+        <if condition="${DOCKER:-false}">
+            <then>
+                <appender-ref ref="STDOUT"/>
+            </then>
+        </if>
+        <appender-ref ref="STDOUT"/>
+        <appender-ref ref="APILOGFILE"/>
+    </root>
+</configuration>
+
+]]>
+        </value>
+        <value-attributes>
+            <type>content</type>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+</configuration>
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-common.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-common.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-common.xml
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-common.xml	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,158 @@
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the "License"); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<configuration>
+    <property>
+        <name>data.basedir.path</name>
+        <value>/tmp/dolphinscheduler</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>resource.storage.type</name>
+        <value>HDFS</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>resource.storage.upload.base.path</name>
+        <value>/dolphinscheduler</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>hadoop.security.authentication.startup.state</name>
+        <value>false</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>java.security.krb5.conf.path</name>
+        <value>/etc/krb5.conf</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>login.user.keytab.username</name>
+        <value>hdfs-mycluster@ESZ.COM</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>login.user.keytab.path</name>
+        <value>/etc/security/hdfs.headless.keytab</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>kerberos.expire.time</name>
+        <value>2</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>resource.hdfs.root.user</name>
+        <value>hdfs</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>resource.hdfs.fs.defaultFS</name>
+        <value>{{namenode_address}}</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>resource.azure.client.id</name>
+        <value>minioadmin</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>resource.azure.client.secret</name>
+        <value>minioadmin</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>resource.azure.tenant.id</name>
+        <value>minioadmin</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>resource.azure.subId</name>
+        <value>minioadmin</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>resource.aws.s3.endpoint</name>
+        <value>http://localhost:9000</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>resource.aws.access.key.id</name>
+        <value>minioadmin</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>resource.aws.secret.access.key</name>
+        <value>minioadmin</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>resource.aws.region</name>
+        <value>cn-north-1</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>resource.aws.s3.bucket.name</name>
+        <value>dolphinscheduler</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>resource.manager.httpaddress.port</name>
+        <value>8088</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>yarn.resourcemanager.ha.rm.ids</name>
+        <value>10.216.138.23,10.216.138.24</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>yarn.application.status.address</name>
+        <value>http://ds1:8088/ws/v1/cluster/apps/%s</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>yarn.job.history.status.address</name>
+        <value>http://ds1:19888/ws/v1/history/mapreduce/jobs/%s</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>datasource.encryption.enable</name>
+        <value>false</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>datasource.encryption.salt</name>
+        <value>!@#$%^&amp;*</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>support.hive.oneSession</name>
+        <value>true</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>sudo.enable</name>
+        <value>true</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>development.state</name>
+        <value>false</value>
+        <on-ambari-upgrade add="true"/>
+    </property>
+</configuration>
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-env.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-env.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-env.xml
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-env.xml	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,159 @@
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the "License"); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<configuration>
+
+	<property>
+		<name>dolphin.user</name>
+		<value>root</value>
+		<description>Which user to install and admin dolphin scheduler</description>
+		<display-name>Deploy User</display-name>
+		<on-ambari-upgrade add="true"/>
+	</property>
+	<property>
+		<name>dolphin.group</name>
+		<value>root</value>
+		<description>Which user to install and admin dolphin scheduler</description>
+		<display-name>Deploy Group</display-name>
+		<on-ambari-upgrade add="true"/>
+	</property>
+	<property>
+		<name>dolphin.database.type</name>
+		<value>postgresql</value>
+		<description>Dolphin Scheduler DataBase Type Which Is Select</description>
+		<display-name>Dolphin Database Type</display-name>
+		<value-attributes>
+			<type>value-list</type>
+			<entries>
+				<entry>
+					<value>mysql</value>
+					<label>Mysql</label>
+				</entry>
+				<entry>
+					<value>postgresql</value>
+					<label>Postgresql</label>
+				</entry>
+			</entries>
+			<selection-cardinality>1</selection-cardinality>
+		</value-attributes>
+		<on-ambari-upgrade add="true"/>
+	</property>
+
+	<property>
+		<name>dolphin.database.host</name>
+		<value>postgresql-dolphinscheduler</value>
+		<display-name>Dolphin Database Host</display-name>
+		<on-ambari-upgrade add="true"/>
+	</property>
+
+	<property>
+		<name>dolphin.database.port</name>
+		<value>5432</value>
+		<display-name>Dolphin Database Port</display-name>
+		<on-ambari-upgrade add="true"/>
+	</property>
+
+	<property>
+		<name>dolphin.database.dbname</name>
+		<value>dolphinscheduler</value>
+		<display-name>Dolphin Database Name</display-name>
+		<on-ambari-upgrade add="true"/>
+	</property>
+
+	<property>
+		<name>dolphin.database.username</name>
+		<value>dolphinscheduler</value>
+		<display-name>Dolphin Database Username</display-name>
+		<on-ambari-upgrade add="true"/>
+	</property>
+
+	<property>
+		<name>dolphin.database.password</name>
+		<value>dolphinscheduler</value>
+		<display-name>Dolphin Database Password</display-name>
+		<property-type>PASSWORD</property-type>
+		<value-attributes>
+			<type>password</type>
+		</value-attributes>
+		<on-ambari-upgrade add="true"/>
+	</property>
+
+	<property>
+		<name>dolphinscheduler-env-content</name>
+		<display-name>Dolphinscheduler Env template</display-name>
+		<description>This is the jinja template for dolphinscheduler.env.sh file</description>
+		<value>
+#
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+# JAVA_HOME, will use it to start DolphinScheduler server
+export JAVA_HOME=${JAVA_HOME:-{{ java64_home }} }
+
+# Database related configuration, set database type, username and password
+#export DATABASE=${DATABASE:-postgresql}
+export DATABASE=${DATABASE:-{{ dolphin_database_config['dolphin_database_type'] }} }
+export SPRING_PROFILES_ACTIVE=${DATABASE}
+export SPRING_DATASOURCE_URL={{ dolphin_database_config['dolphin_database_url'] }}
+export SPRING_DATASOURCE_USERNAME={{ dolphin_database_config['dolphin_database_username'] }}
+export SPRING_DATASOURCE_PASSWORD={{ dolphin_database_config['dolphin_database_password'] }}
+
+# DolphinScheduler server related configuration
+export SPRING_CACHE_TYPE=${SPRING_CACHE_TYPE:-none}
+#export SPRING_JACKSON_TIME_ZONE=${SPRING_JACKSON_TIME_ZONE:-UTC}
+export SPRING_JACKSON_TIME_ZONE=${SPRING_JACKSON_TIME_ZONE:-GMT+8}
+export MASTER_FETCH_COMMAND_NUM=${MASTER_FETCH_COMMAND_NUM:-10}
+
+# Registry center configuration, determines the type and link of the registry center
+export REGISTRY_TYPE=${REGISTRY_TYPE:-zookeeper}
+export REGISTRY_ZOOKEEPER_CONNECT_STRING=${REGISTRY_ZOOKEEPER_CONNECT_STRING:-{{ zookeeper_quorum }} }
+
+# Tasks related configurations, need to change the configuration if you use the related tasks.
+export HADOOP_HOME=${HADOOP_HOME:-/usr/bigtop/current/hadoop-client}
+export HADOOP_CONF_DIR=${HADOOP_CONF_DIR:-/etc/hadoop/conf}
+export SPARK_HOME2=${SPARK_HOME1:-/usr/bigtop/current/spark2}
+export SPARK_HOME3=${SPARK_HOME2:-/usr/bigtop/current/spark3}
+export PYTHON_HOME=${PYTHON_HOME:-/usr/bin/python}
+export HIVE_HOME=${HIVE_HOME:-/usr/bigtop/current/hive}
+export FLINK_HOME=${FLINK_HOME:-/usr/bigtop/current/flink}
+# export DATAX_HOME=${DATAX_HOME:-/opt/soft/datax}
+export SEATUNNEL_HOME=${SEATUNNEL_HOME:-/usr/bigtop/current/seatunnel}
+# export CHUNJUN_HOME=${CHUNJUN_HOME:-/opt/soft/chunjun}
+
+export PATH=$HADOOP_HOME/bin:$SPARK_HOME2/bin:$SPARK_HOME3/bin:$PYTHON_HOME/bin:$JAVA_HOME/bin:$HIVE_HOME/bin:$FLINK_HOME/bin:$DATAX_HOME/bin:$SEATUNNEL_HOME/bin:$CHUNJUN_HOME/bin:$PATH
+
+        </value>
+		<value-attributes>
+			<type>content</type>
+			<empty-value-valid>false</empty-value-valid>
+			<show-property-name>false</show-property-name>
+		</value-attributes>
+		<on-ambari-upgrade add="true"/>
+	</property>
+</configuration>
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-master-server-application.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-master-server-application.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-master-server-application.xml
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-master-server-application.xml	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,207 @@
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the "License"); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<configuration>
+	<property>
+		<name>server.port</name>
+		<value>5678</value>
+		<on-ambari-upgrade add="true"/>
+	</property>
+
+	<property>
+		<name>content</name>
+		<display-name>Dolphinscheduler master-server application.yaml </display-name>
+		<description>Dolphinscheduler master-server application.yaml</description>
+		<value>#
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+spring:
+  banner:
+    charset: UTF-8
+  jackson:
+    time-zone: GMT+8
+    date-format: "yyyy-MM-dd HH:mm:ss"
+  cache:
+    # default enable cache, you can disable by `type: none`
+    type: none
+    cache-names:
+      - tenant
+      - user
+      - processDefinition
+      - processTaskRelation
+      - taskDefinition
+    caffeine:
+      spec: maximumSize=100,expireAfterWrite=300s,recordStats
+  datasource:
+    driver-class-name: {{ dolphin_database_config['dolphin_database_driver'] }}
+    url: {{ dolphin_database_config['dolphin_database_url'] }}
+    username: {{ dolphin_database_config['dolphin_database_username'] }}
+    password: {{ dolphin_database_config['dolphin_database_password'] }}
+    hikari:
+      connection-test-query: select 1
+      minimum-idle: 5
+      auto-commit: true
+      validation-timeout: 3000
+      pool-name: DolphinScheduler
+      maximum-pool-size: 50
+      connection-timeout: 30000
+      idle-timeout: 600000
+      leak-detection-threshold: 0
+      initialization-fail-timeout: 1
+  quartz:
+    job-store-type: jdbc
+    jdbc:
+      initialize-schema: never
+    properties:
+      org.quartz.threadPool.threadPriority: 5
+      org.quartz.jobStore.isClustered: true
+      org.quartz.jobStore.class: org.springframework.scheduling.quartz.LocalDataSourceJobStore
+      org.quartz.scheduler.instanceId: AUTO
+      org.quartz.jobStore.tablePrefix: QRTZ_
+      org.quartz.jobStore.acquireTriggersWithinLock: true
+      org.quartz.scheduler.instanceName: DolphinScheduler
+      org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool
+      org.quartz.jobStore.useProperties: false
+      org.quartz.threadPool.makeThreadsDaemons: true
+      org.quartz.threadPool.threadCount: 25
+      org.quartz.jobStore.misfireThreshold: 60000
+      org.quartz.scheduler.batchTriggerAcquisitionMaxCount: 1
+      org.quartz.scheduler.makeSchedulerThreadDaemon: true
+      org.quartz.jobStore.driverDelegateClass: org.quartz.impl.jdbcjobstore.PostgreSQLDelegate
+      org.quartz.jobStore.clusterCheckinInterval: 5000
+# Mybatis-plus configuration, you don't need to change it
+mybatis-plus:
+  mapper-locations: classpath:org/apache/dolphinscheduler/dao/mapper/*Mapper.xml
+  type-aliases-package: org.apache.dolphinscheduler.dao.entity
+  configuration:
+    cache-enabled: false
+    call-setters-on-nulls: true
+    map-underscore-to-camel-case: true
+    jdbc-type-for-null: NULL
+  global-config:
+    db-config:
+      id-type: auto
+    banner: false
+registry:
+  type: zookeeper
+  zookeeper:
+    namespace: dolphinscheduler
+    connect-string: {{ zookeeper_quorum }}
+    retry-policy:
+      base-sleep-time: 60ms
+      max-sleep: 300ms
+      max-retries: 5
+    session-timeout: 30s
+    connection-timeout: 9s
+    block-until-connected: 600ms
+    digest: ~
+
+master:
+  listen-port: {{ dolphin_master_server_application_map['server.port'] }}
+  # master fetch command num
+  fetch-command-num: 10
+  # master prepare execute thread number to limit handle commands in parallel
+  pre-exec-threads: 10
+  # master execute thread number to limit process instances in parallel
+  exec-threads: 100
+  # master dispatch task number per batch, if all the tasks dispatch failed in a batch, will sleep 1s.
+  dispatch-task-number: 3
+  # master host selector to select a suitable worker, default value: LowerWeight. Optional values include random, round_robin, lower_weight
+  host-selector: lower_weight
+  # master heartbeat interval
+  heartbeat-interval: 10s
+  # master commit task retry times
+  task-commit-retry-times: 5
+  # master commit task interval
+  task-commit-interval: 1s
+  state-wheel-interval: 5s
+  # master max cpuload avg percentage, only higher than the system cpu load average, master server can schedule. default value 1: will use 100% cpu
+  max-cpu-load-avg: 1
+  # master reserved memory, only lower than system available memory, master server can schedule. default value 0.3, only the available memory is higher than 30%, master server can schedule.
+  reserved-memory: 0.3
+  # failover interval, the unit is minute
+  failover-interval: 10m
+  # kill yarn / k8s application when failover taskInstance, default true
+  kill-application-when-task-failover: true
+  registry-disconnect-strategy:
+    # The disconnect strategy: stop, waiting
+    strategy: waiting
+    # The max waiting time to reconnect to registry if you set the strategy to waiting
+    max-waiting-time: 100s
+  worker-group-refresh-interval: 10s
+
+server:
+  port: 5679
+
+management:
+  endpoints:
+    web:
+      exposure:
+        include: health,metrics,prometheus
+  endpoint:
+    health:
+      enabled: true
+      show-details: always
+  health:
+    db:
+      enabled: true
+    defaults:
+      enabled: false
+  metrics:
+    tags:
+      application: ${spring.application.name}
+
+metrics:
+  enabled: true
+
+# Override by profile
+
+---
+spring:
+  config:
+    activate:
+      on-profile: mysql
+  datasource:
+    driver-class-name: {{ dolphin_database_config['dolphin_database_driver'] }}
+    url: {{ dolphin_database_config['dolphin_database_url'] }}
+    username: {{ dolphin_database_config['dolphin_database_username'] }}
+    password: {{ dolphin_database_config['dolphin_database_password'] }}
+  quartz:
+    properties:
+      org.quartz.jobStore.driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
+
+		</value>
+    <value-attributes>
+			<type>content</type>
+			<empty-value-valid>false</empty-value-valid>
+			<show-property-name>false</show-property-name>
+		</value-attributes>
+		<on-ambari-upgrade add="true"/>
+	</property>
+</configuration>
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-master-server-logback-spring.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-master-server-logback-spring.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-master-server-logback-spring.xml
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-master-server-logback-spring.xml	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,113 @@
+<?xml version="1.0"?>
+<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
+<!--
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+<configuration supports_adding_forbidden="true">
+    <property>
+        <name>content</name>
+        <description>Dolphinscheduler master-server logback-spring.xml</description>
+        <value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the "License"); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<configuration scan="true" scanPeriod="120 seconds">
+    <property name="log.base" value="logs"/>
+    <property scope="context" name="log.base.ctx" value="${log.base}" />
+
+    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
+        <encoder>
+            <pattern>
+                [%level] %date{yyyy-MM-dd HH:mm:ss.SSS Z} %logger{96}:[%line] - [WorkflowInstance-%X{workflowInstanceId:-0}][TaskInstance-%X{taskInstanceId:-0}] - %msg%n
+            </pattern>
+            <charset>UTF-8</charset>
+        </encoder>
+    </appender>
+
+    <conversionRule conversionWord="message"
+                    converterClass="org.apache.dolphinscheduler.common.log.SensitiveDataConverter"/>
+    <appender name="TASKLOGFILE" class="ch.qos.logback.classic.sift.SiftingAppender">
+        <filter class="org.apache.dolphinscheduler.plugin.task.api.log.TaskLogFilter"/>
+        <Discriminator class="org.apache.dolphinscheduler.plugin.task.api.log.TaskLogDiscriminator">
+            <key>taskInstanceLogFullPath</key>
+            <logBase>${log.base}</logBase>
+        </Discriminator>
+        <sift>
+            <appender name="FILE-${taskInstanceLogFullPath}" class="ch.qos.logback.core.FileAppender">
+                <file>${taskInstanceLogFullPath}</file>
+                <encoder>
+                    <pattern>
+                        [%level] %date{yyyy-MM-dd HH:mm:ss.SSS Z} - %message%n
+                    </pattern>
+                    <charset>UTF-8</charset>
+                </encoder>
+                <append>true</append>
+            </appender>
+        </sift>
+    </appender>
+    <appender name="MASTERLOGFILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
+        <file>${log.base}/dolphinscheduler-master.log</file>
+        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
+            <fileNamePattern>${log.base}/dolphinscheduler-master.%d{yyyy-MM-dd_HH}.%i.log</fileNamePattern>
+            <maxHistory>168</maxHistory>
+            <maxFileSize>200MB</maxFileSize>
+            <totalSizeCap>50GB</totalSizeCap>
+            <cleanHistoryOnStart>true</cleanHistoryOnStart>
+        </rollingPolicy>
+        <encoder>
+            <pattern>
+                [%level] %date{yyyy-MM-dd HH:mm:ss.SSS Z} %logger{96}:[%line] - [WorkflowInstance-%X{workflowInstanceId:-0}][TaskInstance-%X{taskInstanceId:-0}] - %msg%n
+            </pattern>
+            <charset>UTF-8</charset>
+        </encoder>
+    </appender>
+
+    <root level="INFO">
+        <if condition="${DOCKER:-false}">
+            <then>
+                <appender-ref ref="STDOUT"/>
+            </then>
+        </if>
+        <appender-ref ref="TASKLOGFILE"/>
+        <appender-ref ref="MASTERLOGFILE"/>
+    </root>
+</configuration>
+
+]]>
+        </value>
+        <value-attributes>
+            <type>content</type>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+</configuration>
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-tools-application.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-tools-application.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-tools-application.xml
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-tools-application.xml	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,99 @@
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the "License"); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<configuration>
+  <property>
+    <name>content</name>
+    <display-name>Dolphinscheduler tools application.yaml </display-name>
+    <description>Dolphinscheduler tools application.yaml</description>
+    <value>
+#
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+spring:
+  main:
+    banner-mode: off
+  datasource:
+    driver-class-name: {{ dolphin_database_config['dolphin_database_driver'] }}
+    url:  {{ dolphin_database_config['dolphin_database_url'] }}
+    username: {{ dolphin_database_config['dolphin_database_username'] }}
+    password: {{ dolphin_database_config['dolphin_database_password'] }}
+    hikari:
+      connection-test-query: select 1
+      minimum-idle: 5
+      auto-commit: true
+      validation-timeout: 3000
+      pool-name: DolphinScheduler
+      maximum-pool-size: 50
+      connection-timeout: 30000
+      idle-timeout: 600000
+      leak-detection-threshold: 0
+      initialization-fail-timeout: 1
+# Mybatis-plus configuration, you don't need to change it
+mybatis-plus:
+  mapper-locations: classpath:org/apache/dolphinscheduler/dao/mapper/*Mapper.xml
+  type-aliases-package: org.apache.dolphinscheduler.dao.entity
+  configuration:
+    cache-enabled: false
+    call-setters-on-nulls: true
+    map-underscore-to-camel-case: true
+    jdbc-type-for-null: NULL
+  global-config:
+    db-config:
+      id-type: auto
+    banner: false
+
+# Override by profile
+
+---
+spring:
+  config:
+    activate:
+      on-profile: mysql
+  datasource:
+    driver-class-name: com.mysql.cj.jdbc.Driver
+#    url: jdbc:mysql://127.0.0.1:3306/dolphinscheduler?useUnicode=true&amp;characterEncoding=UTF-8
+
+---
+spring:
+  config:
+    activate:
+      on-profile: postgresql
+  datasource:
+    driver-class-name: org.postgresql.Driver
+
+    </value>
+    <value-attributes>
+      <type>content</type>
+      <empty-value-valid>false</empty-value-valid>
+      <show-property-name>false</show-property-name>
+    </value-attributes>
+    <on-ambari-upgrade add="true"/>
+  </property>
+</configuration>
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-worker-server-application.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-worker-server-application.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-worker-server-application.xml
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-worker-server-application.xml	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,137 @@
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the "License"); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<configuration>
+	<property>
+		<name>server.port</name>
+		<value>1234</value>
+		<on-ambari-upgrade add="true"/>
+	</property>
+	<property>
+		<name>content</name>
+		<display-name>Dolphinscheduler worker-server application.yaml </display-name>
+		<description>Dolphinscheduler worker-server application.yaml</description>
+		<value>#
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+spring:
+  banner:
+    charset: UTF-8
+  jackson:
+    time-zone: GMT+8
+    date-format: "yyyy-MM-dd HH:mm:ss"
+  datasource:
+    driver-class-name: {{ dolphin_database_config['dolphin_database_driver'] }}
+    url: {{ dolphin_database_config['dolphin_database_url'] }}
+    username: {{ dolphin_database_config['dolphin_database_username'] }}
+    password: {{ dolphin_database_config['dolphin_database_password'] }}
+    hikari:
+      connection-test-query: select 1
+      minimum-idle: 5
+      auto-commit: true
+      validation-timeout: 3000
+      pool-name: DolphinScheduler
+      maximum-pool-size: 50
+      connection-timeout: 30000
+      idle-timeout: 600000
+      leak-detection-threshold: 0
+      initialization-fail-timeout: 1
+
+registry:
+  type: zookeeper
+  zookeeper:
+    namespace: dolphinscheduler
+    connect-string: {{ zookeeper_quorum }}
+    retry-policy:
+      base-sleep-time: 60ms
+      max-sleep: 300ms
+      max-retries: 5
+    session-timeout: 30s
+    connection-timeout: 9s
+    block-until-connected: 600ms
+    digest: ~
+
+worker:
+  # worker listener port
+  listen-port: {{ dolphin_worker_server_application_map['server.port'] }}
+  # worker execute thread number to limit task instances in parallel
+  exec-threads: 100
+  # worker heartbeat interval
+  heartbeat-interval: 10s
+  # worker host weight to dispatch tasks, default value 100
+  host-weight: 100
+  # tenant corresponds to the user of the system, which is used by the worker to submit the job. If system does not have this user, it will be automatically created after the parameter worker.tenant.auto.create is true.
+  tenant-auto-create: true
+  #Scenes to be used for distributed users.For example,users created by FreeIpa are stored in LDAP.This parameter only applies to Linux, When this parameter is true, worker.tenant.auto.create has no effect and will not automatically create tenants.
+  tenant-distributed-user: false
+  # worker max cpuload avg, only higher than the system cpu load average, worker server can be dispatched tasks. default value 1: will use 100% cpu.
+  max-cpu-load-avg: 1
+  # worker reserved memory, only lower than system available memory, worker server can be dispatched tasks. default value 0.3, only the available memory is higher than 30%, worker server can receive task.
+  reserved-memory: 0.3
+  registry-disconnect-strategy:
+    # The disconnect strategy: stop, waiting
+    strategy: waiting
+    # The max waiting time to reconnect to registry if you set the strategy to waiting
+    max-waiting-time: 100s
+  task-execute-threads-full-policy: REJECT
+
+server:
+  port: 1235
+
+management:
+  endpoints:
+    web:
+      exposure:
+        include: health,metrics,prometheus
+  endpoint:
+    health:
+      enabled: true
+      show-details: always
+  health:
+    db:
+      enabled: true
+    defaults:
+      enabled: false
+  metrics:
+    tags:
+      application: ${spring.application.name}
+
+metrics:
+  enabled: true
+
+
+		</value>
+    <value-attributes>
+			<type>content</type>
+			<empty-value-valid>false</empty-value-valid>
+			<show-property-name>false</show-property-name>
+		</value-attributes>
+		<on-ambari-upgrade add="true"/>
+	</property>
+</configuration>
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-worker-server-logback-spring.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-worker-server-logback-spring.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-worker-server-logback-spring.xml
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/configuration/dolphin-worker-server-logback-spring.xml	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,113 @@
+<?xml version="1.0"?>
+<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
+<!--
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+<configuration supports_adding_forbidden="true">
+    <property>
+        <name>content</name>
+        <description>Dolphinscheduler worker-server logback-spring.xml</description>
+        <value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the "License"); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<configuration scan="true" scanPeriod="120 seconds">
+    <property name="log.base" value="logs"/>
+    <property scope="context" name="log.base.ctx" value="${log.base}" />
+
+    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
+        <encoder>
+            <pattern>
+                [%level] %date{yyyy-MM-dd HH:mm:ss.SSS Z} %logger{96}:[%line] - [WorkflowInstance-%X{workflowInstanceId:-0}][TaskInstance-%X{taskInstanceId:-0}] - %msg%n
+            </pattern>
+            <charset>UTF-8</charset>
+        </encoder>
+    </appender>
+
+    <conversionRule conversionWord="message"
+                    converterClass="org.apache.dolphinscheduler.common.log.SensitiveDataConverter"/>
+    <appender name="TASKLOGFILE" class="ch.qos.logback.classic.sift.SiftingAppender">
+        <filter class="org.apache.dolphinscheduler.plugin.task.api.log.TaskLogFilter"/>
+        <Discriminator class="org.apache.dolphinscheduler.plugin.task.api.log.TaskLogDiscriminator">
+            <key>taskInstanceLogFullPath</key>
+            <logBase>${log.base}</logBase>
+        </Discriminator>
+        <sift>
+            <appender name="FILE-${taskInstanceLogFullPath}" class="ch.qos.logback.core.FileAppender">
+                <file>${taskInstanceLogFullPath}</file>
+                <encoder>
+                    <pattern>
+                        [%level] %date{yyyy-MM-dd HH:mm:ss.SSS Z} - %message%n
+                    </pattern>
+                    <charset>UTF-8</charset>
+                </encoder>
+                <append>true</append>
+            </appender>
+        </sift>
+    </appender>
+    <appender name="WORKERLOGFILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
+        <file>${log.base}/dolphinscheduler-worker.log</file>
+        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
+            <fileNamePattern>${log.base}/dolphinscheduler-worker.%d{yyyy-MM-dd_HH}.%i.log</fileNamePattern>
+            <maxHistory>168</maxHistory>
+            <maxFileSize>200MB</maxFileSize>
+            <totalSizeCap>50GB</totalSizeCap>
+            <cleanHistoryOnStart>true</cleanHistoryOnStart>
+        </rollingPolicy>
+        <encoder>
+            <pattern>
+                [%level] %date{yyyy-MM-dd HH:mm:ss.SSS Z} %logger{96}:[%line] - [WorkflowInstance-%X{workflowInstanceId:-0}][TaskInstance-%X{taskInstanceId:-0}] - %msg%n
+            </pattern>
+            <charset>UTF-8</charset>
+        </encoder>
+    </appender>
+
+    <root level="INFO">
+        <if condition="${DOCKER:-false}">
+            <then>
+                <appender-ref ref="STDOUT"/>
+            </then>
+        </if>
+        <appender-ref ref="TASKLOGFILE"/>
+        <appender-ref ref="WORKERLOGFILE"/>
+    </root>
+</configuration>
+
+]]>
+        </value>
+        <value-attributes>
+            <type>content</type>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+</configuration>
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/kerberos.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/kerberos.json b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/kerberos.json
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/kerberos.json	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,114 @@
+{
+  "services": [
+    {
+      "name": "DOLPHINSCHEDULER",
+      "identities": [
+        {
+          "name": "dolphin_master_hdfs",
+          "reference": "/HDFS/NAMENODE/hdfs",
+          "when" : {
+            "contains" : ["services", "HDFS"]
+          }
+        },
+        {
+          "name": "dolphinscheduler_spnego",
+          "reference": "/spnego"
+        },
+        {
+          "name": "dolphinscheduler",
+          "principal": {
+            "value": "${dolphin-env/dolphin.user}${principal_suffix}@${realm}",
+            "type": "user",
+            "configuration": "dolphin-common/login.user.keytab.username",
+            "local_username": "${dolphin-env/dolphin.user}"
+          },
+          "keytab": {
+            "file": "${keytab_dir}/dolphinscheduler.headless.keytab",
+            "owner": {
+              "name": "${dolphin-env/dolphin.user}",
+              "access": "r"
+            },
+            "group": {
+              "name": "${cluster-env/user_group}",
+              "access": "r"
+            },
+            "configuration": "dolphin-common/login.user.keytab.path"
+          }
+        },
+        {
+          "name": "dolphinscheduler_smokeuser",
+          "reference": "/smokeuser"
+        }
+      ],
+      "configurations": [
+        {
+          "dolphin-common": {
+            "hadoop.security.authentication.startup.state": "true"
+          }
+        }
+      ],
+      "components": [
+        {
+          "name": "DOLPHIN_MASTER",
+          "identities": [
+            {
+              "name": "dolphin_master_hdfs",
+              "reference": "/HDFS/NAMENODE/hdfs",
+              "when" : {
+                "contains" : ["services", "HDFS"]
+              }
+            },
+            {
+              "name": "dolphinscheduler",
+              "principal": {
+                "value": "${dolphin-env/dolphin.user}${principal_suffix}@${realm}",
+                "type" : "service" ,
+                "configuration": "dolphin-common/login.user.keytab.username",
+                "local_username": "${dolphin-env/dolphin.user}"
+              },
+              "keytab": {
+                "file": "${keytab_dir}/dolphinscheduler.headless.keytab",
+                "owner": {
+                  "name": "${dolphin-env/dolphin.user}",
+                  "access": "r"
+                },
+                "group": {
+                  "name": "${cluster-env/user_group}",
+                  "access": ""
+                },
+                "configuration": "dolphin-common/login.user.keytab.path"
+              }
+            }
+          ]
+        },
+
+        {
+          "name": "DOLPHIN_WORKER",
+          "identities": [
+            {
+              "name": "dolphinscheduler",
+              "principal": {
+                "value": "${dolphin-env/dolphin.user}${principal_suffix}@${realm}",
+                "type" : "service" ,
+                "configuration": "dolphin-common/login.user.keytab.username",
+                "local_username": "${dolphin-env/dolphin.user}"
+              },
+              "keytab": {
+                "file": "${keytab_dir}/dolphinscheduler.headless.keytab",
+                "owner": {
+                  "name": "${dolphin-env/dolphin.user}",
+                  "access": "r"
+                },
+                "group": {
+                  "name": "${cluster-env/user_group}",
+                  "access": ""
+                },
+                "configuration": "dolphin-common/login.user.keytab.path"
+              }
+            }
+          ]
+        }
+      ]
+    }
+  ]
+}
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/metainfo.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/metainfo.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/metainfo.xml
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/metainfo.xml	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,132 @@
+<?xml version="1.0"?>
+<!--
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to You under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+       http://www.apache.org/licenses/LICENSE-2.0
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+-->
+<metainfo>
+    <schemaVersion>2.0</schemaVersion>
+    <services>
+        <service>
+            <name>DOLPHINSCHEDULER</name>
+            <displayName>Dolphin Scheduler</displayName>
+            <comment>
+                Component DolphinScheduler Power By JaneTTR . mail: 3832514048@qq.com ,git: https://gitee.com/tt-bigdata/ambari-env
+            </comment>
+            <version>3.2.2</version>
+            <components>
+                <component>
+                    <name>DOLPHIN_MASTER</name>
+                    <displayName>DS Master</displayName>
+                    <category>MASTER</category>
+                    <cardinality>1+</cardinality>
+                    <commandScript>
+                        <script>scripts/dolphin_master_service.py</script>
+                        <scriptType>PYTHON</scriptType>
+                        <timeout>600</timeout>
+                    </commandScript>
+                    <customCommands>
+                        <customCommand>
+                            <name>UPGRADE_SCHEMA</name>
+                            <commandScript>
+                                <script>scripts/dolphin_master_service.py</script>
+                                <scriptType>PYTHON</scriptType>
+                                <timeout>600</timeout>
+                            </commandScript>
+                        </customCommand>
+                    </customCommands>
+                </component>
+                <component>
+                    <name>DOLPHIN_WORKER</name>
+                    <displayName>DS Worker</displayName>
+                    <category>SLAVE</category>
+                    <cardinality>1+</cardinality>
+                    <commandScript>
+                        <script>scripts/dolphin_worker_service.py</script>
+                        <scriptType>PYTHON</scriptType>
+                        <timeout>600</timeout>
+                    </commandScript>
+                </component>
+                <component>
+                    <name>DOLPHIN_ALERT</name>
+                    <displayName>DS Alert</displayName>
+                    <category>SLAVE</category>
+                    <cardinality>1+</cardinality>
+                    <commandScript>
+                        <script>scripts/dolphin_alert_service.py</script>
+                        <scriptType>PYTHON</scriptType>
+                        <timeout>600</timeout>
+                    </commandScript>
+                </component>
+
+                <component>
+                    <name>DOLPHIN_API</name>
+                    <displayName>DS Api</displayName>
+                    <category>SLAVE</category>
+                    <cardinality>1+</cardinality>
+                    <commandScript>
+                        <script>scripts/dolphin_api_service.py</script>
+                        <scriptType>PYTHON</scriptType>
+                        <timeout>600</timeout>
+                    </commandScript>
+                </component>
+            </components>
+
+            <requiredServices>
+                <service>ZOOKEEPER</service>
+                <service>HDFS</service>
+            </requiredServices>
+
+            <osSpecifics>
+                <osSpecific>
+                    <osFamily>any</osFamily>
+                    <packages>
+                        <package>
+                            <name>dolphinscheduler_${stack_version}</name>
+                        </package>
+                    </packages>
+                </osSpecific>
+            </osSpecifics>
+
+            <configuration-dependencies>
+                <config-type>dolphin-common</config-type>
+                <config-type>dolphin-env</config-type>
+                <config-type>dolphin-alert-server-application</config-type>
+                <config-type>dolphin-api-server-application</config-type>
+                <config-type>dolphin-master-server-application</config-type>
+                <config-type>dolphin-worker-server-application</config-type>
+                <config-type>dolphin-tools-application</config-type>
+                <config-type>dolphin-alert-server-logback-spring</config-type>
+                <config-type>dolphin-api-server-logback-spring</config-type>
+                <config-type>dolphin-master-server-logback-spring</config-type>
+                <config-type>dolphin-worker-server-logback-spring</config-type>
+                <config-type>hdfs-site</config-type>
+                <config-type>core-site</config-type>
+            </configuration-dependencies>
+
+            <themes>
+                <theme>
+                    <fileName>theme.json</fileName>
+                    <default>true</default>
+                </theme>
+            </themes>
+
+            <quickLinksConfigurations-dir>quicklinks</quickLinksConfigurations-dir>
+            <quickLinksConfigurations>
+                <quickLinksConfiguration>
+                    <fileName>quicklinks.json</fileName>
+                    <default>true</default>
+                </quickLinksConfiguration>
+            </quickLinksConfigurations>
+        </service>
+    </services>
+</metainfo>
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/alerts/alert_dolphin_scheduler_status.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/alerts/alert_dolphin_scheduler_status.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/alerts/alert_dolphin_scheduler_status.py
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/alerts/alert_dolphin_scheduler_status.py	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,125 @@
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+"""
+
+import socket
+import urllib2
+import os
+import logging
+import ambari_simplejson as json
+from resource_management.libraries.script.script import Script
+import sys
+
+reload(sys)
+sys.setdefaultencoding('utf-8')
+
+logger = logging.getLogger('ambari_alerts')
+
+config = Script.get_config()
+
+
+def get_tokens():
+    """
+    Returns a tuple of tokens in the format {{site/property}} that will be used
+    to build the dictionary passed into execute
+
+    :rtype tuple
+    """
+
+
+def get_info(url, connection_timeout):
+    response = None
+
+    try:
+        response = urllib2.urlopen(url, timeout=connection_timeout)
+        json_data = response.read()
+        return json_data
+    finally:
+        if response is not None:
+            try:
+                response.close()
+            except:
+                pass
+
+
+def execute(configurations={}, parameters={}, host_name=None):
+    """
+    Returns a tuple containing the result code and a pre-formatted result label
+
+    Keyword arguments:
+    configurations : a mapping of configuration key to value
+    parameters : a mapping of script parameter key to value
+    host_name : the name of this host where the alert is running
+
+    :type configurations dict
+    :type parameters dict
+    :type host_name str
+    """
+    import params
+
+    alert_name = parameters['alertName']
+
+    dolphin_pidfile_dir = params.dolphin_home
+
+    pid = "0"
+
+    from resource_management.core import sudo
+
+    is_running = True
+    pid_file_path = ""
+    if alert_name == 'DOLPHIN_MASTER':
+        pid_file_path = dolphin_pidfile_dir + "/master-server/pid"
+    elif alert_name == 'DOLPHIN_WORKER':
+        pid_file_path = dolphin_pidfile_dir + "/worker-server/pid"
+    elif alert_name == 'DOLPHIN_ALERT':
+        pid_file_path = dolphin_pidfile_dir + "/alert-server/pid"
+    elif alert_name == 'DOLPHIN_API':
+        pid_file_path = dolphin_pidfile_dir + "/api-server/pid"
+
+    if not pid_file_path or not os.path.isfile(pid_file_path):
+        is_running = False
+
+    try:
+        pid = int(sudo.read_file(pid_file_path))
+    except:
+        is_running = False
+
+    try:
+        # Kill will not actually kill the process
+        # From the doc:
+        # If sig is 0, then no signal is sent, but error checking is still
+        # performed; this can be used to check for the existence of a
+        # process ID or process group ID.
+        sudo.kill(pid, 0)
+    except OSError:
+        is_running = False
+
+    if host_name is None:
+        host_name = socket.getfqdn()
+
+    if not is_running:
+        result_code = "CRITICAL"
+    else:
+        result_code = "OK"
+
+    label = "The comment {0} of DOLPHIN_SCHEDULER on {1} is {2}".format(alert_name, host_name, result_code)
+
+    return ((result_code, [label]))
+
+
+if __name__ == "__main__":
+    pass
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/dolphin_alert_service.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/dolphin_alert_service.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/dolphin_alert_service.py
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/dolphin_alert_service.py	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,63 @@
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+"""
+import time
+from resource_management import *
+
+from dolphin_env import dolphin_env
+
+
+class DolphinAlertService(Script):
+    def install(self, env):
+        import params
+        env.set_params(params)
+        self.install_packages(env)
+        # Execute(('chmod', '-R', '777', params.dolphin_home))
+        # Execute(('chown', '-R', params.dolphin_user + ":" + params.dolphin_group,  params.dolphin_home))
+
+    def configure(self, env):
+        import params
+        # params.pika_slave = True
+        env.set_params(params)
+        dolphin_env()
+
+    def start(self, env):
+        import params
+        import status_params
+        env.set_params(params)
+        self.configure(env)
+
+        no_op_test = ("ls {0} >/dev/null 2>&1 && ps `cat {0}` | grep `cat {0}` >/dev/null 2>&1").format(status_params.dolphin_alert_server_pidfile)
+
+        start_cmd = format("sh " + params.dolphin_bin_dir + "/dolphinscheduler-daemon.sh start alert-server")
+        Execute(start_cmd, user=params.dolphin_user, not_if=no_op_test, environment=params.dolphinExecEnv)
+
+    def stop(self, env):
+        import params
+        env.set_params(params)
+        stop_cmd = format("sh " + params.dolphin_bin_dir + "/dolphinscheduler-daemon.sh stop alert-server")
+        Execute(stop_cmd, user=params.dolphin_user, environment=params.dolphinExecEnv)
+        time.sleep(5)
+
+    def status(self, env):
+        import status_params
+        env.set_params(status_params)
+        check_process_status(status_params.dolphin_alert_server_pidfile)
+
+
+if __name__ == "__main__":
+    DolphinAlertService().execute()
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/dolphin_api_service.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/dolphin_api_service.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/dolphin_api_service.py
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/dolphin_api_service.py	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,64 @@
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+"""
+import time
+from resource_management import *
+
+from dolphin_env import dolphin_env
+
+
+class DolphinApiService(Script):
+    def install(self, env):
+        import params
+        env.set_params(params)
+        self.install_packages(env)
+        # Execute(('chmod', '-R', '777', params.dolphin_home))
+        # Execute(('chown', '-R', params.dolphin_user + ":" + params.dolphin_group,  params.dolphin_home))
+
+    def configure(self, env):
+        import params
+        # params.pika_slave = True
+        env.set_params(params)
+
+        dolphin_env()
+
+    def start(self, env):
+        import params
+        import status_params
+        env.set_params(params)
+        self.configure(env)
+
+        no_op_test = ("ls {0} >/dev/null 2>&1 && ps `cat {0}` | grep `cat {0}` >/dev/null 2>&1").format(status_params.dolphin_api_server_pidfile)
+
+        start_cmd = format("sh " + params.dolphin_bin_dir + "/dolphinscheduler-daemon.sh start api-server")
+        Execute(start_cmd, user=params.dolphin_user, not_if=no_op_test, environment=params.dolphinExecEnv)
+
+    def stop(self, env):
+        import params
+        env.set_params(params)
+        stop_cmd = format("sh " + params.dolphin_bin_dir + "/dolphinscheduler-daemon.sh stop api-server")
+        Execute(stop_cmd, user=params.dolphin_user, environment=params.dolphinExecEnv)
+        time.sleep(5)
+
+    def status(self, env):
+        import status_params
+        env.set_params(status_params)
+        check_process_status(status_params.dolphin_api_server_pidfile)
+
+
+if __name__ == "__main__":
+    DolphinApiService().execute()
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/dolphin_env.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/dolphin_env.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/dolphin_env.py
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/dolphin_env.py	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,247 @@
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+import os
+from ambari_commons.os_family_impl import OsFamilyFuncImpl, OsFamilyImpl
+from resource_management import *
+
+def dolphin_env():
+    import params
+
+#     Directory(params.dolphin_pidfile_dir,
+#               mode=0755,
+#               owner=params.dolphin_user,
+#               group=params.dolphin_group,
+#               create_parents=True
+#               )
+#     Directory(params.dolphin_log_dir,
+#               mode=0755,
+#               owner=params.dolphin_user,
+#               group=params.dolphin_group,
+#               create_parents=True
+#               )
+#     Directory(params.dolphin_conf_dir,
+#               mode=0755,
+#               owner=params.dolphin_user,
+#               group=params.dolphin_group,
+#               create_parents=True
+#               )
+
+    Directory(params.dolphin_common_map['data.basedir.path'],
+              mode=0777,
+              owner=params.dolphin_user,
+              group=params.dolphin_group,
+              create_parents=True
+              )
+
+    File(format(params.dolphin_env_path),
+         mode=0755,
+         content=InlineTemplate(params.dolphin_env_content),
+         owner=params.dolphin_user,
+         group=params.dolphin_group
+         )
+
+    File(format(params.dolphin_env_path),
+         mode=0755,
+         content=InlineTemplate(params.dolphin_env_content),
+         owner=params.dolphin_user,
+         group=params.dolphin_group
+         )
+
+#     File(format(params.dolphin_bin_dir + "/dolphinscheduler-daemon.sh"),
+#                mode=0755,
+#                content=Template("dolphin-daemon.sh.j2"),
+#                owner=params.dolphin_user,
+#                group=params.dolphin_group
+#                )
+
+    # alert-server
+    File(os.path.join(params.dolphin_alert_server_conf_dir, 'application.yaml'),
+             content=InlineTemplate(params.config['configurations']['dolphin-alert-server-application']['content']),
+             owner=params.dolphin_user,
+             group=params.dolphin_group
+             )
+
+    File(os.path.join(params.dolphin_alert_server_conf_dir, 'common.properties'),
+         mode=0755,
+         content=Template("common.properties.j2"),
+         owner=params.dolphin_user,
+         group=params.dolphin_group
+         )
+
+    File(os.path.join(params.dolphin_alert_server_conf_dir, 'logback-spring.xml'),
+             content=InlineTemplate(params.config['configurations']['dolphin-alert-server-logback-spring']['content']),
+             owner=params.dolphin_user,
+             group=params.dolphin_group
+             )
+
+    # api-server
+    File(os.path.join(params.dolphin_api_server_conf_dir, 'application.yaml'),
+             content=InlineTemplate(params.config['configurations']['dolphin-api-server-application']['content']),
+             owner=params.dolphin_user,
+             group=params.dolphin_group
+             )
+
+    File(os.path.join(params.dolphin_api_server_conf_dir, 'common.properties'),
+         mode=0755,
+         content=Template("common.properties.j2"),
+         owner=params.dolphin_user,
+         group=params.dolphin_group
+         )
+
+    File(os.path.join(params.dolphin_api_server_conf_dir, 'logback-spring.xml'),
+             content=InlineTemplate(params.config['configurations']['dolphin-api-server-logback-spring']['content']),
+             owner=params.dolphin_user,
+             group=params.dolphin_group
+             )
+
+    # mastr server
+    File(os.path.join(params.dolphin_master_server_conf_dir, 'application.yaml'),
+             content=InlineTemplate(params.config['configurations']['dolphin-master-server-application']['content']),
+             owner=params.dolphin_user,
+             group=params.dolphin_group
+             )
+
+    File(os.path.join(params.dolphin_master_server_conf_dir, 'common.properties'),
+         mode=0755,
+         content=Template("common.properties.j2"),
+         owner=params.dolphin_user,
+         group=params.dolphin_group
+         )
+
+    File(os.path.join(params.dolphin_master_server_conf_dir, 'logback-spring.xml'),
+             content=InlineTemplate(params.config['configurations']['dolphin-master-server-logback-spring']['content']),
+             owner=params.dolphin_user,
+             group=params.dolphin_group
+             )
+
+    # worker server
+    File(os.path.join(params.dolphin_worker_server_conf_dir, 'application.yaml'),
+             content=InlineTemplate(params.config['configurations']['dolphin-worker-server-application']['content']),
+             owner=params.dolphin_user,
+             group=params.dolphin_group
+             )
+
+    File(os.path.join(params.dolphin_worker_server_conf_dir, 'common.properties'),
+         mode=0755,
+         content=Template("common.properties.j2"),
+         owner=params.dolphin_user,
+         group=params.dolphin_group
+         )
+
+    File(os.path.join(params.dolphin_worker_server_conf_dir, 'logback-spring.xml'),
+             content=InlineTemplate(params.config['configurations']['dolphin-worker-server-logback-spring']['content']),
+             owner=params.dolphin_user,
+             group=params.dolphin_group
+             )
+
+    # tools
+    File(os.path.join(params.dolphin_tools_conf_dir, 'application.yaml'),
+             content=InlineTemplate(params.config['configurations']['dolphin-tools-application']['content']),
+             owner=params.dolphin_user,
+             group=params.dolphin_group
+             )
+
+    # tools
+    File(os.path.join(params.dolphin_tools_conf_dir, 'common.properties'),
+         mode=0755,
+         content=Template("common.properties.j2"),
+         owner=params.dolphin_user,
+         group=params.dolphin_group
+         )
+
+    # Configuration needed to support NN HA
+    XmlConfig("hdfs-site.xml",
+            conf_dir=params.dolphin_alert_server_conf_dir,
+            configurations=params.config['configurations']['hdfs-site'],
+            configuration_attributes=params.config['configurationAttributes']['hdfs-site'],
+            owner=params.dolphin_user,
+            group=params.dolphin_user,
+            mode=0644
+      )
+
+    XmlConfig("core-site.xml",
+                conf_dir=params.dolphin_alert_server_conf_dir,
+                configurations=params.config['configurations']['core-site'],
+                configuration_attributes=params.config['configurationAttributes']['core-site'],
+                owner=params.dolphin_user,
+                group=params.dolphin_user,
+                mode=0644
+      )
+    XmlConfig("hdfs-site.xml",
+            conf_dir=params.dolphin_api_server_conf_dir,
+            configurations=params.config['configurations']['hdfs-site'],
+            configuration_attributes=params.config['configurationAttributes']['hdfs-site'],
+            owner=params.dolphin_user,
+            group=params.dolphin_user,
+            mode=0644
+      )
+
+    XmlConfig("core-site.xml",
+                conf_dir=params.dolphin_api_server_conf_dir,
+                configurations=params.config['configurations']['core-site'],
+                configuration_attributes=params.config['configurationAttributes']['core-site'],
+                owner=params.dolphin_user,
+                group=params.dolphin_user,
+                mode=0644
+      )
+    XmlConfig("hdfs-site.xml",
+            conf_dir=params.dolphin_master_server_conf_dir,
+            configurations=params.config['configurations']['hdfs-site'],
+            configuration_attributes=params.config['configurationAttributes']['hdfs-site'],
+            owner=params.dolphin_user,
+            group=params.dolphin_user,
+            mode=0644
+      )
+
+    XmlConfig("core-site.xml",
+                conf_dir=params.dolphin_master_server_conf_dir,
+                configurations=params.config['configurations']['core-site'],
+                configuration_attributes=params.config['configurationAttributes']['core-site'],
+                owner=params.dolphin_user,
+                group=params.dolphin_user,
+                mode=0644
+      )
+    XmlConfig("hdfs-site.xml",
+            conf_dir=params.dolphin_worker_server_conf_dir,
+            configurations=params.config['configurations']['hdfs-site'],
+            configuration_attributes=params.config['configurationAttributes']['hdfs-site'],
+            owner=params.dolphin_user,
+            group=params.dolphin_user,
+            mode=0644
+      )
+
+    XmlConfig("core-site.xml",
+                conf_dir=params.dolphin_worker_server_conf_dir,
+                configurations=params.config['configurations']['core-site'],
+                configuration_attributes=params.config['configurationAttributes']['core-site'],
+                owner=params.dolphin_user,
+                group=params.dolphin_user,
+                mode=0644
+      )
+
+
+    if params.resource_storage_type == 'HDFS' :
+    # Create hdfs Dir
+      params.HdfsResource(params.resource_storage_upload_base_path,
+                          type="directory",
+                          action="create_on_execute",
+                          owner=params.dolphin_user,
+                          mode=0777
+      )
+      params.HdfsResource(None, action="execute")
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/dolphin_master_service.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/dolphin_master_service.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/dolphin_master_service.py
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/dolphin_master_service.py	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,76 @@
+# -*- coding: utf-8 -*-
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+"""
+import time
+from resource_management import *
+
+from dolphin_env import dolphin_env
+
+
+class DolphinMasterService(Script):
+    def install(self, env):
+        import params
+        env.set_params(params)
+        self.install_packages(env)
+        # Execute(('chmod', '-R', '777', params.dolphin_home))
+        # Execute(('chown', '-R', params.dolphin_user + ":" + params.dolphin_group,  params.dolphin_home))
+
+
+
+
+    def configure(self, env):
+        import params
+        # params.pika_slave = True
+        env.set_params(params)
+        dolphin_env()
+
+    def start(self, env):
+        import params
+        import status_params
+        env.set_params(params)
+        self.configure(env)
+
+        #upgrade schema
+        upgrade_schema_cmd=format("sh " + params.dolphin_tools_home + "/bin/upgrade-schema.sh")
+        Execute(upgrade_schema_cmd, user=params.dolphin_user, environment=params.dolphinExecEnv)
+
+        no_op_test = ("ls {0} >/dev/null 2>&1 && ps `cat {0}` | grep `cat {0}` >/dev/null 2>&1").format(status_params.dolphin_master_server_pidfile)
+        start_cmd = format("sh " + params.dolphin_bin_dir + "/dolphinscheduler-daemon.sh start master-server")
+        Execute(start_cmd, user=params.dolphin_user, not_if=no_op_test, environment=params.dolphinExecEnv)
+
+    def stop(self, env):
+        import params
+        env.set_params(params)
+        stop_cmd = format("sh " + params.dolphin_bin_dir + "/dolphinscheduler-daemon.sh stop master-server")
+        Execute(stop_cmd, user=params.dolphin_user, environment=params.dolphinExecEnv)
+        time.sleep(5)
+
+    def status(self, env):
+        import status_params
+        env.set_params(status_params)
+        check_process_status(status_params.dolphin_master_server_pidfile)
+
+    def upgrade_schema(self, env):
+        import params
+        env.set_params(params)
+        self.configure(env)
+        upgrade_schema_cmd=format("sh " + params.dolphin_tools_home + "/bin/upgrade-schema.sh")
+        Execute(upgrade_schema_cmd, user=params.dolphin_user, environment=params.dolphinExecEnv)
+
+if __name__ == "__main__":
+    DolphinMasterService().execute()
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/dolphin_worker_service.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/dolphin_worker_service.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/dolphin_worker_service.py
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/dolphin_worker_service.py	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,64 @@
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+"""
+import time
+from resource_management import *
+
+from dolphin_env import dolphin_env
+
+
+class DolphinWorkerService(Script):
+  def install(self, env):
+    import params
+    env.set_params(params)
+    self.install_packages(env)
+    # Execute(('chmod', '-R', '777', params.dolphin_home))
+    # Execute(('chown', '-R', params.dolphin_user + ":" + params.dolphin_group,  params.dolphin_home))
+
+  def configure(self, env):
+    import params
+    # params.pika_slave = True
+    env.set_params(params)
+
+    dolphin_env()
+
+  def start(self, env):
+    import params
+    import status_params
+    env.set_params(params)
+    self.configure(env)
+
+    no_op_test = ("ls {0} >/dev/null 2>&1 && ps `cat {0}` | grep `cat {0}` >/dev/null 2>&1").format(status_params.dolphin_worker_server_pidfile)
+
+    start_cmd = format("sh " + params.dolphin_bin_dir + "/dolphinscheduler-daemon.sh start worker-server")
+    Execute(start_cmd, user=params.dolphin_user, not_if=no_op_test, environment=params.dolphinExecEnv)
+
+  def stop(self, env):
+    import params
+    env.set_params(params)
+    stop_cmd = format("sh " + params.dolphin_bin_dir + "/dolphinscheduler-daemon.sh stop worker-server")
+    Execute(stop_cmd, user=params.dolphin_user, environment=params.dolphinExecEnv)
+    time.sleep(5)
+
+  def status(self, env):
+    import status_params
+    env.set_params(status_params)
+    check_process_status(status_params.dolphin_worker_server_pidfile)
+
+
+if __name__ == "__main__":
+  DolphinWorkerService().execute()
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/params.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/params.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/params.py
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/params.py	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,234 @@
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+"""
+
+import sys
+from resource_management import *
+from resource_management.core.logger import Logger
+from resource_management.libraries.functions import default
+from resource_management.libraries.resources.hdfs_resource import HdfsResource
+from resource_management.libraries.functions import conf_select, stack_select
+from resource_management.libraries.functions.get_not_managed_resources import get_not_managed_resources
+
+Logger.initialize_logger()
+reload(sys)
+sys.setdefaultencoding('utf-8')
+
+# server configurations
+config = Script.get_config()
+tmp_dir = Script.get_tmp_dir()
+stack_root = Script.get_stack_root()
+stack_version = Script.get_stack_version()
+
+# define distro-select package name
+ds_name_alert = 'dolphin-alert'
+ds_name_api = 'dolphin-api'
+ds_name_worker = 'dolphin-worker'
+ds_name_master = 'dolphin-master'
+ds_name_home = 'dolphinscheduler'
+
+# conf_dir = "/etc/"
+dolphin_home = format('{stack_root}/current/')
+dolphin_tools_home = format('{dolphin_home}/{ds_name_home}/tools')
+
+# dolphin_bin_dir  /usr/bigtop/current/dolphinscheduler/bin
+dolphin_bin_dir = format('{stack_root}/current/{ds_name_home}/bin')
+
+rmHosts = default("/clusterHostInfo/rm_host", [])
+
+# dolphin-env
+dolphin_env_map = {}
+dolphin_env_map.update(config['configurations']['dolphin-env'])
+
+# which user to install and admin dolphin scheduler
+dolphin_user = dolphin_env_map['dolphin.user']
+dolphin_group = dolphin_env_map['dolphin.group']
+
+# dolphinscheduler conf
+dolphin_alert_server_conf_dir = format('{stack_root}/current/{ds_name_alert}/conf')
+dolphin_api_server_conf_dir = format('{stack_root}/current/{ds_name_api}/conf')
+dolphin_master_server_conf_dir = format('{stack_root}/current/{ds_name_master}/conf')
+dolphin_worker_server_conf_dir = format('{stack_root}/current/{ds_name_worker}/conf')
+
+# temp define tools path
+dolphin_tools_conf_dir = format('{dolphin_tools_home}/conf')
+
+# .dolphinscheduler_env.sh
+# dolphin_env_path = dolphin_home + '/bin/env/dolphinscheduler_env.sh'
+dolphin_env_path = format('{dolphin_bin_dir}/env/dolphinscheduler_env.sh')
+dolphin_env_content = dolphin_env_map['dolphinscheduler-env-content']
+
+# database config
+dolphin_database_config = {}
+dolphin_database_config['dolphin_database_type'] = dolphin_env_map['dolphin.database.type']
+dolphin_database_config['dolphin_database_username'] = dolphin_env_map['dolphin.database.username']
+dolphin_database_config['dolphin_database_password'] = dolphin_env_map['dolphin.database.password']
+if 'mysql' == dolphin_database_config['dolphin_database_type']:
+    dolphin_database_config['dolphin_database_driver'] = 'com.mysql.jdbc.Driver'
+    dolphin_database_config['dolphin_database_url'] = 'jdbc:mysql://' + dolphin_env_map['dolphin.database.host'] \
+                                                      + ':' + dolphin_env_map['dolphin.database.port'] \
+                                                      + '/' + dolphin_env_map['dolphin.database.dbname'] \
+                                                      + '?useUnicode=true&characterEncoding=UTF-8'
+else:
+    dolphin_database_config['dolphin_database_driver'] = 'org.postgresql.Driver'
+    dolphin_database_config['dolphin_database_url'] = 'jdbc:postgresql://' + dolphin_env_map['dolphin.database.host'] \
+                                                      + ':' + dolphin_env_map['dolphin.database.port'] \
+                                                      + '/' + dolphin_env_map['dolphin.database.dbname']
+
+# alert-server/conf/application.yaml
+dolphin_alert_server_application_map = {}
+dolphin_alert_server_application_map.update(config['configurations']['dolphin-alert-server-application'])
+
+# api-server/conf/application.yaml
+dolphin_api_server_application_map = {}
+dolphin_api_server_application_map.update(config['configurations']['dolphin-api-server-application'])
+
+# api-server/conf/application.yaml
+dolphin_master_server_application_map = {}
+dolphin_master_server_application_map.update(config['configurations']['dolphin-master-server-application'])
+
+# worker-server/conf/application.yaml
+dolphin_worker_server_application_map = {}
+dolphin_worker_server_application_map.update(config['configurations']['dolphin-worker-server-application'])
+
+# Cluster Zookeeper quorum
+zookeeper_quorum = None
+
+Logger.info('zookeeper_server_hosts:')
+Logger.info(str(len(default("/clusterHostInfo/zookeeper_server_hosts", []))))
+
+if not len(default("/clusterHostInfo/zookeeper_server_hosts", [])) == 0:
+    if 'zoo.cfg' in config['configurations'] and 'clientPort' in config['configurations']['zoo.cfg']:
+        zookeeper_clientPort = config['configurations']['zoo.cfg']['clientPort']
+    else:
+        zookeeper_clientPort = '2181'
+    zookeeper_quorum = (':' + zookeeper_clientPort + ',').join(config['clusterHostInfo']['zookeeper_server_hosts'])
+    # last port config
+    zookeeper_quorum += ':' + zookeeper_clientPort
+
+Logger.info('zookeeper_quorum:' + zookeeper_quorum)
+
+java_home = config['ambariLevelParams']['java_home']
+ambari_java_home = default("/ambariLevelParams/ambari_java_home", None)
+# not supporting 32 bit jdk.
+java64_home = ambari_java_home if ambari_java_home is not None else java_home
+
+# configurations of security
+kinit_path_local = get_kinit_path(default('/configurations/kerberos-env/executable_search_paths', None))
+security_enabled = config['configurations']['cluster-env']['security_enabled']
+if security_enabled:
+    _hostname_lowercase = config['agentLevelParams']['hostname'].lower()
+    HTTP_principal = config['configurations']['hdfs-site']['dfs.web.authentication.kerberos.principal']
+    HTTP_keytab = config['configurations']['hdfs-site']['dfs.web.authentication.kerberos.keytab']
+    kinit_path = kinit_path_local
+    zk_principal = config['configurations']['zookeeper-env']['zookeeper_principal_name'].replace('_HOST',
+                                                                                                 _hostname_lowercase)
+    zk_keytab = config['configurations']['zookeeper-env']['zookeeper_principal_name']
+
+# configurations of HDFS
+namenode_hosts = default("/clusterHostInfo/namenode_hosts", [])
+namenode_hosts.sort()
+namenode_address = None
+if 'dfs.namenode.rpc-address' in config['configurations']['hdfs-site']:
+    namenode_rpcaddress = config['configurations']['hdfs-site']['dfs.namenode.rpc-address']
+    namenode_address = format("hdfs://{namenode_rpcaddress}")
+else:
+    namenode_address = config['configurations']['core-site']['fs.defaultFS']
+# To judge whether the namenode HA mode
+logical_name = ''
+dfs_ha_enabled = False
+dfs_ha_nameservices = default("/configurations/hdfs-site/dfs.nameservices", None)
+dfs_ha_namenode_ids = default(format("/configurations/hdfs-site/dfs.ha.namenodes.{dfs_ha_nameservices}"), None)
+dfs_ha_namemodes_ids_list = []
+if dfs_ha_namenode_ids:
+    dfs_ha_namemodes_ids_list = dfs_ha_namenode_ids.split(",")
+    dfs_ha_namenode_ids_array_len = len(dfs_ha_namemodes_ids_list)
+    if dfs_ha_namenode_ids_array_len > 1:
+        dfs_ha_enabled = True
+if dfs_ha_enabled:
+    namenode_address = format('hdfs://{dfs_ha_nameservices}')
+    logical_name = dfs_ha_nameservices
+else:
+    dfs_namenode_http_address = config['configurations']['hdfs-site']['dfs.namenode.http-address']
+
+# common.properties
+dolphin_common_map = {}
+dolphin_common_map.update(config['configurations']['dolphin-common'])
+
+if 'yarn-site' in config['configurations'] and \
+        'yarn.resourcemanager.webapp.address' in config['configurations']['yarn-site']:
+    yarn_resourcemanager_webapp_address = config['configurations']['yarn-site']['yarn.resourcemanager.webapp.address']
+    yarn_application_status_address = 'http://' + yarn_resourcemanager_webapp_address + '/ws/v1/cluster/apps/%s'
+    dolphin_common_map['yarn.application.status.address'] = yarn_application_status_address
+
+rmHosts = default("/clusterHostInfo/rm_host", [])
+if len(rmHosts) > 1:
+    dolphin_common_map['yarn.resourcemanager.ha.rm.ids'] = ','.join(rmHosts)
+else:
+    dolphin_common_map['yarn.resourcemanager.ha.rm.ids'] = ''
+
+dolphin_common_map_tmp = config['configurations']['dolphin-common']
+data_basedir_path = dolphin_common_map_tmp['data.basedir.path']
+dolphin_common_map['dolphinscheduler.env.path'] = dolphin_env_path
+
+dolphin_common_map['resource.hdfs.fs.defaultFS'] = namenode_address
+
+Logger.info('namenode_address:' + namenode_address)
+# Logger.info('namenode_address2:' + config['configurations']['dolphin-common']['resource.hdfs.fs.defaultFS'])
+
+# resource.storage
+resource_storage_type = config['configurations']['dolphin-common']['resource.storage.type']
+resource_storage_upload_base_path = config['configurations']['dolphin-common']['resource.storage.upload.base.path']
+
+# hdfs
+hdfs_user = config['configurations']['hadoop-env']['hdfs_user']
+hdfs_principal_name = config['configurations']['hadoop-env']['hdfs_principal_name']
+hdfs_user_keytab = config['configurations']['hadoop-env']['hdfs_user_keytab']
+user_group = config['configurations']['cluster-env']['user_group']
+
+hdfs_resource_ignore_file = "/var/lib/ambari-agent/data/.hdfs_resource_ignore"
+hadoop_conf_dir = conf_select.get_hadoop_conf_dir()
+hadoop_bin_dir = stack_select.get_hadoop_dir("bin")
+default_fs = config['configurations']['core-site']['fs.defaultFS']
+hdfs_site = config['configurations']['hdfs-site']
+hdfs_resource_ignore_file = "/var/lib/ambari-agent/data/.hdfs_resource_ignore"
+
+dfs_type = default("/clusterLevelParams/dfs_type", "")
+
+import functools
+
+# create partial functions with common arguments for every HdfsResource call
+# to create/delete hdfs directory/file/copyfromlocal we need to call params.HdfsResource in code
+HdfsResource = functools.partial(
+    HdfsResource,
+    user=hdfs_user,
+    hdfs_resource_ignore_file=hdfs_resource_ignore_file,
+    security_enabled=security_enabled,
+    keytab=hdfs_user_keytab,
+    kinit_path_local=kinit_path_local,
+    hadoop_bin_dir=hadoop_bin_dir,
+    hadoop_conf_dir=hadoop_conf_dir,
+    principal_name=hdfs_principal_name,
+    hdfs_site=hdfs_site,
+    default_fs=default_fs,
+    immutable_paths=get_not_managed_resources(),
+    dfs_type=dfs_type
+)
+
+dolphinExecEnv = {'JAVA_HOME': java_home,
+                  'HADOOP_CONF_DIR': hadoop_conf_dir
+                  }
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/service_check.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/service_check.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/service_check.py
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/service_check.py	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,31 @@
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+
+from resource_management import *
+from resource_management.libraries.functions import get_unique_id_and_date
+
+class ServiceCheck(Script):
+  def service_check(self, env):
+    import params
+    #env.set_params(params)
+
+    # Execute(format("which pika_server"))
+
+if __name__ == "__main__":
+  ServiceCheck().execute()
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/status_params.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/status_params.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/status_params.py
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/scripts/status_params.py	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,30 @@
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+"""
+
+from resource_management import *
+
+config = Script.get_config()
+stack_root = Script.get_stack_root()
+
+dolphin_run_dir = "/var/run/dolphinscheduler/"
+
+
+dolphin_alert_server_pidfile = format('{stack_root}/current/dolphinscheduler/alert-server/pid')
+dolphin_api_server_pidfile = format('{stack_root}/current/dolphinscheduler/api-server/pid')
+dolphin_master_server_pidfile = format('{stack_root}/current/dolphinscheduler/master-server/pid')
+dolphin_worker_server_pidfile = format('{stack_root}/current/dolphinscheduler/worker-server/pid')
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/templates/common.properties.j2
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/templates/common.properties.j2 b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/templates/common.properties.j2
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/templates/common.properties.j2	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,20 @@
+#
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+{% for key, value in dolphin_common_map.iteritems() -%}
+  {{key}}={{value}}
+{% endfor %}
\ No newline at end of file
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/templates/dolphin-daemon.sh.j2
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/templates/dolphin-daemon.sh.j2 b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/templates/dolphin-daemon.sh.j2
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/package/templates/dolphin-daemon.sh.j2	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,116 @@
+#!/bin/sh
+#
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+usage="Usage: dolphinscheduler-daemon.sh (start|stop) <command> "
+
+# if no args specified, show usage
+if [ $# -le 1 ]; then
+  echo $usage
+  exit 1
+fi
+
+startStop=$1
+shift
+command=$1
+shift
+
+echo "Begin $startStop $command......"
+
+BIN_DIR=`dirname $0`
+BIN_DIR=`cd "$BIN_DIR"; pwd`
+DOLPHINSCHEDULER_HOME=$BIN_DIR/..
+
+export HOSTNAME=`hostname`
+
+DOLPHINSCHEDULER_LIB_JARS={{dolphin_lib_jars}}
+
+DOLPHINSCHEDULER_OPTS="-server -Xmx16g -Xms4g -Xss512k -XX:+DisableExplicitGC -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:LargePageSizeInBytes=128m -XX:+UseFastAccessorMethods -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70"
+STOP_TIMEOUT=5
+
+log={{dolphin_log_dir}}/dolphinscheduler-$command-$HOSTNAME.out
+pid={{dolphin_pidfile_dir}}/$command.pid
+
+cd $DOLPHINSCHEDULER_HOME
+
+if [ "$command" = "api-server" ]; then
+  LOG_FILE="-Dlogging.config={{dolphin_conf_dir}}/logback-api.xml -Dspring.profiles.active=api"
+  CLASS=org.apache.dolphinscheduler.api.ApiApplicationServer
+elif [ "$command" = "master-server" ]; then
+  LOG_FILE="-Dlogging.config={{dolphin_conf_dir}}/logback-master.xml -Ddruid.mysql.usePingMethod=false"
+  CLASS=org.apache.dolphinscheduler.server.master.MasterServer
+elif [ "$command" = "worker-server" ]; then
+  LOG_FILE="-Dlogging.config={{dolphin_conf_dir}}/logback-worker.xml -Ddruid.mysql.usePingMethod=false"
+  CLASS=org.apache.dolphinscheduler.server.worker.WorkerServer
+elif [ "$command" = "alert-server" ]; then
+  LOG_FILE="-Dlogging.config={{dolphin_conf_dir}}/logback-alert.xml"
+  CLASS=org.apache.dolphinscheduler.alert.AlertServer
+elif [ "$command" = "logger-server" ]; then
+  CLASS=org.apache.dolphinscheduler.server.log.LoggerServer
+else
+  echo "Error: No command named \`$command' was found."
+  exit 1
+fi
+
+case $startStop in
+  (start)
+
+    if [ -f $pid ]; then
+      if kill -0 `cat $pid` > /dev/null 2>&1; then
+        echo $command running as process `cat $pid`.  Stop it first.
+        exit 1
+      fi
+    fi
+
+    echo starting $command, logging to $log
+
+    exec_command="$LOG_FILE $DOLPHINSCHEDULER_OPTS -classpath {{dolphin_conf_dir}}:{{dolphin_lib_jars}} $CLASS"
+
+    echo "nohup java $exec_command > $log 2>&1 < /dev/null &"
+    nohup java $exec_command > $log 2>&1 < /dev/null &
+    echo $! > $pid
+    ;;
+
+  (stop)
+
+      if [ -f $pid ]; then
+        TARGET_PID=`cat $pid`
+        if kill -0 $TARGET_PID > /dev/null 2>&1; then
+          echo stopping $command
+          kill $TARGET_PID
+          sleep $STOP_TIMEOUT
+          if kill -0 $TARGET_PID > /dev/null 2>&1; then
+            echo "$command did not stop gracefully after $STOP_TIMEOUT seconds: killing with kill -9"
+            kill -9 $TARGET_PID
+          fi
+        else
+          echo no $command to stop
+        fi
+        rm -f $pid
+      else
+        echo no $command to stop
+      fi
+      ;;
+
+  (*)
+    echo $usage
+    exit 1
+    ;;
+
+esac
+
+echo "End $startStop $command."
\ No newline at end of file
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/quicklinks/quicklinks.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/quicklinks/quicklinks.json b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/quicklinks/quicklinks.json
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/quicklinks/quicklinks.json	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,26 @@
+{
+  "name": "default",
+  "description": "default quick links configuration",
+  "configuration": {
+    "protocol":
+    {
+      "type":"http"
+    },
+
+    "links": [
+      {
+        "name": "dolphin-application-ui",
+        "label": "DolphinApplication UI",
+        "requires_user_name": "false",
+        "component_name": "DOLPHIN_API",
+        "url": "%@://%@:%@/dolphinscheduler/",
+        "port":{
+          "http_property": "server.port",
+          "http_default_port": "12345",
+          "regex": "^(\\d+)$",
+          "site": "dolphin-application-api"
+        }
+      }
+    ]
+  }
+}
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/role_command_order.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/role_command_order.json b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/role_command_order.json
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/role_command_order.json	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,10 @@
+{
+  "general_deps" : {
+    "_comment" : "dependencies for DOLPHINSCHEDULER",
+	"DOLPHIN_ALERT-START" : ["DOLPHIN_MASTER-START"],
+	"DOLPHIN_API-START" : ["DOLPHIN_MASTER-START"],
+	"DOLPHIN_WORKER-START" : ["DOLPHIN_MASTER-START"],
+	"DOLPHIN_MASTER-START" : ["ZOOKEEPER_SERVER-START","NAMENODE-START","DATANODE-START"]
+  }
+}
+
\ No newline at end of file
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/themes/theme.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/themes/theme.json b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/themes/theme.json
new file mode 100755
--- /dev/null	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/DOLPHINSCHEDULER/themes/theme.json	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -0,0 +1,467 @@
+{
+  "name": "default",
+  "description": "Default theme for Dolphin Scheduler service",
+  "configuration": {
+    "layouts": [
+      {
+        "name": "default",
+        "tabs": [
+          {
+            "name": "settings",
+            "display-name": "Settings",
+            "layout": {
+              "tab-rows": "3",
+              "tab-columns": "3",
+              "sections": [
+                {
+                  "name": "dolphin-env-config",
+                  "display-name": "Dolphin Env Config",
+                  "row-index": "0",
+                  "column-index": "0",
+                  "row-span": "1",
+                  "column-span": "2",
+                  "section-rows": "1",
+                  "section-columns": "2",
+                  "subsections": [
+                    {
+                      "name": "env-row1-col1",
+                      "display-name": "Deploy User Info",
+                      "row-index": "0",
+                      "column-index": "0",
+                      "row-span": "1",
+                      "column-span": "1"
+                    },
+                    {
+                      "name": "env-row1-col2",
+                      "display-name": "System Env Optimization",
+                      "row-index": "0",
+                      "column-index": "1",
+                      "row-span": "1",
+                      "column-span": "1"
+                    }
+                  ]
+                },
+                {
+                  "name": "dolphin-database-config",
+                  "display-name": "Database Config",
+                  "row-index": "1",
+                  "column-index": "0",
+                  "row-span": "1",
+                  "column-span": "2",
+                  "section-rows": "1",
+                  "section-columns": "3",
+                  "subsections": [
+                    {
+                      "name": "database-row1-col1",
+                      "row-index": "0",
+                      "column-index": "0",
+                      "row-span": "1",
+                      "column-span": "1"
+                    },
+                    {
+                      "name": "database-row1-col2",
+                      "row-index": "0",
+                      "column-index": "1",
+                      "row-span": "1",
+                      "column-span": "1"
+                    },
+                    {
+                      "name": "database-row1-col3",
+                      "row-index": "0",
+                      "column-index": "2",
+                      "row-span": "1",
+                      "column-span": "1"
+                    }
+                  ]
+                },
+                {
+                  "name": "dynamic-config",
+                  "row-index": "2",
+                  "column-index": "0",
+                  "row-span": "1",
+                  "column-span": "2",
+                  "section-rows": "1",
+                  "section-columns": "3",
+                  "subsections": [
+                    {
+                      "name": "dynamic-row1-col1",
+                      "display-name": "Resource FS Config",
+                      "row-index": "0",
+                      "column-index": "0",
+                      "row-span": "1",
+                      "column-span": "1"
+                    }
+                  ]
+                }
+              ]
+            }
+          }
+        ]
+      }
+    ],
+    "placement": {
+      "configuration-layout": "default",
+      "configs": [
+        {
+          "config": "dolphin-env/dolphin.database.type",
+          "subsection-name": "database-row1-col1"
+        },
+        {
+          "config": "dolphin-env/dolphin.database.dbname",
+          "subsection-name": "database-row1-col1"
+        },
+        {
+          "config": "dolphin-env/dolphin.database.host",
+          "subsection-name": "database-row1-col2"
+        },
+        {
+          "config": "dolphin-env/dolphin.database.port",
+          "subsection-name": "database-row1-col2"
+        },
+        {
+          "config": "dolphin-env/dolphin.database.username",
+          "subsection-name": "database-row1-col3"
+        },
+        {
+          "config": "dolphin-env/dolphin.database.password",
+          "subsection-name": "database-row1-col3"
+        },
+        {
+          "config": "dolphin-env/dolphin.user",
+          "subsection-name": "env-row1-col1"
+        },
+        {
+          "config": "dolphin-env/dolphin.group",
+          "subsection-name": "env-row1-col1"
+        },
+        {
+          "config": "dolphin-env/dolphinscheduler-env-content",
+          "subsection-name": "env-row1-col2"
+        },
+        {
+          "config": "dolphin-common/resource.storage.type",
+          "subsection-name": "dynamic-row1-col1"
+        },
+        {
+          "config": "dolphin-common/resource.storage.upload.base.path",
+          "subsection-name": "dynamic-row1-col1",
+          "depends-on": [
+            {
+              "configs":[
+                "dolphin-common/resource.storage.type"
+              ],
+              "if": "${dolphin-common/resource.storage.type} === HDFS || ${dolphin-common/resource.storage.type} === S3",
+              "then": {
+                "property_value_attributes": {
+                  "visible": true
+                }
+              },
+              "else": {
+                "property_value_attributes": {
+                  "visible": false
+                }
+              }
+            }
+          ]
+        },
+        {
+          "config": "dolphin-common/resource.hdfs.root.user",
+          "subsection-name": "dynamic-row1-col1",
+          "depends-on": [
+            {
+              "configs":[
+                "dolphin-common/resource.storage.type"
+              ],
+              "if": "${dolphin-common/resource.storage.type} === HDFS",
+              "then": {
+                "property_value_attributes": {
+                  "visible": true
+                }
+              },
+              "else": {
+                "property_value_attributes": {
+                  "visible": false
+                }
+              }
+            }
+          ]
+        },
+        {
+          "config": "dolphin-common/resource.storage.upload.base.path",
+          "subsection-name": "dynamic-row1-col1",
+          "depends-on": [
+            {
+              "configs":[
+                "dolphin-common/resource.storage.type"
+              ],
+              "if": "${dolphin-common/resource.storage.type} === HDFS",
+              "then": {
+                "property_value_attributes": {
+                  "visible": true
+                }
+              },
+              "else": {
+                "property_value_attributes": {
+                  "visible": false
+                }
+              }
+            }
+          ]
+        },
+        {
+          "config": "dolphin-common/resource.hdfs.fs.defaultFS",
+          "subsection-name": "dynamic-row1-col1",
+          "depends-on": [
+            {
+              "configs":[
+                "dolphin-common/resource.storage.type"
+              ],
+              "if": "${dolphin-common/resource.storage.type} === HDFS",
+              "then": {
+                "property_value_attributes": {
+                  "visible": true
+                }
+              },
+              "else": {
+                "property_value_attributes": {
+                  "visible": false
+                }
+              }
+            }
+          ]
+        },
+        {
+          "config": "dolphin-common/resource.aws.s3.endpoint",
+          "subsection-name": "dynamic-row1-col1",
+          "depends-on": [
+            {
+              "configs":[
+                "dolphin-common/resource.storage.type"
+              ],
+              "if": "${dolphin-common/resource.storage.type} === S3",
+              "then": {
+                "property_value_attributes": {
+                  "visible": true
+                }
+              },
+              "else": {
+                "property_value_attributes": {
+                  "visible": false
+                }
+              }
+            }
+          ]
+        },
+        {
+          "config": "dolphin-common/resource.aws.access.key.id",
+          "subsection-name": "dynamic-row1-col1",
+          "depends-on": [
+            {
+              "configs":[
+                "dolphin-common/resource.storage.type"
+              ],
+              "if": "${dolphin-common/resource.storage.type} === S3",
+              "then": {
+                "property_value_attributes": {
+                  "visible": true
+                }
+              },
+              "else": {
+                "property_value_attributes": {
+                  "visible": false
+                }
+              }
+            }
+          ]
+        },
+        {
+          "config": "dolphin-common/resource.aws.secret.access.key",
+          "subsection-name": "dynamic-row1-col1",
+          "depends-on": [
+            {
+              "configs":[
+                "dolphin-common/resource.storage.type"
+              ],
+              "if": "${dolphin-common/resource.storage.type} === S3",
+              "then": {
+                "property_value_attributes": {
+                  "visible": true
+                }
+              },
+              "else": {
+                "property_value_attributes": {
+                  "visible": false
+                }
+              }
+            }
+          ]
+        },
+        {
+          "config": "dolphin-common/resource.aws.region",
+          "subsection-name": "dynamic-row1-col1",
+          "depends-on": [
+            {
+              "configs":[
+                "dolphin-common/resource.storage.type"
+              ],
+              "if": "${dolphin-common/resource.storage.type} === S3",
+              "then": {
+                "property_value_attributes": {
+                  "visible": true
+                }
+              },
+              "else": {
+                "property_value_attributes": {
+                  "visible": false
+                }
+              }
+            }
+          ]
+        },
+        {
+          "config": "dolphin-common/resource.aws.s3.bucket.name",
+          "subsection-name": "dynamic-row1-col1",
+          "depends-on": [
+            {
+              "configs":[
+                "dolphin-common/resource.storage.type"
+              ],
+              "if": "${dolphin-common/resource.storage.type} === S3",
+              "then": {
+                "property_value_attributes": {
+                  "visible": true
+                }
+              },
+              "else": {
+                "property_value_attributes": {
+                  "visible": false
+                }
+              }
+            }
+          ]
+        }
+      ]
+    },
+    "widgets": [
+      {
+        "config": "dolphin-env/dolphin.database.type",
+        "widget": {
+          "type": "combo"
+        }
+      },
+      {
+        "config": "dolphin-env/dolphin.database.host",
+        "widget": {
+          "type": "text-field"
+        }
+      },
+      {
+        "config": "dolphin-env/dolphin.database.dbname",
+        "widget": {
+          "type": "text-field"
+        }
+      },
+      {
+        "config": "dolphin-env/dolphin.database.port",
+        "widget": {
+          "type": "text-field",
+          "units": [
+            {
+              "unit-name": "int"
+            }
+          ]
+        }
+      },
+      {
+        "config": "dolphin-env/dolphin.database.username",
+        "widget": {
+          "type": "text-field"
+        }
+      },
+      {
+        "config": "dolphin-env/dolphin.database.password",
+        "widget": {
+          "type": "password"
+        }
+      },
+      {
+        "config": "dolphin-env/dolphin.user",
+        "widget": {
+          "type": "text-field"
+        }
+      },
+      {
+        "config": "dolphin-env/dolphin.group",
+        "widget": {
+          "type": "text-field"
+        }
+      },
+      {
+        "config": "dolphin-env/dolphinscheduler-env-content",
+        "widget": {
+          "type": "text-area"
+        }
+      },
+      {
+        "config": "dolphin-common/resource.storage.type",
+        "widget": {
+          "type": "text-field"
+        }
+      },
+      {
+        "config": "dolphin-common/resource.storage.upload.base.path",
+        "widget": {
+          "type": "text-field"
+        }
+      },
+      {
+        "config": "dolphin-common/resource.hdfs.root.user",
+        "widget": {
+          "type": "text-field"
+        }
+      },
+      {
+        "config": "dolphin-common/resource.storage.upload.base.path",
+        "widget": {
+          "type": "text-field"
+        }
+      },
+      {
+        "config": "dolphin-common/resource.hdfs.fs.defaultFS",
+        "widget": {
+          "type": "text-field"
+        }
+      },
+      {
+        "config": "dolphin-common/resource.aws.s3.endpoint",
+        "widget": {
+          "type": "text-field"
+        }
+      },
+      {
+        "config": "dolphin-common/resource.aws.access.key.id",
+        "widget": {
+          "type": "text-field"
+        }
+      },
+      {
+        "config": "dolphin-common/resource.aws.secret.access.key",
+        "widget": {
+          "type": "text-field"
+        }
+      },
+      {
+        "config": "dolphin-common/resource.aws.region",
+        "widget": {
+          "type": "text-field"
+        }
+      },
+      {
+        "config": "dolphin-common/resource.aws.s3.bucket.name",
+        "widget": {
+          "type": "text-field"
+        }
+      }
+    ]
+  }
+}
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/REDIS/metainfo.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/REDIS/metainfo.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/REDIS/metainfo.xml
--- a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/REDIS/metainfo.xml	(revision eef11e458f51f75f2bb9f7699fed22a994bf0799)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/REDIS/metainfo.xml	(revision 4eb83c7fe331e256ebccc45af9ed25fbba38a3af)
@@ -40,18 +40,6 @@
                         <script>scripts/redis_master.py</script> <!-- Python 脚本 -->
                         <scriptType>PYTHON</scriptType>
                     </commandScript>
-                    <configFiles>
-                        <configFile>
-                            <type>env</type>
-                            <fileName>redis-site.xml</fileName>
-                            <dictionaryName>redis-site</dictionaryName>
-                        </configFile>
-                        <configFile>
-                            <type>env</type>
-                            <fileName>redis-env.sh</fileName>
-                            <dictionaryName>redis-env</dictionaryName>
-                        </configFile>
-                    </configFiles>
                 </component>

                 <!-- Redis 从节点组件 -->
@@ -65,18 +53,6 @@
                         <script>scripts/redis_slave.py</script> <!-- Python 脚本 -->
                         <scriptType>PYTHON</scriptType>
                     </commandScript>
-                    <configFiles>
-                        <configFile>
-                            <type>env</type>
-                            <fileName>redis-site.xml</fileName>
-                            <dictionaryName>redis-site</dictionaryName>
-                        </configFile>
-                        <configFile>
-                            <type>env</type>
-                            <fileName>redis-env.sh</fileName>
-                            <dictionaryName>redis-env</dictionaryName>
-                        </configFile>
-                    </configFiles>
                 </component>

                 <!-- Redis 客户端组件 -->
@@ -90,6 +66,18 @@
                         <script>scripts/redis_client.py</script> <!-- Python 脚本 -->
                         <scriptType>PYTHON</scriptType>
                     </commandScript>
+                    <configFiles>
+                        <configFile>
+                            <type>xml</type>
+                            <fileName>redis-site.xml</fileName>
+                            <dictionaryName>redis-site</dictionaryName>
+                        </configFile>
+                        <configFile>
+                            <type>xml</type>
+                            <fileName>redis-env.sh</fileName>
+                            <dictionaryName>redis-env</dictionaryName>
+                        </configFile>
+                    </configFiles>
                 </component>
             </components>





Subject: [PATCH] feature： 支持 nightingale
---
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/properties/stack_packages.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/properties/stack_packages.json b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/properties/stack_packages.json
--- a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/properties/stack_packages.json	(revision be0f08206a7d8da78fedd557be3ea73a09556f67)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/properties/stack_packages.json	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
@@ -632,6 +632,32 @@
             "doris-client"
           ]
         }
+      },
+      "NIGHTINGALE": {
+        "NIGHTINGALE_SERVER": {
+          "STACK-SELECT-PACKAGE": "nightingale",
+          "INSTALL": [
+            "nightingale"
+          ],
+          "PATCH": [
+            "nightingale"
+          ],
+          "STANDARD": [
+            "nightingale"
+          ]
+        },
+        "CATEGRAF": {
+          "STACK-SELECT-PACKAGE": "categraf",
+          "INSTALL": [
+            "categraf"
+          ],
+          "PATCH": [
+            "categraf"
+          ],
+          "STANDARD": [
+            "categraf"
+          ]
+        }
       }
     },
     "conf-select": {
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/configuration/categraf-env.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/configuration/categraf-env.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/configuration/categraf-env.xml
new file mode 100644
--- /dev/null	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/configuration/categraf-env.xml	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
@@ -0,0 +1,77 @@
+<?xml version="1.0"?>
+<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
+<!--
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+<configuration supports_final="true">
+    <property>
+        <name>categraf_user</name>
+        <display-name>Categraf User</display-name>
+        <value>root</value>
+        <property-type>USER</property-type>
+        <value-attributes>
+            <type>user</type>
+            <overridable>false</overridable>
+            <user-groups>
+                <property>
+                    <type>cluster-env</type>
+                    <name>user_group</name>
+                </property>
+                <property>
+                    <type>categraf-env</type>
+                    <name>categraf_group</name>
+                </property>
+            </user-groups>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>categraf_group</name>
+        <display-name>Categraf Group</display-name>
+        <value>root</value>
+        <property-type>GROUP</property-type>
+        <description>categraf group</description>
+        <value-attributes>
+            <type>user</type>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>categraf_log_dir</name>
+        <display-name>Categraf Log directory</display-name>
+        <value>/var/log/categraf</value>
+        <description>Categraf Log Dir</description>
+        <value-attributes>
+            <type>directory</type>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>categraf_pid_dir</name>
+        <display-name>Categraf PID directory</display-name>
+        <value>/var/run/categraf</value>
+        <description>Categraf Log Dir</description>
+        <value-attributes>
+            <type>directory</type>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+
+
+</configuration>
\ No newline at end of file
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/configuration/categraf.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/configuration/categraf.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/configuration/categraf.xml
new file mode 100644
--- /dev/null	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/configuration/categraf.xml	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
@@ -0,0 +1,298 @@
+<?xml version="1.0"?>
+<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
+<!--
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+<configuration supports_final="true">
+        <!-- [global] -->
+        <property>
+            <name>global.print_configs</name>
+            <value>false</value>
+            <description>[global] whether print configs</description>
+        </property>
+        <property require-input="false">
+            <name>global.hostname</name>
+            <value></value>
+            <value-attributes>
+                <empty-value-valid>true</empty-value-valid>
+                <overridable>false</overridable>
+            </value-attributes>
+            <description>[global] add label(agent_hostname) to series</description>
+        </property>
+        <property>
+            <name>global.omit_hostname</name>
+            <value>false</value>
+            <description>[global] will not add label(agent_hostname) if true</description>
+        </property>
+        <property>
+            <name>global.interval</name>
+            <value>15</value>
+            <description>[global] global collect interval, unit: second</description>
+        </property>
+        <property>
+            <name>global.providers</name>
+            <value>["local"]</value>
+            <description>[global] input provider settings; optional: local / http</description>
+        </property>
+        <property>
+            <name>global.concurrency</name>
+            <value>-1</value>
+            <description>[global] The concurrency setting controls the number of concurrent tasks</description>
+        </property>
+        <property>
+            <name>global.labels.region</name>
+            <value>shanghai</value>
+            <description>[global.labels] region</description>
+        </property>
+
+        <!-- [global.labels] -->
+        <!-- Uncomment and set values if needed -->
+        <!--
+
+        <property>
+            <name>global.labels.env</name>
+            <value>localhost</value>
+            <description>[global.labels] env</description>
+        </property>
+        <property>
+            <name>global.labels.sn</name>
+            <value>$sn</value>
+            <description>[global.labels] sn</description>
+        </property>
+        -->
+
+        <!-- [log] -->
+        <property>
+            <name>log.file_name</name>
+            <value>stdout</value>
+            <description>[log] file_name is the file to write logs to</description>
+        </property>
+        <property>
+            <name>log.max_size</name>
+            <value>100</value>
+            <description>[log] max_size is the maximum size in megabytes of the log file</description>
+        </property>
+        <property>
+            <name>log.max_age</name>
+            <value>1</value>
+            <description>[log] max_age is the maximum number of days to retain old log files</description>
+        </property>
+        <property>
+            <name>log.max_backups</name>
+            <value>1</value>
+            <description>[log] max_backups is the maximum number of old log files to retain</description>
+        </property>
+        <property>
+            <name>log.local_time</name>
+            <value>true</value>
+            <description>[log] local_time determines if the time used for formatting timestamps</description>
+        </property>
+        <property>
+            <name>log.compress</name>
+            <value>false</value>
+            <description>[log] Compress determines if the rotated log files should be compressed</description>
+        </property>
+
+        <!-- [writer_opt] -->
+        <property>
+            <name>writer_opt.batch</name>
+            <value>1000</value>
+            <description>[writer_opt] batch</description>
+        </property>
+        <property>
+            <name>writer_opt.chan_size</name>
+            <value>1000000</value>
+            <description>[writer_opt] chan_size</description>
+        </property>
+
+        <!-- [[writers]] -->
+        <property>
+            <name>writers.url</name>
+            <value>{{writer_url}}</value>
+            <description>[[writers]] url</description>
+        </property>
+        <property>
+            <name>writers.basic_auth_user</name>
+            <value>{{auth_user}}</value>
+            <description>[[writers]] Basic auth username</description>
+        </property>
+        <property>
+            <name>writers.basic_auth_pass</name>
+            <value>{{auth_pwd}}</value>
+            <description>[[writers]] Basic auth password</description>
+        </property>
+        <property>
+            <name>writers.timeout</name>
+            <value>5000</value>
+            <description>[[writers]] timeout settings, unit: ms</description>
+        </property>
+        <property>
+            <name>writers.dial_timeout</name>
+            <value>2500</value>
+            <description>[[writers]] dial_timeout settings, unit: ms</description>
+        </property>
+        <property>
+            <name>writers.max_idle_conns_per_host</name>
+            <value>100</value>
+            <description>[[writers]] max_idle_conns_per_host</description>
+        </property>
+
+        <!-- [http] -->
+        <property>
+            <name>http.enable</name>
+            <value>false</value>
+            <description>[http] enable</description>
+        </property>
+        <property>
+            <name>http.address</name>
+            <value>:9100</value>
+            <description>[http] address</description>
+        </property>
+        <property>
+            <name>http.print_access</name>
+            <value>false</value>
+            <description>[http] print_access</description>
+        </property>
+        <property>
+            <name>http.run_mode</name>
+            <value>release</value>
+            <description>[http] run_mode</description>
+        </property>
+        <property>
+            <name>http.ignore_hostname</name>
+            <value>false</value>
+            <description>[http] ignore_hostname</description>
+        </property>
+        <property require-input="false">
+            <name>http.agent_host_tag</name>
+            <value></value>
+            <value-attributes>
+                <empty-value-valid>true</empty-value-valid>
+                <overridable>false</overridable>
+            </value-attributes>
+            <description>[http] agent_host_tag</description>
+        </property>
+        <property>
+            <name>http.ignore_global_labels</name>
+            <value>false</value>
+            <description>[http] ignore_global_labels</description>
+        </property>
+
+        <!-- [ibex] -->
+        <property>
+            <name>ibex.enable</name>
+            <value>false</value>
+            <description>[ibex] enable</description>
+        </property>
+        <property>
+            <name>ibex.interval</name>
+            <value>1000ms</value>
+            <description>[ibex] ibex flush interval</description>
+        </property>
+        <property>
+            <name>ibex.servers</name>
+            <value>["127.0.0.1:20090"]</value>
+            <description>[ibex] n9e ibex server rpc address</description>
+        </property>
+        <property>
+            <name>ibex.meta_dir</name>
+            <value>./meta</value>
+            <description>[ibex] temp script dir</description>
+        </property>
+
+        <!-- [heartbeat] -->
+        <property>
+            <name>heartbeat.enable</name>
+            <value>true</value>
+            <description>[heartbeat] enable</description>
+        </property>
+        <property>
+            <name>heartbeat.url</name>
+            <value>{{heartbeat_url}}</value>
+            <description>[heartbeat] report os version cpu.util mem.util metadata</description>
+        </property>
+        <property>
+            <name>heartbeat.interval</name>
+            <value>10</value>
+            <description>[heartbeat] interval, unit: s</description>
+        </property>
+        <property require-input="false">
+            <name>heartbeat.basic_auth_user</name>
+            <value></value>
+            <value-attributes>
+                <empty-value-valid>true</empty-value-valid>
+                <overridable>false</overridable>
+            </value-attributes>
+            <description>[heartbeat] Basic auth username</description>
+        </property>
+        <property require-input="false">
+            <name>heartbeat.basic_auth_pass</name>
+            <value></value>
+            <value-attributes>
+                <empty-value-valid>true</empty-value-valid>
+                <overridable>false</overridable>
+            </value-attributes>
+            <description>[heartbeat] Basic auth password</description>
+        </property>
+        <property>
+            <name>heartbeat.timeout</name>
+            <value>5000</value>
+            <description>[heartbeat] timeout settings, unit: ms</description>
+        </property>
+        <property>
+            <name>heartbeat.dial_timeout</name>
+            <value>2500</value>
+            <description>[heartbeat] dial_timeout settings, unit: ms</description>
+        </property>
+        <property>
+            <name>heartbeat.max_idle_conns_per_host</name>
+            <value>100</value>
+            <description>[heartbeat] max_idle_conns_per_host</description>
+        </property>
+
+        <!-- [prometheus] -->
+        <property>
+            <name>prometheus.enable</name>
+            <value>false</value>
+            <description>[prometheus] enable</description>
+        </property>
+        <property>
+            <name>prometheus.scrape_config_file</name>
+            <value>/path/to/in_cluster_scrape.yaml</value>
+            <description>[prometheus] scrape_config_file</description>
+        </property>
+        <property>
+            <name>prometheus.log_level</name>
+            <value>info</value>
+            <description>[prometheus] log level, debug warn info error</description>
+        </property>
+        <!--
+        <property>
+            <name>prometheus.wal_storage_path</name>
+            <value>/path/to/storage</value>
+            <description>[prometheus] wal file storage path, default ./data-agent</description>
+        </property>
+        <property>
+            <name>prometheus.wal_min_duration</name>
+            <value>2</value>
+            <description>[prometheus] wal reserve time duration, default value is 2 hour</description>
+        </property>
+        -->
+
+</configuration>
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/configuration/nightingale-env.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/configuration/nightingale-env.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/configuration/nightingale-env.xml
new file mode 100644
--- /dev/null	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/configuration/nightingale-env.xml	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
@@ -0,0 +1,139 @@
+<?xml version="1.0"?>
+<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
+<!--
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+<configuration supports_final="true">
+    <property>
+        <name>nightingale_user</name>
+        <display-name>Cloudbeaver User</display-name>
+        <value>nightingale</value>
+        <property-type>USER</property-type>
+        <value-attributes>
+            <type>user</type>
+            <overridable>false</overridable>
+            <user-groups>
+                <property>
+                    <type>cluster-env</type>
+                    <name>user_group</name>
+                </property>
+                <property>
+                    <type>nightingale-env</type>
+                    <name>nightingale_group</name>
+                </property>
+            </user-groups>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>nightingale_group</name>
+        <display-name>Cloudbeaver Group</display-name>
+        <value>hadoop</value>
+        <property-type>GROUP</property-type>
+        <description>nightingale group</description>
+        <value-attributes>
+            <type>user</type>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>nightingale_log_dir</name>
+        <display-name>Cloudbeaver Log directory</display-name>
+        <value>/var/log/nightingale</value>
+        <description>Cloudbeaver Log Dir</description>
+        <value-attributes>
+            <type>directory</type>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>nightingale_pid_dir</name>
+        <display-name>Cloudbeaver PID directory</display-name>
+        <value>/var/run/nightingale</value>
+        <description>Cloudbeaver Log Dir</description>
+        <value-attributes>
+            <type>directory</type>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+
+
+
+    <property>
+        <name>nightingale.database.type</name>
+        <value>mysql</value>
+        <description>Nightingale DataBase Type Which Is Select</description>
+        <display-name>Nightingale Database Type</display-name>
+        <value-attributes>
+            <type>value-list</type>
+            <entries>
+                <entry>
+                    <value>mysql</value>
+                    <label>Mysql</label>
+                </entry>
+                <entry>
+                    <value>postgres</value>
+                    <label>Postgresql</label>
+                </entry>
+            </entries>
+            <selection-cardinality>1</selection-cardinality>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+
+    <property>
+        <name>nightingale.database.host</name>
+        <value></value>
+        <display-name>Nightingale Database Host</display-name>
+        <on-ambari-upgrade add="true"/>
+    </property>
+
+    <property>
+        <name>nightingale.database.port</name>
+        <value>3306</value>
+        <display-name>Nightingale Database Port</display-name>
+        <on-ambari-upgrade add="true"/>
+    </property>
+
+    <property>
+        <name>nightingale.database.name</name>
+        <value>n9e_4_v6</value>
+        <display-name>Nightingale Database name</display-name>
+        <on-ambari-upgrade add="true"/>
+    </property>
+
+    <property>
+        <name>nightingale.database.username</name>
+        <value>root</value>
+        <display-name>Nightingale Database Username</display-name>
+        <on-ambari-upgrade add="true"/>
+    </property>
+
+    <property>
+        <name>nightingale.database.password</name>
+        <value></value>
+        <display-name>Nightingale Database Password</display-name>
+        <property-type>PASSWORD</property-type>
+        <value-attributes>
+            <type>password</type>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+
+</configuration>
\ No newline at end of file
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/configuration/nightingale.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/configuration/nightingale.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/configuration/nightingale.xml
new file mode 100644
--- /dev/null	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/configuration/nightingale.xml	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
@@ -0,0 +1,352 @@
+<?xml version="1.0"?>
+<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
+<!--
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+<configuration supports_final="true">
+        <!-- [Global] -->
+        <property>
+            <name>Global.RunMode</name>
+            <value>release</value>
+            <description>[Global] RunMode</description>
+        </property>
+
+        <!-- [Log] -->
+        <property>
+            <name>Log.Dir</name>
+            <value>logs</value>
+            <description>[Log] log write dir</description>
+        </property>
+        <property>
+            <name>Log.Level</name>
+            <value>DEBUG</value>
+            <description>[Log] log level: DEBUG INFO WARNING ERROR</description>
+        </property>
+        <property>
+            <name>Log.Output</name>
+            <value>stdout</value>
+            <description>[Log] stdout, stderr, file</description>
+        </property>
+
+        <!-- [HTTP] -->
+        <property>
+            <name>HTTP.Host</name>
+            <value>0.0.0.0</value>
+            <description>[HTTP] http listening address</description>
+        </property>
+        <property>
+            <name>HTTP.Port</name>
+            <value>17000</value>
+            <description>[HTTP] http listening port</description>
+        </property>
+<!--        <property>-->
+<!--            <name>HTTP.CertFile</name>-->
+<!--            <value></value>-->
+<!--            <description>[HTTP] https cert file path</description>-->
+<!--        </property>-->
+<!--        <property>-->
+<!--            <name>HTTP.KeyFile</name>-->
+<!--            <value></value>-->
+<!--            <description>[HTTP] https key file path</description>-->
+<!--        </property>-->
+        <property>
+            <name>HTTP.PrintAccessLog</name>
+            <value>false</value>
+            <description>[HTTP] whether print access log</description>
+        </property>
+        <property>
+            <name>HTTP.PProf</name>
+            <value>true</value>
+            <description>[HTTP] whether enable pprof</description>
+        </property>
+        <property>
+            <name>HTTP.ExposeMetrics</name>
+            <value>true</value>
+            <description>[HTTP] expose prometheus /metrics?</description>
+        </property>
+        <property>
+            <name>HTTP.ShutdownTimeout</name>
+            <value>30</value>
+            <description>[HTTP] http graceful shutdown timeout, unit: s</description>
+        </property>
+        <property>
+            <name>HTTP.MaxContentLength</name>
+            <value>67108864</value>
+            <description>[HTTP] max content length: 64M</description>
+        </property>
+        <property>
+            <name>HTTP.ReadTimeout</name>
+            <value>20</value>
+            <description>[HTTP] http server read timeout, unit: s</description>
+        </property>
+        <property>
+            <name>HTTP.WriteTimeout</name>
+            <value>40</value>
+            <description>[HTTP] http server write timeout, unit: s</description>
+        </property>
+        <property>
+            <name>HTTP.IdleTimeout</name>
+            <value>120</value>
+            <description>[HTTP] http server idle timeout, unit: s</description>
+        </property>
+
+        <!-- [HTTP.ShowCaptcha] -->
+        <property>
+            <name>HTTP.ShowCaptcha.Enable</name>
+            <value>false</value>
+            <description>[HTTP.ShowCaptcha] Enable</description>
+        </property>
+
+        <!-- [HTTP.APIForAgent] -->
+        <property>
+            <name>HTTP.APIForAgent.Enable</name>
+            <value>true</value>
+            <description>[HTTP.APIForAgent] Enable</description>
+        </property>
+
+        <!-- [HTTP.APIForService] -->
+        <property>
+            <name>HTTP.APIForService.Enable</name>
+            <value>true</value>
+            <description>[HTTP.APIForService] Enable</description>
+        </property>
+        <property>
+            <name>HTTP.APIForService.BasicAuth.user001</name>
+            <value>ccc26da7b9aba533cbb263a36c07dcc5</value>
+            <description>[HTTP.APIForService.BasicAuth] user001</description>
+        </property>
+
+        <!-- [HTTP.JWTAuth] -->
+        <property>
+            <name>HTTP.JWTAuth.AccessExpired</name>
+            <value>1500</value>
+            <description>[HTTP.JWTAuth] AccessExpired, unit: min</description>
+        </property>
+        <property>
+            <name>HTTP.JWTAuth.RefreshExpired</name>
+            <value>10080</value>
+            <description>[HTTP.JWTAuth] RefreshExpired, unit: min</description>
+        </property>
+        <property>
+            <name>HTTP.JWTAuth.RedisKeyPrefix</name>
+            <value>/jwt/</value>
+            <description>[HTTP.JWTAuth] RedisKeyPrefix</description>
+        </property>
+
+        <!-- [HTTP.ProxyAuth] -->
+        <property>
+            <name>HTTP.ProxyAuth.Enable</name>
+            <value>false</value>
+            <description>[HTTP.ProxyAuth] Enable</description>
+        </property>
+        <property>
+            <name>HTTP.ProxyAuth.HeaderUserNameKey</name>
+            <value>X-User-Name</value>
+            <description>[HTTP.ProxyAuth] username key in http proxy header</description>
+        </property>
+        <property>
+            <name>HTTP.ProxyAuth.DefaultRoles</name>
+            <value>['Standard']</value>
+            <description>[HTTP.ProxyAuth] DefaultRoles</description>
+        </property>
+
+        <!-- [HTTP.RSA] -->
+        <property>
+            <name>HTTP.RSA.OpenRSA</name>
+            <value>false</value>
+            <description>[HTTP.RSA] OpenRSA</description>
+        </property>
+
+        <!-- [DB] -->
+        <property>
+            <name>DB.DSN</name>
+            <value>{{ nightingale_database_url}}</value>
+            <description>[DB] DSN</description>
+        </property>
+        <property>
+            <name>DB.Debug</name>
+            <value>false</value>
+            <description>[DB] enable debug mode or not</description>
+        </property>
+        <property>
+            <name>DB.DBType</name>
+            <value>{{ database_type }}</value>
+            <description>[DB] DBType</description>
+        </property>
+        <property>
+            <name>DB.MaxLifetime</name>
+            <value>7200</value>
+            <description>[DB] MaxLifetime, unit: s</description>
+        </property>
+        <property>
+            <name>DB.MaxOpenConns</name>
+            <value>150</value>
+            <description>[DB] MaxOpenConns</description>
+        </property>
+        <property>
+            <name>DB.MaxIdleConns</name>
+            <value>50</value>
+            <description>[DB] MaxIdleConns</description>
+        </property>
+
+        <!-- [Redis] -->
+        <property>
+            <name>Redis.Address</name>
+            <value></value>
+            <description>[Redis] Address 127.0.0.1:6379</description>
+        </property>
+        <property>
+            <name>Redis.RedisType</name>
+            <value>standalone</value>
+            <description>[Redis] RedisType</description>
+        </property>
+
+        <!-- [Alert] -->
+        <!-- [Alert.Heartbeat] -->
+<!--        <property>
+            <name>Alert.Heartbeat.IP</name>
+            <value></value>
+            <description>[Alert.Heartbeat] IP</description>
+        </property>-->
+        <property>
+            <name>Alert.Heartbeat.Interval</name>
+            <value>1000</value>
+            <description>[Alert.Heartbeat] Interval, unit ms</description>
+        </property>
+        <property>
+            <name>Alert.Heartbeat.EngineName</name>
+            <value>default</value>
+            <description>[Alert.Heartbeat] EngineName</description>
+        </property>
+
+        <!-- [Center] -->
+        <property>
+            <name>Center.MetricsYamlFile</name>
+            <value>./etc/metrics.yaml</value>
+            <description>[Center] MetricsYamlFile</description>
+        </property>
+        <property>
+            <name>Center.I18NHeaderKey</name>
+            <value>X-Language</value>
+            <description>[Center] I18NHeaderKey</description>
+        </property>
+
+        <!-- [Center.AnonymousAccess] -->
+        <property>
+            <name>Center.AnonymousAccess.PromQuerier</name>
+            <value>true</value>
+            <description>[Center.AnonymousAccess] PromQuerier</description>
+        </property>
+        <property>
+            <name>Center.AnonymousAccess.AlertDetail</name>
+            <value>true</value>
+            <description>[Center.AnonymousAccess] AlertDetail</description>
+        </property>
+
+        <!-- [Pushgw] -->
+        <property>
+            <name>Pushgw.LabelRewrite</name>
+            <value>true</value>
+            <description>[Pushgw] LabelRewrite</description>
+        </property>
+        <property>
+            <name>Pushgw.ForceUseServerTS</name>
+            <value>true</value>
+            <description>[Pushgw] ForceUseServerTS</description>
+        </property>
+
+        <!-- [[Pushgw.Writers]] -->
+        <property>
+            <name>Pushgw.Writers.Url</name>
+            <value>{{writer_url}}</value>
+            <description>[[Pushgw.Writers]] Url</description>
+        </property>
+        <property>
+            <name>Pushgw.Writers.BasicAuthUser</name>
+            <value>{{auth_user}}</value>
+            <description>[[Pushgw.Writers]] BasicAuthUser</description>
+        </property>
+        <property>
+            <name>Pushgw.Writers.BasicAuthPass</name>
+            <value>{{auth_pwd}}</value>
+            <description>[[Pushgw.Writers]] BasicAuthPass</description>
+        </property>
+        <property>
+            <name>Pushgw.Writers.Headers</name>
+            <value>['X-From', 'n9e']</value>
+            <description>[[Pushgw.Writers]] Headers</description>
+        </property>
+        <property>
+            <name>Pushgw.Writers.Timeout</name>
+            <value>10000</value>
+            <description>[[Pushgw.Writers]] Timeout, unit: ms</description>
+        </property>
+        <property>
+            <name>Pushgw.Writers.DialTimeout</name>
+            <value>3000</value>
+            <description>[[Pushgw.Writers]] DialTimeout, unit: ms</description>
+        </property>
+        <property>
+            <name>Pushgw.Writers.TLSHandshakeTimeout</name>
+            <value>30000</value>
+            <description>[[Pushgw.Writers]] TLSHandshakeTimeout, unit: ms</description>
+        </property>
+        <property>
+            <name>Pushgw.Writers.ExpectContinueTimeout</name>
+            <value>1000</value>
+            <description>[[Pushgw.Writers]] ExpectContinueTimeout, unit: ms</description>
+        </property>
+        <property>
+            <name>Pushgw.Writers.IdleConnTimeout</name>
+            <value>90000</value>
+            <description>[[Pushgw.Writers]] IdleConnTimeout, unit: ms</description>
+        </property>
+        <property>
+            <name>Pushgw.Writers.KeepAlive</name>
+            <value>30000</value>
+            <description>[[Pushgw.Writers]] KeepAlive, unit: ms</description>
+        </property>
+        <property>
+            <name>Pushgw.Writers.MaxConnsPerHost</name>
+            <value>0</value>
+            <description>[[Pushgw.Writers]] MaxConnsPerHost</description>
+        </property>
+        <property>
+            <name>Pushgw.Writers.MaxIdleConns</name>
+            <value>100</value>
+            <description>[[Pushgw.Writers]] MaxIdleConns</description>
+        </property>
+        <property>
+            <name>Pushgw.Writers.MaxIdleConnsPerHost</name>
+            <value>100</value>
+            <description>[[Pushgw.Writers]] MaxIdleConnsPerHost</description>
+        </property>
+
+        <!-- [Ibex] -->
+        <property>
+            <name>Ibex.Enable</name>
+            <value>false</value>
+            <description>[Ibex] Enable</description>
+        </property>
+        <property>
+            <name>Ibex.RPCListen</name>
+            <value>0.0.0.0:20090</value>
+            <description>[Ibex] RPCListen</description>
+        </property>
+</configuration>
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/metainfo.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/metainfo.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/metainfo.xml
new file mode 100644
--- /dev/null	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/metainfo.xml	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
@@ -0,0 +1,100 @@
+<?xml version="1.0"?>
+<!--Licensed to the Apache Software Foundation (ASF) under one
+* or more contributor license agreements.  See the NOTICE file
+* distributed with this work for additional information
+* regarding copyright ownership.  The ASF licenses this file
+* to you under the Apache License, Version 2.0 (the
+* "License"); you may not use this file except in compliance
+* with the License.  You may obtain a copy of the License at
+*
+*     http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+-->
+<metainfo>
+  <schemaVersion>2.0</schemaVersion>
+  <services>
+    <service>
+      <name>NIGHTINGALE</name>
+      <displayName>Nightingale</displayName>
+      <comment>Component NIGHTINGALE Integrated By JaneTTR . For commercial use, please contact mail: 3832514048@qq.com</comment>
+      <version>7.3.4</version>
+      <components>
+        <component>
+          <name>NIGHTINGALE_SERVER</name>
+          <displayName>Nightingale Server</displayName>
+          <category>MASTER</category>
+          <cardinality>1+</cardinality>
+          <versionAdvertised>true</versionAdvertised>
+          <commandScript>
+            <script>scripts/server.py</script>
+            <scriptType>PYTHON</scriptType>
+            <timeout>600</timeout>
+          </commandScript>
+          <configuration-dependencies>
+            <config-type>nightingale-env</config-type>
+            <config-type>nightingale</config-type>
+          </configuration-dependencies>
+          <logs>
+            <log>
+              <logId>nightingale</logId>
+              <primary>true</primary>
+            </log>
+          </logs>
+        </component>
+
+        <component>
+          <name>CATEGRAF</name>
+          <displayName>Categraf</displayName>
+          <category>SLAVE</category>
+          <cardinality>ALL</cardinality>
+          <versionAdvertised>true</versionAdvertised>
+          <commandScript>
+            <script>scripts/categraf_client.py</script>
+            <scriptType>PYTHON</scriptType>
+          </commandScript>
+          <configuration-dependencies>
+            <config-type>categraf</config-type>
+            <config-type>categraf-env</config-type>
+          </configuration-dependencies>
+        </component>
+      </components>
+
+
+      <commandScript>
+        <script>scripts/service_check.py</script>
+        <scriptType>PYTHON</scriptType>
+        <timeout>300</timeout>
+      </commandScript>
+
+      <restartRequiredAfterChange>true</restartRequiredAfterChange>
+
+      <osSpecifics>
+        <osSpecific>
+          <osFamily>any</osFamily>
+          <packages>
+            <package>
+              <name>nightingale_${stack_version}</name>
+            </package>
+            <package>
+              <name>categraf_${stack_version}</name>
+            </package>
+          </packages>
+        </osSpecific>
+      </osSpecifics>
+
+      <quickLinksConfigurations>
+        <quickLinksConfiguration>
+          <fileName>quicklinks.json</fileName>
+          <default>true</default>
+        </quickLinksConfiguration>
+      </quickLinksConfigurations>
+
+    </service>
+  </services>
+</metainfo>
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/categraf.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/categraf.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/categraf.py
new file mode 100644
--- /dev/null	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/categraf.py	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
@@ -0,0 +1,64 @@
+#!/usr/bin/env python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+
+import os
+import sys
+from resource_management.libraries.script.script import Script
+from resource_management.libraries.resources.xml_config import XmlConfig
+from resource_management.libraries.resources.template_config import TemplateConfig
+from resource_management.libraries.functions.format import format
+from resource_management.libraries.functions import lzo_utils
+from resource_management.libraries.functions.default import default
+from resource_management.libraries.functions.generate_logfeeder_input_config import (
+    generate_logfeeder_input_config,
+)
+from resource_management.core.source import Template, InlineTemplate
+from resource_management.core.resources import Package
+from resource_management.core.resources.service import ServiceConfig
+from resource_management.core.resources.system import Directory, Execute, File
+from ambari_commons.os_family_impl import OsFamilyFuncImpl, OsFamilyImpl
+from ambari_commons import OSConst
+from resource_management.libraries.functions.constants import StackFeature
+from resource_management.libraries.functions.stack_features import check_stack_feature
+import json
+from utils import *
+
+
+# name is 'master' or 'regionserver' or 'queryserver' or 'client'
+@OsFamilyFuncImpl(os_family=OsFamilyImpl.DEFAULT)
+def categraf(name=None):
+    import params
+    import status_params
+
+    Directory(
+        [params.categraf_pid_dir, params.categraf_log_dir],
+        owner=params.categraf_user,
+        group=params.categraf_group,
+        mode=0o775,
+        create_parents=True,
+    )
+
+    File(
+        os.path.join(params.categraf_conf_dir, "config.toml"),
+        owner=params.categraf_user,
+        group=params.categraf_group,
+        content=dict_to_toml_string(params.categraf_conf, params.array_headers),
+        mode=0o644,
+    )
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/categraf_client.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/categraf_client.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/categraf_client.py
new file mode 100644
--- /dev/null	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/categraf_client.py	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
@@ -0,0 +1,93 @@
+#!/usr/bin/python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+
+import os
+from resource_management import *
+from resource_management.core import sudo
+from resource_management.libraries.functions import check_process_status
+import time
+from categraf import categraf
+from categraf_service import categraf_service
+
+
+class CategrafClient(Script):
+    def install(self, env):
+        self.install_packages(env)
+
+    def configure(self, env, upgrade_type=None, config_dir=None):
+        import params
+
+        env.set_params(params)
+        self.initialize(env)
+        categraf(name="server")
+
+    def initialize(self, env):
+        import params
+
+        env.set_params(params)
+        categraf_setup_marker = os.path.join(params.categraf_conf_dir, "categraf_setup")
+        cmd_install = "{}/categraf --install".format(params.categraf_home)
+        if not os.path.exists(categraf_setup_marker):
+            try:
+                Execute(cmd_install)
+                Logger.info("categraf init finished, cmd: {}".format(cmd_install))
+                File(
+                    categraf_setup_marker,
+                    owner=params.categraf_user,
+                    group=params.categraf_group,
+                    mode=0o640,
+                )
+            except Exception as e:
+                Logger.exception(
+                    "There was an exception when  ALTER SYSTEM ADD FOLLOWER: " + str(e)
+                )
+
+    def start(self, env, upgrade_type=None):
+        import params
+
+        env.set_params(params)
+        self.configure(env)
+        categraf_service("server", action="start")
+
+    def stop(self, env, upgrade_type=None):
+        import params
+
+        env.set_params(params)
+        categraf_service("server", action="stop")
+
+    def status(self, env):
+        import status_params
+
+        env.set_params(status_params)
+        check_process_status(status_params.categraf_pid_file)
+
+    def get_user(self):
+        import params
+
+        return params.categraf_user
+
+    def get_pid_files(self):
+        import params
+
+        return [params.categraf_pid_file]
+
+
+if __name__ == "__main__":
+    CategrafClient().execute()
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/categraf_service.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/categraf_service.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/categraf_service.py
new file mode 100644
--- /dev/null	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/categraf_service.py	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
@@ -0,0 +1,102 @@
+#!/usr/bin/env python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+
+# Python Imports
+import os
+import time
+
+# Ambari Commons & Resource Management Imports
+from ambari_commons.constants import UPGRADE_TYPE_ROLLING
+from resource_management.core import shell
+from resource_management.core import utils
+from resource_management.core.exceptions import ComponentIsNotRunning, Fail
+from resource_management.core.logger import Logger
+from resource_management.core.resources.system import File, Execute
+from resource_management.core.shell import as_user, quote_bash_args
+from resource_management.libraries.functions import get_user_call_output
+from resource_management.libraries.functions import StackFeature
+from resource_management.libraries.functions.check_process_status import (
+    check_process_status,
+)
+from resource_management.libraries.functions.decorator import retry
+from resource_management.libraries.functions.format import format
+from resource_management.libraries.functions.show_logs import show_logs
+from resource_management.libraries.functions.stack_features import check_stack_feature
+
+
+def categraf_service(name, action="start", upgrade_type=None):
+    import params
+    import status_params
+
+    wait_time = 5
+    if name == "server":
+        pid_file = params.categraf_pid_file
+        cmd_start = "cd {0};nohup {0}/categraf --start > {1}/categraf.log 2>&1 < /dev/null &".format(
+            params.categraf_home, params.categraf_log_dir
+        )
+        cmd_stop = "cd {0};{0}/categraf --stop".format(params.categraf_home)
+    pid = get_user_call_output.get_user_call_output(
+        format("cat {pid_file}"), user=params.categraf_user, is_checked_call=False
+    )[1]
+    process_id_exists_command = format(
+        "ls {pid_file} >/dev/null 2>&1 && ps -p {pid} >/dev/null 2>&1"
+    )
+
+    if action == "start":
+        daemon_cmd = cmd_start
+
+        try:
+            Execute(
+                daemon_cmd, user=params.categraf_user, not_if=process_id_exists_command
+            )
+            Execute(params.categraf_pid_cmd, user=params.categraf_user)
+        except:
+            show_logs(params.categraf_log_dir, user=params.categraf_user)
+            raise
+
+    elif action == "stop":
+        Logger.info(format("stop categraf server, pid : {pid} "))
+        daemon_kill_cmd = format("{sudo} kill {pid}")
+        daemon_hard_kill_cmd = format("{sudo} kill -9 {pid}")
+
+        # kill cmd
+        Execute(
+            cmd_stop,
+            user=params.categraf_user,
+            not_if=format("! ({process_id_exists_command})"),
+        )
+
+        # kill -9 cmd
+        Execute(
+            daemon_hard_kill_cmd,
+            not_if=format(
+                "! ({process_id_exists_command}) || ( sleep {wait_time} && ! ({process_id_exists_command}) )"
+            ),
+            ignore_failures=True,
+        )
+
+        try:
+            # check if stopped the process, else fail the task
+            Execute(format("! ({process_id_exists_command})"), tries=20, try_sleep=3)
+        except:
+            show_logs(params.categraf_log_dir, params.categraf_user)
+            raise
+
+        File(pid_file, action="delete")
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/nightingale.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/nightingale.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/nightingale.py
new file mode 100644
--- /dev/null	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/nightingale.py	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
@@ -0,0 +1,64 @@
+#!/usr/bin/env python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+
+import os
+import sys
+from resource_management.libraries.script.script import Script
+from resource_management.libraries.resources.xml_config import XmlConfig
+from resource_management.libraries.resources.template_config import TemplateConfig
+from resource_management.libraries.functions.format import format
+from resource_management.libraries.functions import lzo_utils
+from resource_management.libraries.functions.default import default
+from resource_management.libraries.functions.generate_logfeeder_input_config import (
+    generate_logfeeder_input_config,
+)
+from resource_management.core.source import Template, InlineTemplate
+from resource_management.core.resources import Package
+from resource_management.core.resources.service import ServiceConfig
+from resource_management.core.resources.system import Directory, Execute, File
+from ambari_commons.os_family_impl import OsFamilyFuncImpl, OsFamilyImpl
+from ambari_commons import OSConst
+from resource_management.libraries.functions.constants import StackFeature
+from resource_management.libraries.functions.stack_features import check_stack_feature
+import json
+from utils import *
+
+
+# name is 'master' or 'regionserver' or 'queryserver' or 'client'
+@OsFamilyFuncImpl(os_family=OsFamilyImpl.DEFAULT)
+def nightingale(name=None):
+    import params
+    import status_params
+
+    Directory(
+        [params.nightingale_pid_dir, params.nightingale_log_dir],
+        owner=params.nightingale_user,
+        group=params.nightingale_group,
+        mode=0o775,
+        create_parents=True,
+    )
+
+    File(
+        os.path.join(params.nightingale_conf_dir, "config.toml"),
+        owner=params.nightingale_user,
+        group=params.nightingale_group,
+        content=dict_to_toml_string(params.nightingale_conf, params.array_headers),
+        mode=0o644,
+    )
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/nightingale_service.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/nightingale_service.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/nightingale_service.py
new file mode 100644
--- /dev/null	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/nightingale_service.py	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
@@ -0,0 +1,101 @@
+#!/usr/bin/env python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+
+# Python Imports
+import os
+import time
+
+# Ambari Commons & Resource Management Imports
+from ambari_commons.constants import UPGRADE_TYPE_ROLLING
+from resource_management.core import shell
+from resource_management.core import utils
+from resource_management.core.exceptions import ComponentIsNotRunning, Fail
+from resource_management.core.logger import Logger
+from resource_management.core.resources.system import File, Execute
+from resource_management.core.shell import as_user, quote_bash_args
+from resource_management.libraries.functions import get_user_call_output
+from resource_management.libraries.functions import StackFeature
+from resource_management.libraries.functions.check_process_status import (
+    check_process_status,
+)
+from resource_management.libraries.functions.decorator import retry
+from resource_management.libraries.functions.format import format
+from resource_management.libraries.functions.show_logs import show_logs
+from resource_management.libraries.functions.stack_features import check_stack_feature
+
+
+def nightingale_service(name, action="start", upgrade_type=None):
+    import params
+    import status_params
+
+    wait_time = 5
+    if name == "server":
+        pid_file = params.nightingale_pid_file
+        cmd_start = "cd {0};nohup ./n9e > {1}/nightingale.log 2>&1 < /dev/null &".format(
+            params.nightingale_home, params.nightingale_log_dir
+        )
+
+    pid = get_user_call_output.get_user_call_output(
+        format("cat {pid_file}"), user=params.nightingale_user, is_checked_call=False
+    )[1]
+    process_id_exists_command = format(
+        "ls {pid_file} >/dev/null 2>&1 && ps -p {pid} >/dev/null 2>&1"
+    )
+
+    if action == "start":
+        daemon_cmd = cmd_start
+
+        try:
+            Execute(
+                daemon_cmd,
+                user=params.nightingale_user,
+                path=params.nightingale_home,
+                not_if=process_id_exists_command,
+            )
+            Execute(params.nightingale_pid_cmd, user=params.nightingale_user)
+        except:
+            show_logs(params.spark_log_dir, user=params.spark_user)
+            raise
+
+    elif action == "stop":
+        Logger.info(format("stop nightingale server, pid : {pid} "))
+        daemon_kill_cmd = format("{sudo} kill {pid}")
+        daemon_hard_kill_cmd = format("{sudo} kill -9 {pid}")
+
+        # kill cmd
+        Execute(daemon_kill_cmd, not_if=format("! ({process_id_exists_command})"))
+
+        # kill -9 cmd
+        Execute(
+            daemon_hard_kill_cmd,
+            not_if=format(
+                "! ({process_id_exists_command}) || ( sleep {wait_time} && ! ({process_id_exists_command}) )"
+            ),
+            ignore_failures=True,
+        )
+
+        try:
+            # check if stopped the process, else fail the task
+            Execute(format("! ({process_id_exists_command})"), tries=20, try_sleep=3)
+        except:
+            show_logs(params.nightingale_log_dir, params.nightingale_user)
+            raise
+
+        File(pid_file, action="delete")
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/params.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/params.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/params.py
new file mode 100644
--- /dev/null	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/params.py	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
@@ -0,0 +1,238 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+
+import socket
+
+from ambari_commons.constants import AMBARI_SUDO_BINARY
+from resource_management import *
+from resource_management.libraries.functions.constants import StackFeature
+from resource_management.libraries.functions.version import (
+    format_stack_version,
+    get_major_version,
+)
+from resource_management.libraries.functions.copy_tarball import (
+    get_sysprep_skip_copy_tarballs_hdfs,
+)
+from resource_management.libraries.functions.format import format
+from resource_management.libraries.functions.default import default
+from resource_management.libraries.functions import get_kinit_path
+from resource_management.libraries.script.script import Script
+from resource_management.libraries.functions.copy_tarball import get_current_version
+
+config = Script.get_config()
+
+java_home = config["ambariLevelParams"]["java_home"]
+ambari_java_home = default("/ambariLevelParams/ambari_java_home", None)
+# not supporting 32 bit jdk.
+
+stack_root = Script.get_stack_root()
+
+config = Script.get_config()
+tmp_dir = Script.get_tmp_dir()
+sudo = AMBARI_SUDO_BINARY
+fqdn = socket.getfqdn().lower()
+
+retryAble = default("/commandParams/command_retry_enabled", False)
+
+cluster_name = config["clusterName"]
+stack_name = default("/clusterLevelParams/stack_name", None)
+stack_root = Script.get_stack_root()
+# 3.2
+stack_version_unformatted = config["clusterLevelParams"]["stack_version"]
+# 3.2.0.0
+stack_version_formatted = format_stack_version(stack_version_unformatted)
+# 3.2
+major_stack_version = get_major_version(stack_version_formatted)
+
+# 3.2.1.0-001
+effective_version = get_current_version(service="GLUTEN")
+
+sysprep_skip_copy_tarballs_hdfs = get_sysprep_skip_copy_tarballs_hdfs()
+
+# New Cluster Stack Version that is defined during the RESTART of a Stack Upgrade
+version = default("/commandParams/version", None)
+user_group = config["configurations"]["cluster-env"]["user_group"]
+
+############### nightingale ####################
+component_directory = "nightingale"
+nightingale_home = format("{stack_root}/current/{component_directory}")
+nightingale_conf_dir = format("{stack_root}/current/{component_directory}/etc")
+
+nightingale_conf = config["configurations"]["nightingale"]
+
+nightingale_group = config["configurations"]["nightingale-env"]["nightingale_group"]
+nightingale_user = config["configurations"]["nightingale-env"]["nightingale_user"]
+
+nightingale_log_dir = config["configurations"]["nightingale-env"]["nightingale_log_dir"]
+nightingale_pid_dir = config["configurations"]["nightingale-env"]["nightingale_pid_dir"]
+nightingale_pid_file = "{}/nightingale.pid".format(nightingale_pid_dir)
+
+nightingale_pid_cmd = (
+        "echo `ps -A -o pid,command | grep -v  grep | grep n9e | awk '{print $1; exit}'`> "
+        + nightingale_pid_file
+)
+
+nightingale_test_cmd = (
+    "ps -A -o pid,command | grep -v  grep | grep n9e | awk '{print $1; exit}'"
+)
+# list for array section headers in toml config
+array_headers = ["Pushgw.Writers", "writers"]
+
+database_type = config["configurations"]["nightingale-env"]["nightingale.database.type"].lower()
+database_password = config["configurations"]["nightingale-env"][
+    "nightingale.database.password"
+]
+database_name = config["configurations"]["nightingale-env"]["nightingale.database.name"]
+database_host = config["configurations"]["nightingale-env"]["nightingale.database.host"]
+database_port = config["configurations"]["nightingale-env"]["nightingale.database.port"]
+database_username = config["configurations"]["nightingale-env"][
+    "nightingale.database.username"
+]
+
+nightingale_init_sql_path = "{}/n9e.sql".format(nightingale_home)
+
+nightingale_port = nightingale_conf["HTTP.Port"]
+
+# postgres: host=%s port=%s user=%s dbname=%s password=%s sslmode=%s
+# postgres: DSN="host=127.0.0.1 port=5432 user=root dbname=n9e_v6 password=1234 sslmode=disable"
+# sqlite: DSN="/path/to/filename.db"
+# DSN = "root:1234@tcp(127.0.0.1:3306)/n9e_v6?charset=utf8mb4&parseTime=True&loc=Local&allowNativePasswords=true"
+
+
+if "mysql" == database_type:
+    sql_client = "mysql"
+    nightingale_database_url = "{}:{}@tcp({}:{})/{}?charset=utf8mb4&parseTime=True&loc=Local&allowNativePasswords=true".format(
+        database_username, database_password, database_host, database_port, database_name
+    )
+
+    # 检查并创建数据库的命令
+    create_database_sql = "CREATE DATABASE IF NOT EXISTS {} CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci; use {};".format(
+        database_name, database_name)
+    check_and_create_cmd = "{} -h {} -P {} -u {} -p'{}' -e \"{}\"".format(
+        sql_client,
+        database_host,
+        database_port,
+        database_username,
+        database_password,
+        create_database_sql
+    )
+
+    # 导入 SQL 文件的命令
+    import_sql_cmd = "{} -h {} -P {} -u {} -p'{}' {} < {}".format(
+        sql_client,
+        database_host,
+        database_port,
+        database_username,
+        database_password,
+        database_name,
+        nightingale_init_sql_path
+    )
+
+    # 拼接为一个最终命令
+    init_sql = "{} && {}".format(check_and_create_cmd, import_sql_cmd)
+
+elif "psql" == database_type:
+    sql_client = "psql"
+    nightingale_database_url = "host={} port={} user={} dbname={} password={} sslmode=disable".format(
+        database_host, database_port, database_username, database_name, database_password
+    )
+
+    # 检查并创建数据库的 SQL
+    create_database_sql = (
+        "DO $$ "
+        "BEGIN "
+        "   IF NOT EXISTS (SELECT 1 FROM pg_database WHERE datname = '{database_name}') THEN "
+        "       EXECUTE 'CREATE DATABASE {database_name}'; "
+        "   END IF; "
+        "END $$;"
+    ).format(database_name=database_name)
+
+    # 检查并创建数据库的命令（连接到 `postgres` 数据库）
+    check_and_create_cmd = 'PGPASSWORD={} {} -h {} -p {} -U {} -d postgres -c "{}"'.format(
+        database_password,
+        sql_client,
+        database_host,
+        database_port,
+        database_username,
+        create_database_sql
+    )
+
+    # 导入 SQL 文件的命令（连接到目标数据库）
+    import_sql_cmd = 'PGPASSWORD={} {} -h {} -p {} -U {} -d {} < {}'.format(
+        database_password,
+        sql_client,
+        database_host,
+        database_port,
+        database_username,
+        database_name,
+        nightingale_init_sql_path
+    )
+
+    # 拼接为一个最终命令
+    init_sql = "{} && {}".format(check_and_create_cmd, import_sql_cmd)
+
+############### categraf ####################
+categraf_component_directory = "categraf"
+categraf_home = format("{stack_root}/current/{categraf_component_directory}")
+categraf_conf_dir = format("{stack_root}/current/{categraf_component_directory}/conf")
+
+categraf_conf = config["configurations"]["categraf"]
+
+categraf_group = config["configurations"]["categraf-env"]["categraf_group"]
+categraf_user = config["configurations"]["categraf-env"]["categraf_user"]
+
+categraf_log_dir = config["configurations"]["categraf-env"]["categraf_log_dir"]
+categraf_pid_dir = config["configurations"]["categraf-env"]["categraf_pid_dir"]
+categraf_pid_file = "{}/categraf.pid".format(categraf_pid_dir)
+
+categraf_pid_cmd = (
+        "echo `ps -A -o pid,command | grep -v  grep | grep categraf | awk '{print $1; exit}'`> "
+        + categraf_pid_file
+)
+
+categraf_test_cmd = (
+    "ps -A -o pid,command | grep -v  grep | grep categraf | awk '{print $1; exit}'"
+)
+
+nightingale_server_hosts = config["clusterHostInfo"]["nightingale_server_hosts"]
+nightingale_server_host0 = nightingale_server_hosts[0]
+heartbeat_url = "http://{}:{}/v1/n9e/heartbeat".format(nightingale_server_host0, nightingale_port)
+
+############### prometheus ####################
+if "victoriametrics" in config["configurations"]:
+    victoriametrics_server_host = config["clusterHostInfo"][
+        "victoriametrics_server_hosts"
+    ][0]
+    victoriametrics_server_port = config["configurations"]["victoriametrics"]["port"]
+    writer_url = "http://{}:{}/api/v1/write".format(victoriametrics_server_host, victoriametrics_server_port)
+    auth_user = config["configurations"]["victoriametrics"]["http_user_name"]
+    auth_pwd = config["configurations"]["victoriametrics"]["http_user_password"]
+else:
+    writer_url = ""
+    auth_user = ""
+    auth_pwd = ""
+
+hostname = config["agentLevelParams"]["hostname"]
+stack_name = default("/hostLevelParams/stack_name", None)
+stack_version = config["hostLevelParams"]["stack_version"]
+host_name = config["agentLevelParams"]["hostname"]
+smoke_user = config["configurations"]["cluster-env"]["smokeuser"]
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/server.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/server.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/server.py
new file mode 100644
--- /dev/null	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/server.py	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
@@ -0,0 +1,95 @@
+#!/usr/bin/python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+
+import os
+from resource_management import *
+from resource_management.core import sudo
+from resource_management.libraries.functions import check_process_status
+import time
+from nightingale import nightingale
+from nightingale_service import nightingale_service
+
+
+class NightingaleServer(Script):
+    def install(self, env):
+        self.install_packages(env)
+
+    def initialize(self, env):
+        import params
+
+        env.set_params(params)
+        nightingale_setup_marker = os.path.join(
+            params.nightingale_conf_dir, "nightingale_setup"
+        )
+        if not os.path.exists(nightingale_setup_marker):
+            try:
+                Execute(params.init_sql, user=params.nightingale_user)
+                Logger.info(format("nightingale init finished, cmd: {params.init_sql}"))
+
+                File(
+                    nightingale_setup_marker,
+                    owner=params.nightingale_user,
+                    group=params.nightingale_group,
+                    mode=0o640,
+                )
+            except Exception as e:
+                Logger.exception(
+                    "There was an exception when  ALTER SYSTEM ADD FOLLOWER: " + str(e)
+                )
+
+    def configure(self, env, upgrade_type=None, config_dir=None):
+        import params
+
+        env.set_params(params)
+        self.initialize(env)
+        nightingale(name="server")
+
+    def start(self, env, upgrade_type=None):
+        import params
+
+        env.set_params(params)
+        self.configure(env)
+        nightingale_service("server", action="start")
+
+    def stop(self, env, upgrade_type=None):
+        import params
+
+        env.set_params(params)
+        nightingale_service("server", action="stop")
+
+    def status(self, env):
+        import status_params
+
+        env.set_params(status_params)
+        check_process_status(status_params.nightingale_pid_file)
+
+    def get_user(self):
+        import params
+
+        return params.nightingale_user
+
+    def get_pid_files(self):
+        import params
+
+        return [params.nightingale_pid_file]
+
+
+if __name__ == "__main__":
+    NightingaleServer().execute()
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/service_check.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/service_check.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/service_check.py
new file mode 100644
--- /dev/null	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/service_check.py	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
@@ -0,0 +1,50 @@
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agree in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+"""
+
+import subprocess
+import time
+import os
+from resource_management.core import shell
+from resource_management.core.exceptions import Fail
+from resource_management.libraries.script.script import Script
+from resource_management.libraries.functions.format import format
+from resource_management.core.resources.system import Execute
+from resource_management.core.logger import Logger
+
+
+CHECK_COMMAND_TIMEOUT_DEFAULT = 300.0
+
+
+class NightingaleServiceCheck(Script):
+    def service_check(self, env):
+        import params
+
+        env.set_params(params)
+
+        # check nightingale service
+        ret, out = shell.call(params.nightingale_test_cmd, user=params.nightingale_user)
+        if ret != 0 or len(out.strip()) <= 0:
+            raise Fail("Nightingale service check failed")
+
+        ret, out = shell.call(params.categraf_test_cmd, user=params.categraf_user)
+        if ret != 0 or len(out.strip()) <= 0:
+            raise Fail("categraf check failed")
+
+
+if __name__ == "__main__":
+    NightingaleServiceCheck().execute()
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/status_params.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/status_params.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/status_params.py
new file mode 100644
--- /dev/null	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/status_params.py	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
@@ -0,0 +1,39 @@
+#!/usr/bin/env python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+
+from resource_management.libraries.script import Script
+from resource_management.libraries.functions.format import format
+from resource_management.libraries.functions.default import default
+from resource_management.libraries.functions.version import format_stack_version
+from resource_management.libraries.functions.stack_features import check_stack_feature
+from resource_management.libraries.functions import StackFeature
+
+config = Script.get_config()
+tmp_dir = Script.get_tmp_dir()
+
+
+stack_name = default("/clusterLevelParams/stack_name", None)
+stack_version_unformatted = config["clusterLevelParams"]["stack_version"]
+nightingale_pid_dir = config["configurations"]["nightingale-env"]["nightingale_pid_dir"]
+nightingale_pid_file = "{}/nightingale.pid".format(nightingale_pid_dir)
+categraf_pid_dir = config["configurations"]["categraf-env"]["categraf_pid_dir"]
+categraf_pid_file = "{}/categraf.pid".format(categraf_pid_dir)
+
+stack_version_formatted = format_stack_version(stack_version_unformatted)
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/utils.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/utils.py
new file mode 100644
--- /dev/null	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/scripts/utils.py	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
@@ -0,0 +1,71 @@
+#!/usr/bin/env python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+
+from resource_management.core.source import StaticFile, Template, InlineTemplate
+
+
+def dict_to_toml_string(input_dict, array_headers=None):
+    if array_headers is None:
+        array_headers = set()
+    toml_lines = []
+    section_lines = {}
+    for key, value in input_dict.items():
+        # Split the key by '.' to handle nested structures
+        keys = key.split(".")
+        if len(keys) > 1:
+            section = ".".join(
+                keys[:-1]
+            )  # Use all but the last element for the section
+            if section not in section_lines:
+                section_lines[section] = []
+
+            # Determine how to represent the value
+            if isinstance(value, str):
+                # Check if the value is a boolean or a number in string form
+                if value.lower() in ["true", "false"]:
+                    value_repr = value.lower()
+                elif is_number(value):
+                    value_repr = value
+                elif value.startswith("[") and value.endswith("]"):
+                    value_repr = value
+                else:
+                    value_repr = repr(value)
+            else:
+                value_repr = value
+            value_repr = InlineTemplate(value_repr).get_content()
+            section_lines[section].append("{0} = {1}".format(keys[-1], value_repr))
+
+    for section, lines in section_lines.items():
+        # Check if the section should be an array
+        if section in array_headers:
+            toml_lines.append("[[{}]]".format(section))
+        else:
+            toml_lines.append("[{}]".format(section))
+        toml_lines.extend(lines)
+
+    return "\n".join(toml_lines)
+
+
+def is_number(value):
+    try:
+        float(value)
+        return True
+    except ValueError:
+        return False
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/templates/initial-data-sources.conf.j2
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/templates/initial-data-sources.conf.j2 b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/templates/initial-data-sources.conf.j2
new file mode 100644
--- /dev/null	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/templates/initial-data-sources.conf.j2	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
@@ -0,0 +1,24 @@
+{
+	"folders": {},
+	"connections": {
+		"postgresql-template-1": {
+			"provider": "postgresql",
+			"driver": "postgres-jdbc",
+			"name": "PostgreSQL (Template)",
+			"save-password": false,
+			"show-system-objects": false,
+			"read-only": true,
+			"template": true,
+			"configuration": {
+				"host": "localhost",
+				"port": "5432",
+				"database": "postgres",
+				"url": "jdbc:postgresql://localhost:5432/postgres",
+				"type": "dev",
+				"provider-properties": {
+					"@dbeaver-show-non-default-db@": "false"
+				}
+			}
+		}
+	}
+}
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/templates/initial-data.conf.j2
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/templates/initial-data.conf.j2 b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/templates/initial-data.conf.j2
new file mode 100644
--- /dev/null	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/package/templates/initial-data.conf.j2	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
@@ -0,0 +1,16 @@
+{
+    teams: [
+        {
+            subjectId: "admin",
+            teamName: "Admin",
+            description: "Administrative access. Has all permissions.",
+            permissions: [ "admin" ]
+        },
+        {
+            subjectId: "user",
+            teamName: "User",
+            description: "All users, including anonymous.",
+            permissions: [ ]
+        }
+    ]
+}
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/properties/cloudbeaver-logback.xml.j2
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/properties/cloudbeaver-logback.xml.j2 b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/properties/cloudbeaver-logback.xml.j2
new file mode 100644
--- /dev/null	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/properties/cloudbeaver-logback.xml.j2	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<configuration>
+
+    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
+        <layout class="ch.qos.logback.classic.PatternLayout">
+            <Pattern>
+                %d{dd-MM-yyyy HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n
+            </Pattern>
+        </layout>
+    </appender>
+
+    <!-- Disable logback status messages -->
+    <statusListener class="ch.qos.logback.core.status.NopStatusListener"/>
+    <logger name="org.jkiss" level="DEBUG"/>
+    <logger name="io.cloudbeaver" level="DEBUG"/>
+
+    <root level="INFO">
+        <appender-ref ref="CONSOLE"/>
+    </root>
+
+</configuration>
\ No newline at end of file
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/quicklinks/quicklinks.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/quicklinks/quicklinks.json b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/quicklinks/quicklinks.json
new file mode 100644
--- /dev/null	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/quicklinks/quicklinks.json	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
@@ -0,0 +1,26 @@
+{
+  "name": "default",
+  "description": "default quick links configuration",
+  "configuration": {
+    "protocol": {
+      "type": "HTTP_ONLY"
+    },
+    "links": [
+      {
+        "name": "Nightingale web ui",
+        "label": "Nightingale Web UI",
+        "component_name": "NIGHTINGALE_SERVER",
+        "requires_user_name": "false",
+        "url": "%@://%@:%@",
+        "port": {
+          "http_property": "HTTP.Port",
+          "http_default_port": "17000",
+          "https_property": "HTTP.Port",
+          "https_default_port": "17000",
+          "regex": "^(\\d+)$",
+          "site": "nightingale"
+        }
+      }
+    ]
+  }
+}
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/service_advisor.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/service_advisor.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/service_advisor.py
new file mode 100644
--- /dev/null	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/NIGHTINGALE/service_advisor.py	(revision 5340708f62b5451a4e36139e7bad3a6144741de0)
@@ -0,0 +1,147 @@
+#!/usr/bin/env ambari-python-wrap
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+"""
+
+import imp
+import os
+import socket
+import traceback
+
+from resource_management.core.logger import Logger
+
+SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
+STACKS_DIR = os.path.join(SCRIPT_DIR, "../../../../../stacks/")
+PARENT_FILE = os.path.join(STACKS_DIR, "service_advisor.py")
+
+try:
+    if "BASE_SERVICE_ADVISOR" in os.environ:
+        PARENT_FILE = os.environ["BASE_SERVICE_ADVISOR"]
+    with open(PARENT_FILE, "rb") as fp:
+        service_advisor = imp.load_module(
+            "service_advisor", fp, PARENT_FILE, (".py", "rb", imp.PY_SOURCE)
+        )
+except Exception as e:
+    traceback.print_exc()
+    print("Failed to load parent")
+
+
+class NightingaleServiceAdvisor(service_advisor.ServiceAdvisor):
+    def __init__(self, *args, **kwargs):
+        self.as_super = super(NightingaleServiceAdvisor, self)
+        self.as_super.__init__(*args, **kwargs)
+
+        self.initialize_logger("NightingaleServiceAdvisor")
+
+        # Always call these methods
+        self.modifyMastersWithMultipleInstances()
+        self.modifyCardinalitiesDict()
+        self.modifyHeapSizeProperties()
+        self.modifyNotValuableComponents()
+        self.modifyComponentsNotPreferableOnServer()
+        self.modifyComponentLayoutSchemes()
+
+    def modifyMastersWithMultipleInstances(self):
+        """
+        Modify the set of masters with multiple instances.
+        Must be overriden in child class.
+        """
+        # Nothing to do
+        pass
+
+    def modifyCardinalitiesDict(self):
+        """
+        Modify the dictionary of cardinalities.
+        Must be overriden in child class.
+        """
+        # Nothing to do
+        pass
+
+    def modifyHeapSizeProperties(self):
+        """
+        Modify the dictionary of heap size properties.
+        Must be overriden in child class.
+        """
+        pass
+
+    def modifyNotValuableComponents(self):
+        """
+        Modify the set of components whose host assignment is based on other services.
+        Must be overriden in child class.
+        """
+        # Nothing to do
+        pass
+
+    def modifyComponentsNotPreferableOnServer(self):
+        """
+        Modify the set of components that are not preferable on the server.
+        Must be overriden in child class.
+        """
+        # Nothing to do
+        pass
+
+    def modifyComponentLayoutSchemes(self):
+        """
+        Modify layout scheme dictionaries for components.
+        The scheme dictionary basically maps the number of hosts to
+        host index where component should exist.
+        Must be overriden in child class.
+        """
+        pass
+
+    def getServiceComponentLayoutValidations(self, services, hosts):
+        """
+        Get a list of errors.
+        Must be overriden in child class.
+        """
+
+        return self.getServiceComponentCardinalityValidations(
+            services, hosts, "SUPERSET"
+        )
+
+    def getServiceConfigurationRecommendations(
+        self, configurations, clusterData, services, hosts
+    ):
+        recommender = NightingaleRecommender()
+        recommender.recommendNightingaleConfigurationsFromHDP30(
+            configurations, clusterData, services, hosts
+        )
+
+    def getServiceConfigurationsValidationItems(
+        self, configurations, recommendedDefaults, services, hosts
+    ):
+        """
+        Entry point.
+        Validate configurations for the service. Return a list of errors.
+        The code for this function should be the same for each Service Advisor.
+        """
+        return []
+
+
+class NightingaleRecommender(service_advisor.ServiceAdvisor):
+    """
+    Nightingale Recommender suggests properties when adding the service for the first time or modifying configs via the UI.
+    """
+
+    def __init__(self, *args, **kwargs):
+        self.as_super = super(NightingaleRecommender, self)
+        self.as_super.__init__(*args, **kwargs)
+
+    def recommendNightingaleConfigurationsFromHDP30(
+        self, configurations, clusterData, services, hosts
+    ):
+        pass

Subject: [PATCH] feature： 支持 cloudbeaver 24.3.3
---
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/metainfo.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/metainfo.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/metainfo.xml
new file mode 100644
--- /dev/null	(date 1737526146068)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/metainfo.xml	(date 1737526146068)
@@ -0,0 +1,84 @@
+<?xml version="1.0"?>
+<!--Licensed to the Apache Software Foundation (ASF) under one
+* or more contributor license agreements.  See the NOTICE file
+* distributed with this work for additional information
+* regarding copyright ownership.  The ASF licenses this file
+* to you under the Apache License, Version 2.0 (the
+* "License"); you may not use this file except in compliance
+* with the License.  You may obtain a copy of the License at
+*
+*     http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+-->
+<metainfo>
+  <schemaVersion>2.0</schemaVersion>
+  <services>
+    <service>
+      <name>CLOUDBEAVER</name>
+      <displayName>Cloudbeaver</displayName>
+      <comment>Component CLOUDBEAVER Integrated By JaneTTR . For commercial use, please contact mail: 3832514048@qq.com</comment>
+      <version>24.3.3</version>
+      <components>
+        <component>
+          <name>CLOUDBEAVER_SERVER</name>
+          <displayName>Cloudbeaver Server</displayName>
+          <category>MASTER</category>
+          <cardinality>1</cardinality>
+          <versionAdvertised>true</versionAdvertised>
+          <commandScript>
+            <script>scripts/server.py</script>
+            <scriptType>PYTHON</scriptType>
+            <timeout>600</timeout>
+          </commandScript>
+          <logs>
+            <log>
+              <logId>cloudbeaver</logId>
+              <primary>true</primary>
+            </log>
+          </logs>
+        </component>
+
+      </components>
+
+      <configuration-dependencies>
+        <config-type>cloudbeaver-env</config-type>
+        <config-type>cloudbeaver</config-type>
+        <config-type>logback</config-type>
+      </configuration-dependencies>
+
+      <commandScript>
+        <script>scripts/service_check.py</script>
+        <scriptType>PYTHON</scriptType>
+        <timeout>300</timeout>
+      </commandScript>
+
+
+      <restartRequiredAfterChange>true</restartRequiredAfterChange>
+
+      <osSpecifics>
+        <osSpecific>
+          <osFamily>redhat9,redhat8,redhat7,amazonlinux2,redhat6,suse11,suse12</osFamily>
+          <packages>
+            <package>
+              <name>cloudbeaver_${stack_version}</name>
+            </package>
+          </packages>
+        </osSpecific>
+      </osSpecifics>
+
+      <quickLinksConfigurations>
+        <quickLinksConfiguration>
+          <fileName>quicklinks.json</fileName>
+          <default>true</default>
+        </quickLinksConfiguration>
+      </quickLinksConfigurations>
+
+    </service>
+  </services>
+</metainfo>
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/service_advisor.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/service_advisor.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/service_advisor.py
new file mode 100644
--- /dev/null	(date 1735023256000)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/service_advisor.py	(date 1735023256000)
@@ -0,0 +1,213 @@
+#!/usr/bin/env ambari-python-wrap
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+"""
+
+# Python imports
+from ast import Param
+import imp
+import os
+import traceback
+import re
+import socket
+import fnmatch
+
+
+from resource_management.core.logger import Logger
+
+SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
+STACKS_DIR = os.path.join(SCRIPT_DIR, "../../../../../stacks/")
+PARENT_FILE = os.path.join(STACKS_DIR, "service_advisor.py")
+
+try:
+    if "BASE_SERVICE_ADVISOR" in os.environ:
+        PARENT_FILE = os.environ["BASE_SERVICE_ADVISOR"]
+    with open(PARENT_FILE, "rb") as fp:
+        service_advisor = imp.load_module(
+            "service_advisor", fp, PARENT_FILE, (".py", "rb", imp.PY_SOURCE)
+        )
+except Exception as e:
+    traceback.print_exc()
+    print("Failed to load parent")
+
+
+class CloudbeaverServiceAdvisor(service_advisor.ServiceAdvisor):
+    def __init__(self, *args, **kwargs):
+        self.as_super = super(CloudbeaverServiceAdvisor, self)
+        self.as_super.__init__(*args, **kwargs)
+
+        # Always call these methods
+        self.modifyMastersWithMultipleInstances()
+        self.modifyCardinalitiesDict()
+        self.modifyHeapSizeProperties()
+        self.modifyNotValuableComponents()
+        self.modifyComponentsNotPreferableOnServer()
+        self.modifyComponentLayoutSchemes()
+
+    def modifyMastersWithMultipleInstances(self):
+        """
+        Modify the set of masters with multiple instances.
+        Must be overriden in child class.
+        """
+        # Nothing to do
+        pass
+
+    def modifyCardinalitiesDict(self):
+        """
+        Modify the dictionary of cardinalities.
+        Must be overriden in child class.
+        """
+        # Nothing to do
+        pass
+
+    def modifyHeapSizeProperties(self):
+        """
+        Modify the dictionary of heap size properties.
+        Must be overriden in child class.
+        """
+        pass
+
+    def modifyNotValuableComponents(self):
+        """
+        Modify the set of components whose host assignment is based on other services.
+        Must be overriden in child class.
+        """
+        # Nothing to do
+        pass
+
+    def modifyComponentsNotPreferableOnServer(self):
+        """
+        Modify the set of components that are not preferable on the server.
+        Must be overriden in child class.
+        """
+        # Nothing to do
+        pass
+
+    def modifyComponentLayoutSchemes(self):
+        """
+        Modify layout scheme dictionaries for components.
+        The scheme dictionary basically maps the number of hosts to
+        host index where component should exist.
+        Must be overriden in child class.
+        """
+
+        # Nothing to do
+        pass
+
+    def getServiceComponentLayoutValidations(self, services, hosts):
+        """
+        Get a list of errors.
+        Must be overriden in child class.
+        """
+
+        return self.getServiceComponentCardinalityValidations(
+            services, hosts, "CELEBORN"
+        )
+
+    def getServiceConfigurationRecommendations(
+        self, configurations, clusterData, services, hosts
+    ):
+        """
+        Entry point.
+        Must be overriden in child class.
+        """
+        # Logger.info("Class: %s, Method: %s. Recommending Service Configurations." %
+        #            (self.__class__.__name__, inspect.stack()[0][3]))
+
+        recommender = CloudbeaverRecommender()
+        recommender.recommendCloudbeaverConfigurationsFromHDP33(
+            configurations, clusterData, services, hosts
+        )
+
+    # def getServiceConfigurationRecommendationsForSSO(self, configurations, clusterData, services, hosts):
+    #   """
+    #   Entry point.
+    #   Must be overriden in child class.
+    #   """
+    #   recommender = CloudbeaverRecommender()
+    #   recommender.recommendConfigurationsForSSO(configurations, clusterData, services, hosts)
+
+    def getServiceConfigurationsValidationItems(
+        self, configurations, recommendedDefaults, services, hosts
+    ):
+        """
+        Entry point.
+        Validate configurations for the service. Return a list of errors.
+        The code for this function should be the same for each Service Advisor.
+        """
+        # Logger.info("Class: %s, Method: %s. Validating Configurations." %
+        #            (self.__class__.__name__, inspect.stack()[0][3]))
+
+        return []
+
+    @staticmethod
+    def isKerberosEnabled(services, configurations):
+        """
+        Determines if security is enabled by testing the value of core-site/hadoop.security.authentication enabled.
+        If the property exists and is equal to "kerberos", then is it enabled; otherwise is it assumed to be
+        disabled.
+
+        :type services: dict
+        :param services: the dictionary containing the existing configuration values
+        :type configurations: dict
+        :param configurations: the dictionary containing the updated configuration values
+        :rtype: bool
+        :return: True or False
+        """
+        if (
+            configurations
+            and "core-site" in configurations
+            and "hadoop.security.authentication"
+            in configurations["core-site"]["properties"]
+        ):
+            return (
+                configurations["core-site"]["properties"][
+                    "hadoop.security.authentication"
+                ].lower()
+                == "kerberos"
+            )
+        elif (
+            services
+            and "core-site" in services["configurations"]
+            and "hadoop.security.authentication"
+            in services["configurations"]["core-site"]["properties"]
+        ):
+            return (
+                services["configurations"]["core-site"]["properties"][
+                    "hadoop.security.authentication"
+                ].lower()
+                == "kerberos"
+            )
+        else:
+            return False
+
+
+class CloudbeaverRecommender(service_advisor.ServiceAdvisor):
+    """
+    Cloudbeaver Recommender suggests properties when adding the service for the first time or modifying configs via the UI.
+    """
+
+    def __init__(self, *args, **kwargs):
+        self.as_super = super(CloudbeaverRecommender, self)
+        self.as_super.__init__(*args, **kwargs)
+
+    def recommendCloudbeaverConfigurationsFromHDP33(
+        self, configurations, clusterData, services, hosts
+    ):
+        """
+        Recommend configurations for this service based on HDP 3.3.
+        """
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/scripts/status_params.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/scripts/status_params.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/scripts/status_params.py
new file mode 100644
--- /dev/null	(date 1737277060302)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/scripts/status_params.py	(date 1737277060302)
@@ -0,0 +1,36 @@
+#!/usr/bin/env python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+
+from resource_management.libraries.script import Script
+from resource_management.libraries.functions.format import format
+from resource_management.libraries.functions.default import default
+from resource_management.libraries.functions.version import format_stack_version
+from resource_management.libraries.functions.stack_features import check_stack_feature
+from resource_management.libraries.functions import StackFeature
+
+config = Script.get_config()
+tmp_dir = Script.get_tmp_dir()
+
+
+stack_name = default("/clusterLevelParams/stack_name", None)
+stack_version_unformatted = config["clusterLevelParams"]["stack_version"]
+cloudbeaver_pid_dir = config["configurations"]["cloudbeaver-env"]["cloudbeaver_pid_dir"]
+cloudbeaver_pid_file = "{0}/cloudbeaver.pid".format(cloudbeaver_pid_dir)
+stack_version_formatted = format_stack_version(stack_version_unformatted)
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/scripts/service_check.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/scripts/service_check.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/scripts/service_check.py
new file mode 100644
--- /dev/null	(date 1735023256000)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/scripts/service_check.py	(date 1735023256000)
@@ -0,0 +1,43 @@
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agree in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+"""
+
+import subprocess
+import time
+import os
+
+from resource_management.core.exceptions import Fail
+from resource_management.libraries.script.script import Script
+from resource_management.libraries.functions.format import format
+from resource_management.core.resources.system import Execute
+from resource_management.core.logger import Logger
+
+
+CHECK_COMMAND_TIMEOUT_DEFAULT = 300.0
+
+
+class CloudbeaverServiceCheck(Script):
+    def service_check(self, env):
+        import params
+
+        env.set_params(params)
+
+        # Execute(params.celeborn_test_cmd, user=params.celeborn_user)
+
+
+if __name__ == "__main__":
+    CloudbeaverServiceCheck().execute()
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/scripts/cloudbeaver.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/scripts/cloudbeaver.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/scripts/cloudbeaver.py
new file mode 100644
--- /dev/null	(date 1737277060306)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/scripts/cloudbeaver.py	(date 1737277060306)
@@ -0,0 +1,124 @@
+#!/usr/bin/env python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+
+import os
+import sys
+from resource_management.libraries.script.script import Script
+from resource_management.libraries.resources.xml_config import XmlConfig
+from resource_management.libraries.resources.template_config import TemplateConfig
+from resource_management.libraries.functions.format import format
+from resource_management.libraries.functions import lzo_utils
+from resource_management.libraries.functions.default import default
+from resource_management.libraries.functions.generate_logfeeder_input_config import (
+    generate_logfeeder_input_config,
+)
+from resource_management.core.source import Template, InlineTemplate
+from resource_management.core.resources import Package
+from resource_management.core.resources.service import ServiceConfig
+from resource_management.core.resources.system import Directory, Execute, File
+from ambari_commons.os_family_impl import OsFamilyFuncImpl, OsFamilyImpl
+from ambari_commons import OSConst
+from resource_management.libraries.functions.constants import StackFeature
+from resource_management.libraries.functions.stack_features import check_stack_feature
+import json
+
+
+# name is 'master' or 'regionserver' or 'queryserver' or 'client'
+@OsFamilyFuncImpl(os_family=OsFamilyImpl.DEFAULT)
+def cloudbeaver(name=None):
+    import params
+    import status_params
+
+    Directory(
+        [params.cloudbeaver_pid_dir, params.cloudbeaver_log_dir],
+        owner=params.cloudbeaver_user,
+        group=params.cloudbeaver_group,
+        mode=0o775,
+        create_parents=True,
+    )
+
+    File(
+        os.path.join(params.cloudbeaver_conf_dir, "cloudbeaver.conf"),
+        owner=params.cloudbeaver_user,
+        group=params.cloudbeaver_group,
+        content=dict_to_jsonc(params.cloudbeaver_conf),
+        mode=0o644,
+    )
+
+    File(
+        format("{params.cloudbeaver_conf_dir}/logback.xml"),
+        content=InlineTemplate(params.cloudbeaver_logback_content),
+        owner=params.cloudbeaver_user,
+        group=params.cloudbeaver_group,
+        mode=0o644,
+    )
+
+    File(
+        os.path.join(params.cloudbeaver_conf_dir, "initial-data.conf"),
+        mode=0o755,
+        content=Template("initial-data.conf.j2"),
+    )
+
+    File(
+        os.path.join(params.cloudbeaver_conf_dir, "initial-data-sources.conf"),
+        mode=0o755,
+        content=Template("initial-data-sources.conf.j2"),
+    )
+
+
+# enabledAuthProviders  disabledBetaFeatures disabledDrivers enabledAuthProviders
+def dict_to_jsonc(config_dict):
+    def build_jsonc(d, indent=0):
+        jsonc_str = ""
+        indent_str = " " * indent
+        items = d.items()  # In Python 2, use items() instead of iteritems()
+        for i, (key, value) in enumerate(items):
+            is_last_item = i == len(items) - 1
+            if isinstance(value, dict):
+                jsonc_str += "{0}{1}: {{\n".format(indent_str, key)
+                jsonc_str += build_jsonc(value, indent + 4)
+                jsonc_str += "{0}}}{1}\n".format(indent_str, ',' if not is_last_item else '')
+            else:
+                jsonc_str += "{0}{1}: {2}{3}\n".format(indent_str, key, json.dumps(value),
+                                                       ',' if not is_last_item else '')
+        return jsonc_str
+
+    # Convert the flat dictionary into a nested dictionary
+    nested_dict = {}
+    for key, value in config_dict.items():
+        keys = key.split(".")
+        d = nested_dict
+        for sub_key in keys[:-1]:
+            if sub_key not in d:
+                d[sub_key] = {}
+            d = d[sub_key]
+
+        if keys[-1] in [
+            "enabledAuthProviders",
+            "disabledBetaFeatures",
+            "disabledDrivers",
+        ]:
+            value = value.split(",") if isinstance(value, str) else value
+
+        d[keys[-1]] = value
+
+    # Build the JSONC string
+    jsonc_output = "{\n" + build_jsonc(nested_dict, 4) + "}\n"
+    return jsonc_output
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/properties/stack_packages.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/properties/stack_packages.json b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/properties/stack_packages.json
--- a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/properties/stack_packages.json	(revision e025b63b91a5dd1e1986a4c8f95035ae8b4287d8)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/properties/stack_packages.json	(date 1737523166818)
@@ -672,6 +672,20 @@
             "victoriametrics"
           ]
         }
+      },
+      "CLOUDBEAVER": {
+        "CLOUDBEAVER_SERVER": {
+          "STACK-SELECT-PACKAGE": "cloudbeaver",
+          "INSTALL": [
+            "cloudbeaver"
+          ],
+          "PATCH": [
+            "cloudbeaver"
+          ],
+          "STANDARD": [
+            "cloudbeaver"
+          ]
+        }
       }
     },
     "conf-select": {
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/scripts/params.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/scripts/params.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/scripts/params.py
new file mode 100644
--- /dev/null	(date 1737277060297)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/scripts/params.py	(date 1737277060297)
@@ -0,0 +1,117 @@
+#!/usr/bin/env python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+
+import socket
+import os
+
+from ambari_commons.constants import AMBARI_SUDO_BINARY
+from resource_management import *
+from resource_management.libraries.functions.stack_features import check_stack_feature
+from resource_management.libraries.functions.constants import StackFeature
+from resource_management.libraries.functions import conf_select, stack_select
+from resource_management.libraries.functions.version import (
+    format_stack_version,
+    get_major_version,
+)
+from resource_management.libraries.functions.copy_tarball import (
+    get_sysprep_skip_copy_tarballs_hdfs,
+)
+from resource_management.libraries.functions.format import format
+from resource_management.libraries.functions.default import default
+from resource_management.libraries.functions import get_kinit_path
+from resource_management.libraries.functions.get_not_managed_resources import (
+    get_not_managed_resources,
+)
+from resource_management.libraries.resources.hdfs_resource import HdfsResource
+from resource_management.libraries.script.script import Script
+from resource_management.libraries.functions.copy_tarball import get_current_version
+from resource_management.libraries.functions.stack_features import (
+    check_stack_feature,
+    get_stack_feature_version,
+)
+from resource_management.libraries.functions import StackFeature
+
+
+config = Script.get_config()
+
+java_home = config["ambariLevelParams"]["java_home"]
+ambari_java_home = default("/ambariLevelParams/ambari_java_home", None)
+# not supporting 32 bit jdk.
+
+stack_root = Script.get_stack_root()
+
+config = Script.get_config()
+tmp_dir = Script.get_tmp_dir()
+sudo = AMBARI_SUDO_BINARY
+fqdn = socket.getfqdn().lower()
+
+retryAble = default("/commandParams/command_retry_enabled", False)
+
+cluster_name = config["clusterName"]
+stack_name = default("/clusterLevelParams/stack_name", None)
+stack_root = Script.get_stack_root()
+# 3.2
+stack_version_unformatted = config["clusterLevelParams"]["stack_version"]
+# 3.2.0.0
+stack_version_formatted = format_stack_version(stack_version_unformatted)
+# 3.2
+major_stack_version = get_major_version(stack_version_formatted)
+
+# 3.2.1.0-001
+effective_version = get_current_version(service="GLUTEN")
+
+sysprep_skip_copy_tarballs_hdfs = get_sysprep_skip_copy_tarballs_hdfs()
+
+# New Cluster Stack Version that is defined during the RESTART of a Stack Upgrade
+version = default("/commandParams/version", None)
+
+
+user_group = config["configurations"]["cluster-env"]["user_group"]
+
+
+cloudbeaver_logback_content = config["configurations"]["cloudbeaver-logback"]["content"]
+
+component_directory = "cloudbeaver"
+cloudbeaver_home = format("{stack_root}/current/{component_directory}")
+cloudbeaver_conf_dir = format("{stack_root}/current/{component_directory}/conf")
+
+cloudbeaver_conf = config["configurations"]["cloudbeaver"]
+
+java17_home = config["configurations"]["cloudbeaver-env"]["java_home"]
+cloudbeaver_group = config["configurations"]["cloudbeaver-env"]["cloudbeaver_group"]
+cloudbeaver_user = config["configurations"]["cloudbeaver-env"]["cloudbeaver_user"]
+
+cloudbeaver_log_dir = config["configurations"]["cloudbeaver-env"]["cloudbeaver_log_dir"]
+cloudbeaver_pid_dir = config["configurations"]["cloudbeaver-env"]["cloudbeaver_pid_dir"]
+cloudbeaver_pid_file = "{0}/cloudbeaver.pid".format(cloudbeaver_pid_dir)
+
+
+cloudbeaver_pid_cmd = (
+    "echo `ps -A -o pid,command | grep -v  grep | grep io.cloudbeaver.product.ce.product | awk '{print $1; exit}'`> "
+    + cloudbeaver_pid_file
+)
+
+# current hostname
+hostname = config["agentLevelParams"]["hostname"]
+# Find current stack and version to push agent files to
+stack_name = default("/hostLevelParams/stack_name", None)
+stack_version = config["hostLevelParams"]["stack_version"]
+host_name = config["agentLevelParams"]["hostname"]
+smoke_user = config["configurations"]["cluster-env"]["smokeuser"]
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/scripts/server.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/scripts/server.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/scripts/server.py
new file mode 100644
--- /dev/null	(date 1735023256000)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/scripts/server.py	(date 1735023256000)
@@ -0,0 +1,71 @@
+#!/usr/bin/python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+
+import os
+from resource_management import *
+from resource_management.core import sudo
+from resource_management.libraries.functions import check_process_status
+import time
+from cloudbeaver import cloudbeaver
+from cloudbeaver_service import cloudbeaver_service
+
+
+class CloudbeaverServer(Script):
+    def install(self, env):
+        self.install_packages(env)
+
+    def configure(self, env, upgrade_type=None, config_dir=None):
+        import params
+
+        env.set_params(params)
+        cloudbeaver(name="server")
+
+    def start(self, env, upgrade_type=None):
+        import params
+
+        env.set_params(params)
+        self.configure(env)
+        cloudbeaver_service("server", action="start")
+
+    def stop(self, env, upgrade_type=None):
+        import params
+
+        env.set_params(params)
+        cloudbeaver_service("server", action="stop")
+
+    def status(self, env):
+        import status_params
+
+        env.set_params(status_params)
+        check_process_status(status_params.cloudbeaver_pid_file)
+
+    def get_user(self):
+        import params
+
+        return params.cloudbeaver_user
+
+    def get_pid_files(self):
+        import params
+
+        return [params.cloudbeaver_pid_file]
+
+
+if __name__ == "__main__":
+    CloudbeaverServer().execute()
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/templates/initial-data-sources.conf.j2
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/templates/initial-data-sources.conf.j2 b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/templates/initial-data-sources.conf.j2
new file mode 100644
--- /dev/null	(date 1735023256000)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/templates/initial-data-sources.conf.j2	(date 1735023256000)
@@ -0,0 +1,24 @@
+{
+	"folders": {},
+	"connections": {
+		"postgresql-template-1": {
+			"provider": "postgresql",
+			"driver": "postgres-jdbc",
+			"name": "PostgreSQL (Template)",
+			"save-password": false,
+			"show-system-objects": false,
+			"read-only": true,
+			"template": true,
+			"configuration": {
+				"host": "localhost",
+				"port": "5432",
+				"database": "postgres",
+				"url": "jdbc:postgresql://localhost:5432/postgres",
+				"type": "dev",
+				"provider-properties": {
+					"@dbeaver-show-non-default-db@": "false"
+				}
+			}
+		}
+	}
+}
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/scripts/cloudbeaver_service.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/scripts/cloudbeaver_service.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/scripts/cloudbeaver_service.py
new file mode 100644
--- /dev/null	(date 1737277060287)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/scripts/cloudbeaver_service.py	(date 1737277060287)
@@ -0,0 +1,101 @@
+#!/usr/bin/env python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+
+# Python Imports
+import os
+import time
+
+# Ambari Commons & Resource Management Imports
+from ambari_commons.constants import UPGRADE_TYPE_ROLLING
+from resource_management.core import shell
+from resource_management.core import utils
+from resource_management.core.exceptions import ComponentIsNotRunning, Fail
+from resource_management.core.logger import Logger
+from resource_management.core.resources.system import File, Execute
+from resource_management.core.shell import as_user, quote_bash_args
+from resource_management.libraries.functions import get_user_call_output
+from resource_management.libraries.functions import StackFeature
+from resource_management.libraries.functions.check_process_status import (
+    check_process_status,
+)
+from resource_management.libraries.functions.decorator import retry
+from resource_management.libraries.functions.format import format
+from resource_management.libraries.functions.show_logs import show_logs
+from resource_management.libraries.functions.stack_features import check_stack_feature
+
+
+def cloudbeaver_service(name, action="start", upgrade_type=None):
+    import params
+    import status_params
+
+    wait_time = 5
+    if name == "server":
+        pid_file = params.cloudbeaver_pid_file
+        cmd_start = "cd {0};nohup {0}/run-server.sh > {1}/cloudbeaver.log 2>&1 < /dev/null &".format(
+            params.cloudbeaver_home, params.cloudbeaver_log_dir)
+
+    pid = get_user_call_output.get_user_call_output(
+        format("cat {pid_file}"), user=params.cloudbeaver_user, is_checked_call=False
+    )[1]
+    process_id_exists_command = format(
+        "ls {pid_file} >/dev/null 2>&1 && ps -p {pid} >/dev/null 2>&1"
+    )
+
+    if action == "start":
+        daemon_cmd = cmd_start
+
+        try:
+            Execute(
+                daemon_cmd,
+                user=params.cloudbeaver_user,
+                environment={"JAVA_HOME": params.java17_home},
+                path=params.cloudbeaver_home,
+                not_if=process_id_exists_command,
+            )
+            Execute(params.cloudbeaver_pid_cmd, user=params.cloudbeaver_user)
+        except:
+            show_logs(params.cloudbeaver_log_dir, user=params.cloudbeaver_user)
+            raise
+
+    elif action == "stop":
+        Logger.info(format("stop cloudbeaver server, pid : {pid} "))
+        daemon_kill_cmd = format("{sudo} kill {pid}")
+        daemon_hard_kill_cmd = format("{sudo} kill -9 {pid}")
+
+        # kill cmd
+        Execute(daemon_kill_cmd, not_if=format("! ({process_id_exists_command})"))
+
+        # kill -9 cmd
+        Execute(
+            daemon_hard_kill_cmd,
+            not_if=format(
+                "! ({process_id_exists_command}) || ( sleep {wait_time} && ! ({process_id_exists_command}) )"
+            ),
+            ignore_failures=True,
+        )
+
+        try:
+            # check if stopped the process, else fail the task
+            Execute(format("! ({process_id_exists_command})"), tries=20, try_sleep=3)
+        except:
+            show_logs(params.cloudbeaver_log_dir, params.cloudbeaver_user)
+            raise
+
+        File(pid_file, action="delete")
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/properties/cloudbeaver-logback.xml.j2
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/properties/cloudbeaver-logback.xml.j2 b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/properties/cloudbeaver-logback.xml.j2
new file mode 100644
--- /dev/null	(date 1735023256000)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/properties/cloudbeaver-logback.xml.j2	(date 1735023256000)
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<configuration>
+
+    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
+        <layout class="ch.qos.logback.classic.PatternLayout">
+            <Pattern>
+                %d{dd-MM-yyyy HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n
+            </Pattern>
+        </layout>
+    </appender>
+
+    <!-- Disable logback status messages -->
+    <statusListener class="ch.qos.logback.core.status.NopStatusListener"/>
+    <logger name="org.jkiss" level="DEBUG"/>
+    <logger name="io.cloudbeaver" level="DEBUG"/>
+
+    <root level="INFO">
+        <appender-ref ref="CONSOLE"/>
+    </root>
+
+</configuration>
\ No newline at end of file
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/templates/initial-data.conf.j2
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/templates/initial-data.conf.j2 b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/templates/initial-data.conf.j2
new file mode 100644
--- /dev/null	(date 1735023256000)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/package/templates/initial-data.conf.j2	(date 1735023256000)
@@ -0,0 +1,16 @@
+{
+    teams: [
+        {
+            subjectId: "admin",
+            teamName: "Admin",
+            description: "Administrative access. Has all permissions.",
+            permissions: [ "admin" ]
+        },
+        {
+            subjectId: "user",
+            teamName: "User",
+            description: "All users, including anonymous.",
+            permissions: [ ]
+        }
+    ]
+}
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/configuration/cloudbeaver-env.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/configuration/cloudbeaver-env.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/configuration/cloudbeaver-env.xml
new file mode 100644
--- /dev/null	(date 1737544053518)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/configuration/cloudbeaver-env.xml	(date 1737544053518)
@@ -0,0 +1,95 @@
+<?xml version="1.0"?>
+<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
+<!--
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+<configuration supports_final="true">
+    <property>
+        <name>cloudbeaver_user</name>
+        <display-name>Cloudbeaver User</display-name>
+        <value>cloudbeaver</value>
+        <property-type>USER</property-type>
+        <value-attributes>
+            <type>user</type>
+            <overridable>false</overridable>
+            <user-groups>
+                <property>
+                    <type>cluster-env</type>
+                    <name>user_group</name>
+                </property>
+                <property>
+                    <type>cloudbeaver-env</type>
+                    <name>cloudbeaver_group</name>
+                </property>
+            </user-groups>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>cloudbeaver_group</name>
+        <display-name>Cloudbeaver Group</display-name>
+        <value>hadoop</value>
+        <property-type>GROUP</property-type>
+        <description>cloudbeaver group</description>
+        <value-attributes>
+            <type>user</type>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>cloudbeaver_log_dir</name>
+        <display-name>Cloudbeaver Log directory</display-name>
+        <value>/var/log/cloudbeaver</value>
+        <description>Cloudbeaver Log Dir</description>
+        <value-attributes>
+            <type>directory</type>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>cloudbeaver_pid_dir</name>
+        <display-name>Cloudbeaver PID directory</display-name>
+        <value>/var/run/cloudbeaver</value>
+        <description>Cloudbeaver Log Dir</description>
+        <value-attributes>
+            <type>directory</type>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+
+
+    <property>
+        <name>java_home</name>
+        <display-name>Cloudbeaver Java Home</display-name>
+        <value>/opt/enhance_env/miniconda2/envs/cloudbeaver_env/lib/jvm</value>
+        <description>Cloudbeaver Java Home jdk 17 needed.</description>
+    </property>
+
+   <property>
+    <name>cloudbeaver_keytab</name>
+    <description>Cloudbeaver keytab path</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>cloudbeaver_principal</name>
+    <description>Cloudbeaver principal</description>
+    <property-type>KERBEROS_PRINCIPAL</property-type>
+    <on-ambari-upgrade add="false"/>
+  </property>
+</configuration>
\ No newline at end of file
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/quicklinks/quicklinks.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/quicklinks/quicklinks.json b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/quicklinks/quicklinks.json
new file mode 100644
--- /dev/null	(date 1735023256000)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/quicklinks/quicklinks.json	(date 1735023256000)
@@ -0,0 +1,26 @@
+{
+  "name": "default",
+  "description": "default quick links configuration",
+  "configuration": {
+    "protocol": {
+      "type": "HTTP_ONLY"
+    },
+    "links": [
+      {
+        "name": "Cloudbeaver web ui",
+        "label": "Cloudbeaver Web UI",
+        "component_name": "CLOUDBEAVER_SERVER",
+        "requires_user_name": "false",
+        "url": "%@://%@:%@",
+        "port": {
+          "http_property": "server.serverPort",
+          "http_default_port": "8978",
+          "https_property": "server.serverPort",
+          "https_default_port": "8978",
+          "regex": "^(\\d+)$",
+          "site": "cloudbeaver"
+        }
+      }
+    ]
+  }
+}
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/configuration/cloudbeaver.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/configuration/cloudbeaver.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/configuration/cloudbeaver.xml
new file mode 100644
--- /dev/null	(date 1737544208148)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/configuration/cloudbeaver.xml	(date 1737544208148)
@@ -0,0 +1,267 @@
+<?xml version="1.0"?>
+<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
+<!--
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+<configuration supports_final="true">
+
+    <property>
+      <name>server.serverPort</name>
+      <value>8978</value>
+    </property>
+    <property>
+      <name>server.workspaceLocation</name>
+      <value>workspace</value>
+    </property>
+    <property>
+      <name>server.contentRoot</name>
+      <value>web</value>
+    </property>
+    <property>
+      <name>server.driversLocation</name>
+      <value>drivers</value>
+    </property>
+    <property>
+      <name>server.sslConfigurationPath</name>
+      <value>workspace/.data/ssl-config.xml</value>
+    </property>
+    <property>
+      <name>server.rootURI</name>
+      <value>/</value>
+    </property>
+    <property>
+      <name>server.serviceURI</name>
+      <value>/api/</value>
+    </property>
+    <property>
+      <name>server.productSettings.core.theming.theme</name>
+      <value>light</value>
+    </property>
+    <property>
+      <name>server.productSettings.core.localization.localization</name>
+      <value>en</value>
+    </property>
+    <property>
+      <name>server.productSettings.plugin.sql-editor.autoSave</name>
+      <value>true</value>
+    </property>
+    <property>
+      <name>server.productSettings.plugin.sql-editor.disabled</name>
+      <value>false</value>
+    </property>
+    <property>
+      <name>server.productSettings.plugin.sql-editor.maxFileSize</name>
+      <value>10240</value>
+    </property>
+    <property>
+      <name>server.productSettings.plugin.log-viewer.disabled</name>
+      <value>false</value>
+    </property>
+    <property>
+      <name>server.productSettings.plugin.log-viewer.logBatchSize</name>
+      <value>1000</value>
+    </property>
+    <property>
+      <name>server.productSettings.plugin.log-viewer.maxFailedRequests</name>
+      <value>3</value>
+    </property>
+    <property>
+      <name>server.productSettings.plugin.log-viewer.maxLogRecords</name>
+      <value>2000</value>
+    </property>
+    <property>
+      <name>server.productSettings.plugin.log-viewer.refreshTimeout</name>
+      <value>3000</value>
+    </property>
+    <property>
+      <name>server.productSettings.sql.proposals.insert.table.alias</name>
+      <value>PLAIN</value>
+    </property>
+    <property>
+      <name>server.expireSessionAfterPeriod</name>
+      <value>1800000</value>
+    </property>
+    <property>
+      <name>server.develMode</name>
+      <value>false</value>
+    </property>
+    <property>
+      <name>server.enableSecurityManager</name>
+      <value>false</value>
+    </property>
+    <property>
+      <name>server.sm.enableBruteForceProtection</name>
+      <value>true</value>
+    </property>
+    <property>
+      <name>server.sm.maxFailedLogin</name>
+      <value>10</value>
+    </property>
+    <property>
+      <name>server.sm.minimumLoginTimeout</name>
+      <value>1</value>
+    </property>
+    <property>
+      <name>server.sm.blockLoginPeriod</name>
+      <value>300</value>
+    </property>
+    <property>
+      <name>server.sm.passwordPolicy.minLength</name>
+      <value>8</value>
+    </property>
+    <property>
+      <name>server.sm.passwordPolicy.requireMixedCase</name>
+      <value>true</value>
+    </property>
+    <property>
+      <name>server.sm.passwordPolicy.minNumberCount</name>
+      <value>1</value>
+    </property>
+    <property>
+      <name>server.sm.passwordPolicy.minSymbolCount</name>
+      <value>0</value>
+    </property>
+    <property require-input="true">
+      <name>server.database.driver</name>
+        <value/>
+      <description>postgres-jdbc</description>
+    </property>
+    <property require-input="true">
+      <name>server.database.url</name>
+        <value/>
+      <description>jdbc:postgresql://localhost:5432/cloudbeaver</description>
+    </property>
+    <property require-input="true">
+      <name>server.database.schema</name>
+      <value>postgres</value>
+      <description>i use temp env for pg admin! prod must modify</description>
+    </property>
+    <property require-input="true">
+      <name>server.database.user</name>
+      <value>postgres</value>
+      <description>i use temp env for pg admin! prod must modify</description>
+    </property>
+    <property require-input="true">
+      <name>server.database.password</name>
+        <value/>
+        <value-attributes>
+            <type>password</type>
+        </value-attributes>
+    </property>
+    <property>
+      <name>server.database.initialDataConfiguration</name>
+      <value>conf/initial-data.conf</value>
+    </property>
+    <property>
+      <name>server.database.pool.minIdleConnections</name>
+      <value>4</value>
+    </property>
+    <property>
+      <name>server.database.pool.maxIdleConnections</name>
+      <value>10</value>
+    </property>
+    <property>
+      <name>server.database.pool.maxConnections</name>
+      <value>100</value>
+    </property>
+    <property>
+      <name>server.database.pool.validationQuery</name>
+      <value>SELECT 1</value>
+    </property>
+    <property>
+      <name>server.database.backupEnabled</name>
+      <value>true</value>
+    </property>
+    <property>
+      <name>app.anonymousAccessEnabled</name>
+      <value>true</value>
+    </property>
+    <property>
+      <name>app.anonymousUserRole</name>
+      <value>user</value>
+    </property>
+    <property>
+      <name>app.defaultUserTeam</name>
+      <value>user</value>
+    </property>
+    <property>
+      <name>app.grantConnectionsAccessToAnonymousTeam</name>
+      <value>false</value>
+    </property>
+    <property>
+      <name>app.supportsCustomConnections</name>
+      <value>false</value>
+    </property>
+    <property>
+      <name>app.showReadOnlyConnectionInfo</name>
+      <value>false</value>
+    </property>
+    <property>
+      <name>app.systemVariablesResolvingEnabled</name>
+      <value>false</value>
+    </property>
+    <property>
+      <name>app.forwardProxy</name>
+      <value>false</value>
+    </property>
+    <property>
+      <name>app.publicCredentialsSaveEnabled</name>
+      <value>true</value>
+    </property>
+    <property>
+      <name>app.adminCredentialsSaveEnabled</name>
+      <value>true</value>
+    </property>
+    <property>
+      <name>app.resourceManagerEnabled</name>
+      <value>true</value>
+    </property>
+    <property>
+      <name>app.resourceQuotas.dataExportFileSizeLimit</name>
+      <value>10000000</value>
+    </property>
+    <property>
+      <name>app.resourceQuotas.resourceManagerFileSizeLimit</name>
+      <value>500000</value>
+    </property>
+    <property>
+      <name>app.resourceQuotas.sqlMaxRunningQueries</name>
+      <value>100</value>
+    </property>
+    <property>
+      <name>app.resourceQuotas.sqlResultSetRowsLimit</name>
+      <value>100000</value>
+    </property>
+    <property>
+      <name>app.resourceQuotas.sqlTextPreviewMaxLength</name>
+      <value>4096</value>
+    </property>
+    <property>
+      <name>app.resourceQuotas.sqlBinaryPreviewMaxLength</name>
+      <value>261120</value>
+    </property>
+    <property>
+      <name>app.enabledAuthProviders</name>
+      <value>local</value>
+    </property>
+    <property>
+      <name>app.disabledDrivers</name>
+      <value>sqlite:sqlite_jdbc,h2:h2_embedded,h2:h2_embedded_v2,clickhouse:yandex_clickhouse</value>
+    </property>
+</configuration>
\ No newline at end of file
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/configuration/cloudbeaver-logback.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/configuration/cloudbeaver-logback.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/configuration/cloudbeaver-logback.xml
new file mode 100644
--- /dev/null	(date 1735023256000)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CLOUDBEAVER/configuration/cloudbeaver-logback.xml	(date 1735023256000)
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements.  See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to You under the Apache License, Version 2.0
+  (the "License"); you may not use this file except in compliance with
+  the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<configuration supports_adding_forbidden="true">
+    <property>
+        <name>content</name>
+        <display-name>cloudbeaver-logback.xml template</display-name>
+        <description>This is the jinja template for cloudbeaver  logback.xml file</description>
+        <value/>
+        <property-type>VALUE_FROM_PROPERTY_FILE</property-type>
+        <value-attributes>
+            <property-file-name>cloudbeaver-logback.xml.j2</property-file-name>
+            <property-file-type>xml</property-file-type>
+        </value-attributes>
+        <on-ambari-upgrade add="false" update="true"/>
+    </property>
+</configuration>
\ No newline at end of file

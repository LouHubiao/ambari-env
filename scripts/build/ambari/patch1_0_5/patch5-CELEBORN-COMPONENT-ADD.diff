Subject: [PATCH] feature: 支持celeborn 0.5.3
---
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/properties/stack_packages.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/properties/stack_packages.json b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/properties/stack_packages.json
--- a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/properties/stack_packages.json	(revision 420b251ae350103a4dff2216b3d7c9370ed78032)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/properties/stack_packages.json	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
@@ -686,6 +686,44 @@
             "cloudbeaver"
           ]
         }
+      },
+      "CELEBORN": {
+        "CELEBORN_MASTER": {
+          "STACK-SELECT-PACKAGE": "celeborn",
+          "INSTALL": [
+            "celeborn"
+          ],
+          "PATCH": [
+            "celeborn"
+          ],
+          "STANDARD": [
+            "celeborn"
+          ]
+        },
+        "CELEBORN_WORKER": {
+          "STACK-SELECT-PACKAGE": "celeborn",
+          "INSTALL": [
+            "celeborn"
+          ],
+          "PATCH": [
+            "celeborn"
+          ],
+          "STANDARD": [
+            "celeborn"
+          ]
+        },
+        "CELEBORN_CLIENT": {
+          "STACK-SELECT-PACKAGE": "celeborn",
+          "INSTALL": [
+            "celeborn"
+          ],
+          "PATCH": [
+            "celeborn"
+          ],
+          "STANDARD": [
+            "celeborn"
+          ]
+        }
       }
     },
     "conf-select": {
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/alerts.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/alerts.json b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/alerts.json
new file mode 100644
--- /dev/null	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/alerts.json	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
@@ -0,0 +1,59 @@
+{
+  "CELEBORN": {
+    "service": [],
+    "CELEBORN_MASTER": [
+      {
+        "name": "CELEBORN_MASTER_PROCESS",
+        "label": "celeborn master",
+        "description": "This host-level alert is triggered if the celeborn msater cannot be determined to be up.",
+        "interval": 1,
+        "scope": "HOST",
+        "source": {
+          "type": "PORT",
+          "uri": "{{celeborn-defaults/celeborn.master.port}}",
+          "default_port": 9097,
+          "reporting": {
+            "ok": {
+              "text": "TCP OK - {0:.3f}s response on port {1}"
+            },
+            "warning": {
+              "text": "TCP OK - {0:.3f}s response on port {1}",
+              "value": 1.5
+            },
+            "critical": {
+              "text": "Connection failed: {0} to {1}:{2}",
+              "value": 5
+            }
+          }
+        }
+      }
+    ],
+    "CELEBORN_WORKER": [
+      {
+        "name": "CELEBORN_WORKER_PROCESS",
+        "label": "celeborn worker",
+        "description": "This host-level alert is triggered if the celeborn worker cannot be determined to be up.",
+        "interval": 1,
+        "scope": "HOST",
+        "source": {
+          "type": "PORT",
+          "uri": "{{celeborn-defaults/celeborn.worker.http.port}}",
+          "default_port": 9096,
+          "reporting": {
+            "ok": {
+              "text": "TCP OK - {0:.3f}s response on port {1}"
+            },
+            "warning": {
+              "text": "TCP OK - {0:.3f}s response on port {1}",
+              "value": 1.5
+            },
+            "critical": {
+              "text": "Connection failed: {0} to {1}:{2}",
+              "value": 5
+            }
+          }
+        }
+      }
+    ]
+  }
+}
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/configuration/celeborn-defaults.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/configuration/celeborn-defaults.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/configuration/celeborn-defaults.xml
new file mode 100644
--- /dev/null	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/configuration/celeborn-defaults.xml	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
@@ -0,0 +1,225 @@
+<?xml version="1.0"?>
+<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
+<!--
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+<configuration supports_final="true">
+
+  <property require-input="true">
+    <name>celeborn.master.port</name>
+    <description>celeborn.master.port</description>
+    <value>9097</value>
+    <on-ambari-upgrade add="true"/>
+  </property>
+
+  <property require-input="true">
+    <name>celeborn.master.http.port</name>
+    <description>celeborn.master.http.port</description>
+    <value>9098</value>
+    <on-ambari-upgrade add="true"/>
+  </property>
+
+  <property require-input="true">
+    <name>celeborn.worker.http.port</name>
+    <description>celeborn.worker.http.port</description>
+    <value>9096</value>
+    <on-ambari-upgrade add="true"/>
+  </property>
+
+  <property require-input="true">
+    <name>celeborn.master.ratis.port</name>
+    <description>celeborn.master.ratis.port</description>
+    <value>9872</value>
+    <on-ambari-upgrade add="true"/>
+  </property>
+
+  <property>
+    <name>celeborn.master.ha.ratis.raft.server.storage.dir</name>
+    <display-name>celeborn.master.ha.ratis.raft.server.storage.dir</display-name>
+    <value>/mnt/disk1/celeborn_ratis/</value>
+    <description/>
+    <value-attributes>
+      <type>directory</type>
+      <overridable>false</overridable>
+    </value-attributes>
+    <on-ambari-upgrade add="false"/>
+  </property>
+
+  <property require-input="true">
+    <name>celeborn.worker.storage.dirs</name>
+    <description>If Celeborn workers have local disks and HDFS. Following configs should be added.
+Celeborn will use local disks until local disk become unavailable to gain the best performance.
+Increase Celeborn's off-heap memory if Celeborn write to HDFS.
+If Celeborn workers have local disks, use following config.
+Disk type is HDD by default.
+example: /mnt/disk1:disktype=SSD,/mnt/disk2:disktype=SSD</description>
+    <value>/mnt/disk1</value>
+    <on-ambari-upgrade add="true"/>
+  </property>
+
+  <property require-input="true">
+    <name>celeborn.storage.activeTypes</name>
+    <description># If Celeborn workers don't have local disks. You can use HDFS.
+# Do not set `celeborn.worker.storage.dirs` and use following configs.
+such as: SSD,HDD,HDFS</description>
+    <value>HDFS</value>
+    <on-ambari-upgrade add="true"/>
+  </property>
+
+  <property require-input="true">
+    <name>celeborn.storage.hdfs.dir</name>
+    <description>celeborn.storage.hdfs.dir</description>
+    <value>/celeborn</value>
+    <on-ambari-upgrade add="true"/>
+  </property>
+
+  <property>
+    <name>celeborn.storage.hdfs.kerberos.keytab</name>
+    <description>celeborn.storage.hdfs.kerberos.keytab</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>celeborn.storage.hdfs.kerberos.principal</name>
+    <description># Either principal/keytab or valid TGT cache is required to access kerberized HDFS</description>
+    <property-type>KERBEROS_PRINCIPAL</property-type>
+    <on-ambari-upgrade add="false"/>
+  </property>
+
+
+  <property>
+    <name>celeborn.quota.enabled</name>
+    <description>celeborn.quota.enabled</description>
+    <value>false</value>
+    <value-attributes>
+      <overridable>false</overridable>
+      <type>value-list</type>
+      <entries>
+        <entry>
+          <value>false</value>
+          <label>False</label>
+        </entry>
+        <entry>
+          <value>true</value>
+          <label>True</label>
+        </entry>
+      </entries>
+      <selection-cardinality>1</selection-cardinality>
+    </value-attributes>
+    <on-ambari-upgrade add="false"/>
+  </property>
+    <property>
+        <name>content</name>
+        <description>metrics.properties</description>
+        <value>
+#
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+# used by client and worker to connect to master
+#celeborn.master.endpoints clb-1:9097,clb-2:9097,clb-3:9097
+celeborn.master.endpoints {{celeborn_master_endpoints}}
+
+# used by master nodes to bootstrap, every node should know the topology of whole cluster, for each node,
+# `celeborn.master.ha.node.id` should be unique, and `celeborn.master.ha.node.(id).host` is required.
+
+celeborn.master.ha.enabled  {{celeborn_master_ha_enabled}}
+{{celeborn_master_endpoints_config}}
+
+#celeborn.master.ha.enabled true
+#celeborn.master.ha.node.id 1
+#celeborn.master.ha.node.1.host clb-1
+#celeborn.master.ha.node.1.port 9097
+#celeborn.master.ha.node.1.ratis.port 9872
+#celeborn.master.ha.node.2.host clb-2
+#celeborn.master.ha.node.2.port 9097
+#celeborn.master.ha.node.2.ratis.port 9872
+#celeborn.master.ha.node.3.host clb-3
+#celeborn.master.ha.node.3.port 9097
+#celeborn.master.ha.node.3.ratis.port 9872
+celeborn.master.ha.ratis.raft.server.storage.dir {{celeborn_master_ha_ratis_raft_server_storage_dir}}
+
+celeborn.metrics.enabled true
+# If you want to use HDFS as shuffle storage, make sure that flush buffer size is at least 4MB or larger.
+celeborn.worker.flusher.buffer.size 256k
+
+# If Celeborn workers have local disks and HDFS. Following configs should be added.
+# Celeborn will use local disks until local disk become unavailable to gain the best performance.
+# Increase Celeborn's off-heap memory if Celeborn write to HDFS.
+# If Celeborn workers have local disks, use following config.
+# Disk type is HDD by default.
+#celeborn.worker.storage.dirs /mnt/disk1:disktype=SSD,/mnt/disk2:disktype=SSD
+celeborn.worker.storage.dirs {{celeborn_worker_storage_dirs}}
+
+# If Celeborn workers don't have local disks. You can use HDFS.
+# Do not set `celeborn.worker.storage.dirs` and use following configs.
+celeborn.storage.activeTypes {{celeborn_storage_activeTypes}}
+{% if 'HDFS' in celeborn_storage_activeTypes %}
+celeborn.worker.sortPartition.threads 64
+celeborn.worker.commitFiles.timeout 240s
+celeborn.worker.commitFiles.threads 128
+celeborn.master.slot.assign.policy roundrobin
+celeborn.rpc.askTimeout 240s
+celeborn.worker.flusher.hdfs.buffer.size 4m
+celeborn.storage.hdfs.dir {{celeborn_storage_hdfs_dir}}
+celeborn.worker.replicate.fastFail.duration 240s
+{% endif %}
+
+# If your hosts have disk raid or use lvm, set celeborn.worker.monitor.disk.enabled to false
+celeborn.worker.monitor.disk.enabled false
+
+
+# if you are using Celeborn for flink, these settings will be needed
+celeborn.worker.directMemoryRatioForReadBuffer 0.4
+celeborn.worker.directMemoryRatioToResume 0.6
+# these setting will affect performance.
+# If there is enough off-heap memory, you can try to increase read buffers.
+# Read buffer max memory usage for a data partition is `taskmanager.memory.segment-size * readBuffersMax`
+celeborn.worker.partition.initial.readBuffersMin 512
+celeborn.worker.partition.initial.readBuffersMax 1024
+celeborn.worker.readBuffer.allocationWait 10ms
+# Currently, shuffle partitionSplit is not supported, so you should disable split in celeborn worker side or set `celeborn.client.shuffle.partitionSplit.threshold` to a high value in flink client side.
+celeborn.worker.shuffle.partitionSplit.enabled false
+
+# Either principal/keytab or valid TGT cache is required to access kerberized HDFS
+celeborn.storage.hdfs.kerberos.principal {{celeborn_storage_hdfs_kerberos_principal}}
+celeborn.storage.hdfs.kerberos.keytab {{celeborn_storage_hdfs_kerberos_keytab}}
+
+celeborn.quota.enabled {{celeborn_quota_enabled}}
+celeborn.client.push.replicate.enabled false
+
+        </value>
+        <value-attributes>
+            <type>content</type>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+</configuration>
\ No newline at end of file
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/configuration/celeborn-env.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/configuration/celeborn-env.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/configuration/celeborn-env.xml
new file mode 100644
--- /dev/null	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/configuration/celeborn-env.xml	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
@@ -0,0 +1,148 @@
+<?xml version="1.0"?>
+<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
+<!--
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+<configuration supports_final="true">
+    <property>
+        <name>celeborn_user</name>
+        <display-name>Celeborn User</display-name>
+        <value>celeborn</value>
+        <property-type>USER</property-type>
+        <value-attributes>
+            <type>user</type>
+            <overridable>false</overridable>
+            <user-groups>
+                <property>
+                    <type>cluster-env</type>
+                    <name>user_group</name>
+                </property>
+                <property>
+                    <type>celeborn-env</type>
+                    <name>celeborn_group</name>
+                </property>
+            </user-groups>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>celeborn_group</name>
+        <display-name>Celeborn Group</display-name>
+        <value>hadoop</value>
+        <property-type>GROUP</property-type>
+        <description>celeborn group</description>
+        <value-attributes>
+            <type>user</type>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>celeborn_log_dir</name>
+        <display-name>Celeborn Log directory</display-name>
+        <value>/var/log/celeborn</value>
+        <description>Celeborn Log Dir</description>
+        <value-attributes>
+            <type>directory</type>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+    <property>
+        <name>celeborn_pid_dir</name>
+        <display-name>Celeborn PID directory</display-name>
+        <value>/var/run/celeborn</value>
+        <description>Celeborn Log Dir</description>
+        <value-attributes>
+            <type>directory</type>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+
+   <property>
+    <name>celeborn_keytab</name>
+    <description>Celeborn keytab path</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>celeborn_principal</name>
+    <description>Celeborn principal</description>
+    <property-type>KERBEROS_PRINCIPAL</property-type>
+    <on-ambari-upgrade add="false"/>
+  </property>
+
+
+    <!-- celeborn-env.sh -->
+    <property>
+        <name>content</name>
+        <description>This is the jinja template for celeborn-env.sh file</description>
+        <value>
+#!/usr/bin/env bash
+#
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+# - CELEBORN_MASTER_MEMORY, to set how much total memory of master (e.g. 1000m, 2g)
+# - CELEBORN_WORKER_MEMORY, to set how much total memory of workers (e.g. 1000m, 2g)
+# - CELEBORN_WORKER_OFFHEAP_MEMORY, to set how much total off-heap memory of workers (e.g. 1000m, 2g)
+# - CELEBORN_MASTER_JAVA_OPTS
+# - CELEBORN_WORKER_JAVA_OPTS
+# - CELEBORN_PID_DIR
+# - CELEBORN_LOG_DIR
+# - CELEBORN_PREFER_JEMALLOC, to enable jemalloc memory allocator
+# - CELEBORN_JEMALLOC_PATH, to set jemalloc library path
+
+# Example:
+# CELEBORN_MASTER_MEMORY=2g
+# CELEBORN_WORKER_MEMORY=2g
+# CELEBORN_WORKER_OFFHEAP_MEMORY=4g
+# CELEBORN_WORKER_JAVA_OPTS="-XX:-PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xloggc:gc-worker.out -Dio.netty.leakDetectionLevel=advanced"
+# CELEBORN_MASTER_JAVA_OPTS="-XX:-PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xloggc:gc-master.out -Dio.netty.leakDetectionLevel=advanced"
+# CELEBORN_PID_DIR="$CELEBORN_HOME/pids"
+# CELEBORN_LOG_DIR="$CELEBORN_HOME/logs"
+# CELEBORN_PREFER_JEMALLOC="true"
+# CELEBORN_JEMALLOC_PATH="/path/to/libjemalloc.so"
+
+
+CELEBORN_PID_DIR={{celeborn_pid_dir}}
+CELEBORN_LOG_DIR={{celeborn_log_dir}}
+
+CELEBORN_MASTER_MEMORY=1g
+CELEBORN_WORKER_MEMORY=1g
+CELEBORN_WORKER_OFFHEAP_MEMORY=2g
+
+export HADOOP_CONF_DIR=/etc/hadoop/conf
+        </value>
+        <value-attributes>
+            <type>content</type>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+</configuration>
\ No newline at end of file
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/configuration/celeborn-log4j.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/configuration/celeborn-log4j.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/configuration/celeborn-log4j.xml
new file mode 100644
--- /dev/null	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/configuration/celeborn-log4j.xml	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
@@ -0,0 +1,105 @@
+<?xml version="1.0"?>
+<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
+<!--
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+<configuration supports_final="true">
+    <property>
+        <name>content</name>
+        <description>log4j2.xml</description>
+        <value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the "License"); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<!--
+  ~ Extra logging related to initialization of Log4j.
+  ~ Set to debug or trace if log4j initialization is failing.
+  -->
+<Configuration status="INFO">
+    <Appenders>
+        <Console name="stdout" target="SYSTEM_OUT">
+            <!--
+              ~ In the pattern layout configuration below, we specify an explicit `%ex` conversion
+              ~ pattern for logging Throwables. If this was omitted, then (by default) Log4J would
+              ~ implicitly add an `%xEx` conversion pattern which logs stacktraces with additional
+              ~ class packaging information. That extra information can sometimes add a substantial
+              ~ performance overhead, so we disable it in our default logging config.
+              -->
+            <PatternLayout pattern="%d{yy/MM/dd HH:mm:ss,SSS} %p [%t] %c{1}: %m%n%ex"/>
+        </Console>
+        <RollingRandomAccessFile name="file" fileName="${env:CELEBORN_LOG_DIR}/celeborn.log"
+                                 filePattern="${env:CELEBORN_LOG_DIR}/celeborn.log.%d-%i">
+            <PatternLayout pattern="%d{yy/MM/dd HH:mm:ss,SSS} %p [%t] %c{1}: %m%n%ex"/>
+            <Policies>
+                <SizeBasedTriggeringPolicy size="200 MB"/>
+            </Policies>
+            <DefaultRolloverStrategy max="7">
+                <Delete basePath="${env:CELEBORN_LOG_DIR}" maxDepth="1">
+                    <IfFileName glob="celeborn.log*">
+                        <IfAny>
+                            <IfAccumulatedFileSize exceeds="1 GB" />
+                            <IfAccumulatedFileCount exceeds="10" />
+                        </IfAny>
+                    </IfFileName>
+                </Delete>
+            </DefaultRolloverStrategy>
+        </RollingRandomAccessFile>
+    </Appenders>
+
+    <Loggers>
+        <Root level="INFO">
+            <!--
+              ~ Here are appender templates, keep the appender as your need.
+              -->
+            <AppenderRef ref="stdout"/>
+            <AppenderRef ref="file"/>
+        </Root>
+        <Logger name="org.apache.hadoop.hdfs" level="WARN" additivity="false">
+            <Appender-ref ref="stdout" level="WARN" />
+            <Appender-ref ref="file" level="WARN"/>
+        </Logger>
+        <Logger name="org.apache.ratis.server.RaftServerConfigKeys" level="WARN" additivity="false">
+             <Appender-ref ref="stdout" level="WARN" />
+             <Appender-ref ref="file" level="WARN"/>
+        </Logger>
+    </Loggers>
+</Configuration>
+
+]]>
+        </value>
+        <value-attributes>
+            <type>content</type>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+</configuration>
\ No newline at end of file
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/configuration/celeborn-metrics-properties.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/configuration/celeborn-metrics-properties.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/configuration/celeborn-metrics-properties.xml
new file mode 100644
--- /dev/null	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/configuration/celeborn-metrics-properties.xml	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
@@ -0,0 +1,52 @@
+<?xml version="1.0"?>
+<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
+<!--
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+<configuration supports_final="true">
+    <property>
+        <name>content</name>
+        <description>metrics.properties</description>
+        <value>
+#
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+*.sink.prometheusServlet.class=org.apache.celeborn.common.metrics.sink.PrometheusServlet
+
+        </value>
+        <value-attributes>
+            <type>content</type>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+</configuration>
\ No newline at end of file
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/configuration/celeborn-quota.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/configuration/celeborn-quota.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/configuration/celeborn-quota.xml
new file mode 100644
--- /dev/null	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/configuration/celeborn-quota.xml	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
@@ -0,0 +1,66 @@
+<?xml version="1.0"?>
+<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
+<!--
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+<configuration supports_final="true">
+    <property>
+        <name>content</name>
+        <description>quota.yaml</description>
+        <value>
+#
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+-  tenantId: AAA
+   name: Tom
+   quota:
+     diskBytesWritten: 100m
+     diskFileCount: 200
+     hdfsBytesWritten: 200m
+     hdfsFileCount: 100
+
+-  tenantId: BBB
+   name: Jerry
+   quota:
+     diskBytesWritten: 1G
+     diskFileCount: 1000
+     hdfsBytesWritten: 3G
+     hdfsFileCount: 200
+
+        </value>
+        <value-attributes>
+            <type>content</type>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+</configuration>
\ No newline at end of file
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/configuration/celeborn-ratis-log4j-properties.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/configuration/celeborn-ratis-log4j-properties.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/configuration/celeborn-ratis-log4j-properties.xml
new file mode 100644
--- /dev/null	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/configuration/celeborn-ratis-log4j-properties.xml	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
@@ -0,0 +1,66 @@
+<?xml version="1.0"?>
+<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
+<!--
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+<configuration supports_final="true">
+    <property>
+        <name>content</name>
+        <description>quota.yaml</description>
+        <value>
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# These properties may be overridden by system properties. log4j gives system properties
+# a higher precedence than locally defined variables.
+log4j.rootLogger=INFO, SHELL_LOGGER
+
+log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
+log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
+log4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} [%t] %-5p %c{2} (%F:%M) - %m%n
+
+# SHELL Logger
+log4j.appender.SHELL_LOGGER=org.apache.log4j.RollingFileAppender
+log4j.appender.SHELL_LOGGER.File=${ratis.shell.logs.dir}/celeborn-ratis-shell.log
+log4j.appender.SHELL_LOGGER.MaxFileSize=100MB
+log4j.appender.SHELL_LOGGER.MaxBackupIndex=10
+log4j.appender.SHELL_LOGGER.layout=org.apache.log4j.PatternLayout
+log4j.appender.SHELL_LOGGER.layout.ConversionPattern=%d{ISO8601} [%t] %-5p %c{2} (%F:%M) - %m%n
+
+
+        </value>
+        <value-attributes>
+            <type>content</type>
+        </value-attributes>
+        <on-ambari-upgrade add="true"/>
+    </property>
+</configuration>
\ No newline at end of file
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/kerberos.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/kerberos.json b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/kerberos.json
new file mode 100644
--- /dev/null	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/kerberos.json	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
@@ -0,0 +1,50 @@
+{
+  "services": [
+    {
+      "name": "CELEBORN",
+      "identities": [
+        {
+          "name": "celeborn_smokeuser",
+          "reference": "/smokeuser"
+        },
+        {
+          "name": "celeborn_user",
+          "principal": {
+            "value": "${celeborn-env/celeborn_user}${principal_suffix}@${realm}",
+            "type" : "user",
+            "local_username" : "${celeborn-env/celeborn_user}",
+            "configuration": "celeborn-env/celeborn_principal"
+          },
+          "keytab": {
+            "file": "${keytab_dir}/celeborn.headless.keytab",
+            "owner": {
+              "name": "${celeborn-env/celeborn_user}",
+              "access": "r"
+            },
+            "group": {
+              "name": "${cluster-env/user_group}",
+              "access": "r"
+            },
+            "configuration": "celeborn-env/celeborn_keytab"
+          }
+        }
+      ],
+      "configurations": [
+        {
+          "celeborn-defaults": {
+            "celeborn.storage.hdfs.kerberos.keytab": "${keytab_dir}/celeborn.headless.keytab",
+            "celeborn.storage.hdfs.kerberos.principal": "${celeborn-env/celeborn_user}${principal_suffix}@${realm}"
+          }
+        }
+      ],
+      "components": [
+        {
+          "name": "CELEBORN_MASTER"
+        },
+        {
+          "name": "CELEBORN_WORKER"
+        }
+      ]
+    }
+  ]
+}
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/metainfo.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/metainfo.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/metainfo.xml
new file mode 100644
--- /dev/null	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/metainfo.xml	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
@@ -0,0 +1,115 @@
+<?xml version="1.0"?>
+<!--Licensed to the Apache Software Foundation (ASF) under one
+* or more contributor license agreements.  See the NOTICE file
+* distributed with this work for additional information
+* regarding copyright ownership.  The ASF licenses this file
+* to you under the Apache License, Version 2.0 (the
+* "License"); you may not use this file except in compliance
+* with the License.  You may obtain a copy of the License at
+*
+*     http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+-->
+<metainfo>
+  <schemaVersion>2.0</schemaVersion>
+  <services>
+    <service>
+      <name>CELEBORN</name>
+      <displayName>Celeborn</displayName>
+      <comment>Component CELEBORN Integrated By JaneTTR . For commercial use, please contact mail: 3832514048@qq.com</comment>
+      <version>0.5.3</version>
+      <components>
+        <component>
+          <name>CELEBORN_MASTER</name>
+          <displayName>Celeborn Master</displayName>
+          <category>MASTER</category>
+          <cardinality>1+</cardinality>
+          <versionAdvertised>true</versionAdvertised>
+          <commandScript>
+            <script>scripts/master.py</script>
+            <scriptType>PYTHON</scriptType>
+            <timeout>600</timeout>
+          </commandScript>
+          <logs>
+            <log>
+              <logId>celeborn_master</logId>
+              <primary>true</primary>
+            </log>
+          </logs>
+        </component>
+
+        <component>
+          <name>CELEBORN_WORKER</name>
+          <displayName>Celeborn Worker</displayName>
+          <category>SLAVE</category>
+          <cardinality>1+</cardinality>
+          <versionAdvertised>true</versionAdvertised>
+          <commandScript>
+            <script>scripts/worker.py</script>
+            <scriptType>PYTHON</scriptType>
+          </commandScript>
+          <logs>
+            <log>
+              <logId>celeborn_worker</logId>
+              <primary>true</primary>
+            </log>
+          </logs>
+        </component>
+
+        <component>
+          <name>CELEBORN_CLIENT</name>
+          <displayName>Celeborn Client</displayName>
+          <category>CLIENT</category>
+          <cardinality>ALL</cardinality>
+          <versionAdvertised>true</versionAdvertised>
+          <commandScript>
+            <script>scripts/celeborn_client.py</script>
+            <scriptType>PYTHON</scriptType>
+            <timeout>600</timeout>
+          </commandScript>
+        </component>
+
+      </components>
+
+      <configuration-dependencies>
+        <config-type>celeborn-env</config-type>
+        <config-type>celeborn-defaults</config-type>
+        <config-type>celeborn-log4j</config-type>
+        <config-type>celeborn-metrics-properties</config-type>
+        <config-type>cceleborn-quota</config-type>
+        <config-type>celeborn-ratis-log4j-properties</config-type>
+      </configuration-dependencies>
+
+      <commandScript>
+        <script>scripts/service_check.py</script>
+        <scriptType>PYTHON</scriptType>
+        <timeout>300</timeout>
+      </commandScript>
+
+      <requiredServices>
+        <service>HDFS</service>
+      </requiredServices>
+
+
+      <restartRequiredAfterChange>true</restartRequiredAfterChange>
+
+      <osSpecifics>
+        <osSpecific>
+          <osFamily>any</osFamily>
+          <packages>
+            <package>
+              <name>celeborn_${stack_version}</name>
+            </package>
+          </packages>
+        </osSpecific>
+      </osSpecifics>
+
+    </service>
+  </services>
+</metainfo>
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/celeborn.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/celeborn.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/celeborn.py
new file mode 100644
--- /dev/null	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/celeborn.py	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
@@ -0,0 +1,130 @@
+#!/usr/bin/env python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+import os
+import sys
+from resource_management.libraries.script.script import Script
+from resource_management.libraries.resources.xml_config import XmlConfig
+from resource_management.libraries.resources.template_config import TemplateConfig
+from resource_management.libraries.functions.format import format
+from resource_management.libraries.functions import lzo_utils
+from resource_management.libraries.functions.default import default
+from resource_management.libraries.functions.generate_logfeeder_input_config import generate_logfeeder_input_config
+from resource_management.core.source import Template, InlineTemplate
+from resource_management.core.resources import Package
+from resource_management.core.resources.service import ServiceConfig
+from resource_management.core.resources.system import Directory, Execute, File, Link
+from ambari_commons.os_family_impl import OsFamilyFuncImpl, OsFamilyImpl
+from ambari_commons import OSConst
+from resource_management.libraries.functions.constants import StackFeature
+from resource_management.libraries.functions.stack_features import check_stack_feature
+
+
+# name is 'master' or 'regionserver' or 'queryserver' or 'client'
+@OsFamilyFuncImpl(os_family=OsFamilyImpl.DEFAULT)
+def celeborn(name=None):
+    import params
+    import status_params
+
+    Directory([status_params.celeborn_pid_dir, params.celeborn_master_ha_ratis_raft_server_storage_dir],
+              owner=params.celeborn_user,
+              group=params.celeborn_group,
+              mode=0o775,
+              create_parents=True
+              )
+
+    Directory([params.celeborn_log_dir],
+              owner=params.celeborn_user,
+              group=params.celeborn_group,
+              mode=0o777,
+              create_parents=True
+              )
+    Link(os.path.join(params.celeborn_home, "logs"), action="delete")
+    Link(os.path.join(params.celeborn_home, "logs"), to=params.celeborn_log_dir)
+
+    # create celeborn-defaults.conf in celeborn install dir
+    File(os.path.join(params.celeborn_conf_dir, 'celeborn-defaults.conf'),
+         owner=params.celeborn_user,
+         group=params.celeborn_group,
+         content=InlineTemplate(params.celeborn_defaults_conf),
+         mode=0o644,
+         )
+
+    # create celeborn-env.sh in celeborn install dir
+    File(os.path.join(params.celeborn_conf_dir, 'celeborn-env.sh'),
+         owner=params.celeborn_user,
+         group=params.celeborn_group,
+         content=InlineTemplate(params.celeborn_env_sh),
+         mode=0o775,
+         )
+
+    # create log4j.xml celeborn install dir
+    File(os.path.join(params.celeborn_conf_dir, 'log4j2.xml'),
+         owner=params.celeborn_user,
+         group=params.celeborn_group,
+         content=InlineTemplate(params.celeborn_log4j_xml),
+         mode=0o644,
+         )
+
+    # create metrics.properties celeborn install dir
+    File(os.path.join(params.celeborn_conf_dir, 'metrics.properties'),
+         owner=params.celeborn_user,
+         group=params.celeborn_group,
+         content=InlineTemplate(params.celeborn_metrics_properties),
+         mode=0o644,
+         )
+
+    # quota.yaml
+    if params.celeborn_quota_enabled:
+        File(os.path.join(params.celeborn_conf_dir, 'quota.yaml'),
+             owner=params.celeborn_user,
+             group=params.celeborn_group,
+             content=InlineTemplate(params.celeborn_quota_xml),
+             mode=0o644,
+             )
+
+        # ratis-log4j.properties
+    File(os.path.join(params.celeborn_conf_dir, 'ratis-log4j.properties'),
+         owner=params.celeborn_user,
+         group=params.celeborn_group,
+         content=InlineTemplate(params.celeborn_ratis_log4j_properties),
+         mode=0o644,
+         )
+
+    # hostss
+    File(format("{celeborn_conf_dir}/hosts"),
+         owner=params.celeborn_user,
+         group=params.celeborn_group,
+         mode=0o644,
+         content=Template('hosts.j2', conf_dir=params.celeborn_conf_dir)
+         )
+
+    # hdfs dir
+    params.HdfsResource(params.celeborn_hdfs_user_dir,
+                        type="directory",
+                        action="create_on_execute",
+                        owner=params.celeborn_user,
+                        mode=0o775
+                        )
+    params.HdfsResource(params.celeborn_storage_hdfs_dir,
+                        type="directory",
+                        action="create_on_execute",
+                        owner=params.celeborn_user,
+                        mode=0o775
+                        )
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/celeborn_client.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/celeborn_client.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/celeborn_client.py
new file mode 100644
--- /dev/null	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/celeborn_client.py	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
@@ -0,0 +1,41 @@
+#!/usr/bin/env python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+
+from resource_management.libraries.script.script import Script
+from resource_management.core.exceptions import ClientComponentHasNoStatus
+from celeborn import celeborn
+
+
+class CelebornClient(Script):
+    def install(self, env):
+        self.install_packages(env)
+        self.configure(env)
+
+    def configure(self, env, upgrade_type=None, config_dir=None):
+        import params
+        env.set_params(params)
+        celeborn(name="client")
+
+    def status(self, env):
+        raise ClientComponentHasNoStatus()
+
+
+if __name__ == "__main__":
+    CelebornClient().execute()
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/celeborn_service.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/celeborn_service.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/celeborn_service.py
new file mode 100644
--- /dev/null	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/celeborn_service.py	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
@@ -0,0 +1,93 @@
+#!/usr/bin/env python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+
+# Python Imports
+import os
+import time
+
+# Ambari Commons & Resource Management Imports
+from ambari_commons.constants import UPGRADE_TYPE_ROLLING
+from resource_management.core import shell
+from resource_management.core import utils
+from resource_management.core.exceptions import ComponentIsNotRunning, Fail
+from resource_management.core.logger import Logger
+from resource_management.core.resources.system import File, Execute
+from resource_management.core.shell import as_user, quote_bash_args
+from resource_management.libraries.functions import get_user_call_output
+from resource_management.libraries.functions import StackFeature
+from resource_management.libraries.functions.check_process_status import (
+    check_process_status,
+)
+from resource_management.libraries.functions.decorator import retry
+from resource_management.libraries.functions.format import format
+from resource_management.libraries.functions.show_logs import show_logs
+from resource_management.libraries.functions.stack_features import check_stack_feature
+
+
+def celeborn_service(name, action="start", upgrade_type=None):
+    import params
+    import status_params
+
+    if name == "master":
+        pid_file = status_params.celeborn_master_pid_file
+        cmd_start = format("{celeborn_home}/sbin/start-master.sh")
+        cmd_stop = format("{celeborn_home}/sbin/stop-master.sh")
+    elif name == "worker":
+        pid_file = status_params.celeborn_worker_pid_file
+        cmd_start = format("{celeborn_home}/sbin/start-worker.sh")
+        cmd_stop = format("{celeborn_home}/sbin/stop-worker.sh")
+
+    pid = get_user_call_output.get_user_call_output(
+        format("cat {pid_file}"), user=params.celeborn_user, is_checked_call=False
+    )[1]
+    process_id_exists_command = format(
+        "ls {pid_file} >/dev/null 2>&1 && ps -p {pid} >/dev/null 2>&1"
+    )
+
+    if action == "start":
+        daemon_cmd = cmd_start
+        Execute(
+            daemon_cmd,
+            user=params.celeborn_user,
+            environment={
+                "HADOOP_HOME": params.hadoop_home,
+                "HADOOP_CONF_DIR": params.hadoop_conf_dir,
+                "JAVA_HOME": params.java64_home,
+            },
+            path=params.execute_path,
+            not_if=process_id_exists_command,
+        )
+
+    elif action == "stop":
+        daemon_cmd = cmd_stop
+        hadoop_home = params.hadoop_home
+
+        Execute(
+            daemon_cmd,
+            user=params.celeborn_user,
+            environment={
+                "HADOOP_HOME": params.hadoop_home,
+                "HADOOP_CONF_DIR": params.hadoop_conf_dir,
+                "JAVA_HOME": params.java64_home,
+            },
+            path=params.execute_path,
+        )
+
+        File(pid_file, action="delete")
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/master.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/master.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/master.py
new file mode 100644
--- /dev/null	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/master.py	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
@@ -0,0 +1,68 @@
+#!/usr/bin/python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+
+import os
+from resource_management import *
+from resource_management.core import sudo
+from resource_management.libraries.functions import check_process_status
+import time
+from celeborn import celeborn
+from celeborn_service import celeborn_service
+
+
+class CelebornMaster(Script):
+    def install(self, env):
+        self.install_packages(env)
+
+    def configure(self, env, upgrade_type=None, config_dir=None):
+        import params
+        env.set_params(params)
+        celeborn(name='master')
+
+    def start(self, env, upgrade_type=None):
+        import params
+        env.set_params(params)
+        self.configure(env)
+        celeborn_service('master', action='start')
+
+    def stop(self, env, upgrade_type=None):
+        import params
+        env.set_params(params)
+        celeborn_service('master', action='stop')
+
+    def status(self, env):
+        import status_params
+        env.set_params(status_params)
+        check_process_status(status_params.celeborn_master_pid_file)
+
+    def get_log_folder(self):
+      import params
+      return params.celeborn_log_dir
+
+    def get_user(self):
+        import params
+        return params.celeborn_user
+
+    def get_pid_files(self):
+        import status_params
+        return [status_params.celeborn_master_pid_file]
+
+if __name__ == "__main__":
+    CelebornMaster().execute()
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/params.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/params.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/params.py
new file mode 100644
--- /dev/null	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/params.py	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
@@ -0,0 +1,269 @@
+#!/usr/bin/env python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+
+import socket
+import os
+
+from ambari_commons.constants import AMBARI_SUDO_BINARY
+from resource_management import *
+from resource_management.libraries.functions.stack_features import check_stack_feature
+from resource_management.libraries.functions.constants import StackFeature
+from resource_management.libraries.functions import conf_select, stack_select
+from resource_management.libraries.functions.version import (
+    format_stack_version,
+    get_major_version,
+)
+from resource_management.libraries.functions.copy_tarball import (
+    get_sysprep_skip_copy_tarballs_hdfs,
+)
+from resource_management.libraries.functions.format import format
+from resource_management.libraries.functions.default import default
+from resource_management.libraries.functions import get_kinit_path
+from resource_management.libraries.functions.get_not_managed_resources import (
+    get_not_managed_resources,
+)
+from resource_management.libraries.resources.hdfs_resource import HdfsResource
+from resource_management.libraries.script.script import Script
+from resource_management.libraries.functions.copy_tarball import get_current_version
+from resource_management.libraries.functions.stack_features import (
+    check_stack_feature,
+    get_stack_feature_version,
+)
+from resource_management.libraries.functions import StackFeature
+
+config = Script.get_config()
+
+java_home = config["ambariLevelParams"]["java_home"]
+ambari_java_home = default("/ambariLevelParams/ambari_java_home", None)
+# not supporting 32 bit jdk.
+java64_home = java_home
+stack_root = Script.get_stack_root()
+
+config = Script.get_config()
+tmp_dir = Script.get_tmp_dir()
+sudo = AMBARI_SUDO_BINARY
+fqdn = socket.getfqdn().lower()
+
+retryAble = default("/commandParams/command_retry_enabled", False)
+
+cluster_name = config["clusterName"]
+stack_name = default("/clusterLevelParams/stack_name", None)
+stack_root = Script.get_stack_root()
+# 3.2
+stack_version_unformatted = config["clusterLevelParams"]["stack_version"]
+# 3.2.0.0
+stack_version_formatted = format_stack_version(stack_version_unformatted)
+# 3.2
+major_stack_version = get_major_version(stack_version_formatted)
+
+# 3.2.1.0-001
+effective_version = get_current_version(service="GLUTEN")
+
+sysprep_skip_copy_tarballs_hdfs = get_sysprep_skip_copy_tarballs_hdfs()
+
+# New Cluster Stack Version that is defined during the RESTART of a Stack Upgrade
+version = default("/commandParams/version", None)
+
+hadoop_conf_dir = conf_select.get_hadoop_conf_dir()
+hadoop_bin_dir = stack_select.get_hadoop_dir("bin")
+
+if stack_version_formatted and check_stack_feature(
+        StackFeature.ROLLING_UPGRADE, stack_version_formatted
+):
+    hadoop_home = stack_select.get_hadoop_dir("home")
+
+hdfs_user = config["configurations"]["hadoop-env"]["hdfs_user"]
+hdfs_principal_name = config["configurations"]["hadoop-env"]["hdfs_principal_name"]
+hdfs_user_keytab = config["configurations"]["hadoop-env"]["hdfs_user_keytab"]
+user_group = config["configurations"]["cluster-env"]["user_group"]
+
+execute_path = os.environ["PATH"] + os.pathsep + hadoop_bin_dir
+
+component_directory = "celeborn"
+celeborn_home = format("{stack_root}/current/{component_directory}")
+celeborn_conf_dir = format("{stack_root}/current/{component_directory}/conf")
+
+celeborn_user = config["configurations"]["celeborn-env"]["celeborn_user"]
+celeborn_group = config["configurations"]["celeborn-env"]["celeborn_group"]
+celeborn_log_dir = config["configurations"]["celeborn-env"]["celeborn_log_dir"]
+celeborn_pid_dir = config["configurations"]["celeborn-env"]["celeborn_pid_dir"]
+
+# celeborn masters address
+celeborn_masters = config["clusterHostInfo"]["celeborn_master_hosts"]
+celeborn_masters_str = "\n".join(celeborn_masters)
+
+# current hostname
+hostname = config["agentLevelParams"]["hostname"]
+
+celeborn_master_ha_enabled = False
+celeborn_master_port = config["configurations"]["celeborn-defaults"][
+    "celeborn.master.port"
+]
+celeborn_master_ratis_port = config["configurations"]["celeborn-defaults"][
+    "celeborn.master.ratis.port"
+]
+
+celeborn_master_endpoints = ""
+celeborn_master_endpoints_config = ""
+# get comma separated lists of celeborn_master_endpoints hosts from celeborn_masters
+if len(celeborn_masters) > 0:
+    if len(celeborn_masters) == 1:
+        host = celeborn_masters[0]
+        celeborn_master_endpoints_config = format(
+            "celeborn.master.host {host}\nceleborn.master.port {celeborn_master_port}"
+        )
+        celeborn_master_endpoints = "{0}:{1}".format(host, celeborn_master_port)
+
+    if len(celeborn_masters) > 1:
+        index = 0
+        for host in celeborn_masters:
+            celeborn_master_host = host
+            if celeborn_master_port is not None:
+                celeborn_master_host = host + ":" + str(celeborn_master_port)
+
+            celeborn_master_endpoints += celeborn_master_host
+
+            if host == hostname:
+                celeborn_master_endpoints_config += format(
+                    "celeborn.master.ha.node.id {index}\n"
+                )
+            celeborn_master_endpoints_config += format(
+                "celeborn.master.ha.node.{index}.host {host} \nceleborn.master.ha.node.{index}.port {celeborn_master_port} \nceleborn.master.ha.node.{index}.ratis.port {celeborn_master_ratis_port}"
+            )
+            index += 1
+            if index < len(celeborn_masters):
+                celeborn_master_endpoints += ","
+                celeborn_master_endpoints_config += "\n"
+                celeborn_master_ha_enabled = True
+
+print("celeborn_master_endpoints: {0}".format(celeborn_master_endpoints))
+print("celeborn_master_endpoints_config: {0}".format(celeborn_master_endpoints_config))
+
+# celeborn.master.ha.ratis.raft.server.storage.dir
+celeborn_master_ha_ratis_raft_server_storage_dir = config["configurations"][
+    "celeborn-defaults"
+]["celeborn.master.ha.ratis.raft.server.storage.dir"]
+if celeborn_master_ha_ratis_raft_server_storage_dir is None:
+    celeborn_master_ha_ratis_raft_server_storage_dir = (
+        "/usr/hdp/current/celeborn/celeborn_ratis"
+    )
+celeborn_master_ha_ratis_raft_server_storage_dir_formatted = False
+if (
+        os.path.exists(celeborn_master_ha_ratis_raft_server_storage_dir)
+        and os.path.isdir(celeborn_master_ha_ratis_raft_server_storage_dir)
+        and len(os.listdir(celeborn_master_ha_ratis_raft_server_storage_dir)) > 0
+):
+    celeborn_master_ha_ratis_raft_server_storage_dir_formatted = True
+
+# celeborn workers address
+celeborn_workers = config["clusterHostInfo"]["celeborn_worker_hosts"]
+celeborn_workers_str = "\n".join(celeborn_workers)
+celeborn_worker_storage_dirs = config["configurations"]["celeborn-defaults"][
+    "celeborn.worker.storage.dirs"
+]
+
+# hdfs store
+celeborn_storage_activeTypes = config["configurations"]["celeborn-defaults"][
+    "celeborn.storage.activeTypes"
+]
+
+# Find current stack and version to push agent files to
+stack_name = default("/hostLevelParams/stack_name", None)
+stack_version = config["hostLevelParams"]["stack_version"]
+
+# hadoop params
+namenode_address = None
+if "dfs.namenode.rpc-address" in config["configurations"]["hdfs-site"]:
+    namenode_rpcaddress = config["configurations"]["hdfs-site"][
+        "dfs.namenode.rpc-address"
+    ]
+    namenode_address = format("hdfs://{namenode_rpcaddress}")
+else:
+    namenode_address = config["configurations"]["core-site"]["fs.defaultFS"]
+
+# celeborn underfs address
+celeborn_storage_hdfs_dir = (
+        namenode_address
+        + config["configurations"]["celeborn-defaults"]["celeborn.storage.hdfs.dir"]
+)
+
+host_name = config["agentLevelParams"]["hostname"]
+
+celeborn_hdfs_user_dir = format("/user/{celeborn_user}")
+smoke_user = config["configurations"]["cluster-env"]["smokeuser"]
+celeborn_authentication = "SIMPLE"
+
+# security_enabled
+security_enabled = default("/configurations/cluster-env/security_enabled", None)
+kinit_path_local = get_kinit_path(
+    default("/configurations/kerberos-env/executable_search_paths", None)
+)
+
+# if security_enabled:
+#     celeborn_storage_hdfs_kerberos_principal = config["configurations"][
+#         "celeborn-defaults"
+#     ]["celeborn.storage.hdfs.kerberos.principal"]
+#     celeborn_storage_hdfs_kerberos_keytab = config["configurations"][
+#         "celeborn-defaults"
+#     ]["celeborn.storage.hdfs.kerberos.keytab"]
+
+# for create_hdfs_directory
+default_fs = config["configurations"]["core-site"]["fs.defaultFS"]
+hdfs_site = config["configurations"]["hdfs-site"]
+hdfs_resource_ignore_file = "/var/lib/ambari-agent/data/.hdfs_resource_ignore"
+
+dfs_type = default("/clusterLevelParams/dfs_type", "")
+
+import functools
+
+# create partial functions with common arguments for every HdfsResource call
+# to create/delete hdfs directory/file/copyfromlocal we need to call params.HdfsResource in code
+HdfsResource = functools.partial(
+    HdfsResource,
+    user=hdfs_user,
+    hdfs_resource_ignore_file=hdfs_resource_ignore_file,
+    security_enabled=security_enabled,
+    keytab=hdfs_user_keytab,
+    kinit_path_local=kinit_path_local,
+    hadoop_bin_dir=hadoop_bin_dir,
+    hadoop_conf_dir=hadoop_conf_dir,
+    principal_name=hdfs_principal_name,
+    hdfs_site=hdfs_site,
+    default_fs=default_fs,
+    immutable_paths=get_not_managed_resources(),
+    dfs_type=dfs_type
+)
+
+celeborn_env_sh = config["configurations"]["celeborn-env"]["content"]
+celeborn_defaults_conf = config["configurations"]["celeborn-defaults"]["content"]
+celeborn_log4j_xml = config["configurations"]["celeborn-log4j"]["content"]
+celeborn_metrics_properties = config["configurations"]["celeborn-metrics-properties"][
+    "content"
+]
+celeborn_quota_xml = config["configurations"]["celeborn-quota"]["content"]
+celeborn_ratis_log4j_properties = config["configurations"][
+    "celeborn-ratis-log4j-properties"
+]["content"]
+
+celeborn_test_cmd = ""
+
+celeborn_quota_enabled = config["configurations"]["celeborn-defaults"][
+    "celeborn.quota.enabled"
+]
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/service_check.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/service_check.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/service_check.py
new file mode 100644
--- /dev/null	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/service_check.py	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
@@ -0,0 +1,43 @@
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agree in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+"""
+
+import subprocess
+import time
+import os
+
+from resource_management.core.exceptions import Fail
+from resource_management.libraries.script.script import Script
+from resource_management.libraries.functions.format import format
+from resource_management.core.resources.system import Execute
+from resource_management.core.logger import Logger
+
+
+CHECK_COMMAND_TIMEOUT_DEFAULT = 300.0
+
+
+class CelebornServiceCheck(Script):
+    def service_check(self, env):
+        import params
+
+        env.set_params(params)
+
+        Execute(params.celeborn_test_cmd, user=params.celeborn_user)
+
+
+if __name__ == "__main__":
+    CelebornServiceCheck().execute()
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/status_params.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/status_params.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/status_params.py
new file mode 100644
--- /dev/null	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/status_params.py	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
@@ -0,0 +1,41 @@
+#!/usr/bin/env python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+
+from resource_management.libraries.script import Script
+from resource_management.libraries.functions.format import format
+from resource_management.libraries.functions.default import default
+from resource_management.libraries.functions.version import format_stack_version
+from resource_management.libraries.functions.stack_features import check_stack_feature
+from resource_management.libraries.functions import StackFeature
+
+config = Script.get_config()
+tmp_dir = Script.get_tmp_dir()
+
+
+stack_name = default("/clusterLevelParams/stack_name", None)
+stack_version_unformatted = config["clusterLevelParams"]["stack_version"]
+stack_version_formatted = format_stack_version(stack_version_unformatted)
+celeborn_pid_dir = config["configurations"]["celeborn-env"]["celeborn_pid_dir"]
+celeborn_master_pid_file = format(
+    "{celeborn_pid_dir}/celeborn-celeborn-org.apache.celeborn.service.deploy.master.Master-1.pid"
+)
+celeborn_worker_pid_file = format(
+    "{celeborn_pid_dir}/celeborn-celeborn-org.apache.celeborn.service.deploy.worker.Worker-1.pid"
+)
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/worker.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/worker.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/worker.py
new file mode 100644
--- /dev/null	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/scripts/worker.py	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
@@ -0,0 +1,67 @@
+#!/usr/bin/python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+
+import os
+from resource_management import *
+from resource_management.libraries.functions import check_process_status
+import time
+from celeborn import celeborn
+from celeborn_service import celeborn_service
+
+
+class CelebornWorker(Script):
+    def install(self, env):
+        self.install_packages(env)
+
+    def configure(self, env, upgrade_type=None, config_dir=None):
+        import params
+        env.set_params(params)
+        celeborn(name='master')
+
+    def start(self, env, upgrade_type=None):
+        import params
+        env.set_params(params)
+        self.configure(env)
+        celeborn_service('worker', action='start')
+
+    def stop(self, env, upgrade_type=None):
+        import params
+        env.set_params(params)
+        celeborn_service('worker', action='stop')
+
+    def status(self, env):
+        import status_params
+        env.set_params(status_params)
+        check_process_status(status_params.celeborn_worker_pid_file)
+
+    def get_log_folder(self):
+      import params
+      return params.celeborn_log_dir
+
+    def get_user(self):
+        import params
+        return params.celeborn_user
+
+    def get_pid_files(self):
+        import status_params
+        return [status_params.celeborn_worker_pid_file]
+
+if __name__ == "__main__":
+    CelebornWorker().execute()
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/templates/hosts.j2
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/templates/hosts.j2 b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/templates/hosts.j2
new file mode 100644
--- /dev/null	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/package/templates/hosts.j2	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
@@ -0,0 +1,22 @@
+#
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+[master]
+{{celeborn_masters_str}}
+
+[worker]
+{{celeborn_workers_str}}
\ No newline at end of file
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/role_command_order.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/role_command_order.json b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/role_command_order.json
new file mode 100644
--- /dev/null	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/role_command_order.json	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
@@ -0,0 +1,8 @@
+{
+  "general_deps" : {
+    "_comment" : "dependencies for CELEBORN",
+    "CELEBORN_SERVICE_CHECK-SERVICE_CHECK" : ["CELEBORN_MASTER-START","CELEBORN_WORKER-START"],
+    "CELEBORN_MASTER-START" : ["ZOOKEEPER_SERVER-START", "NAMENODE-START","SECONDARY_NAMENODE-START", "DATANODE-START"],
+    "CELEBORN_WORKER-START" : ["CELEBORN_MASTER-START"]
+  }
+}
\ No newline at end of file
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/service_advisor.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/service_advisor.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/service_advisor.py
new file mode 100644
--- /dev/null	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/CELEBORN/service_advisor.py	(revision cf2784a7530c2a5af6c1b21aebdef63f355cc5be)
@@ -0,0 +1,213 @@
+#!/usr/bin/env ambari-python-wrap
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+"""
+
+# Python imports
+from ast import Param
+import imp
+import os
+import traceback
+import re
+import socket
+import fnmatch
+
+
+from resource_management.core.logger import Logger
+
+SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
+STACKS_DIR = os.path.join(SCRIPT_DIR, "../../../../../stacks/")
+PARENT_FILE = os.path.join(STACKS_DIR, "service_advisor.py")
+
+try:
+    if "BASE_SERVICE_ADVISOR" in os.environ:
+        PARENT_FILE = os.environ["BASE_SERVICE_ADVISOR"]
+    with open(PARENT_FILE, "rb") as fp:
+        service_advisor = imp.load_module(
+            "service_advisor", fp, PARENT_FILE, (".py", "rb", imp.PY_SOURCE)
+        )
+except Exception as e:
+    traceback.print_exc()
+    print("Failed to load parent")
+
+
+class CelebornServiceAdvisor(service_advisor.ServiceAdvisor):
+    def __init__(self, *args, **kwargs):
+        self.as_super = super(CelebornServiceAdvisor, self)
+        self.as_super.__init__(*args, **kwargs)
+
+        # Always call these methods
+        self.modifyMastersWithMultipleInstances()
+        self.modifyCardinalitiesDict()
+        self.modifyHeapSizeProperties()
+        self.modifyNotValuableComponents()
+        self.modifyComponentsNotPreferableOnServer()
+        self.modifyComponentLayoutSchemes()
+
+    def modifyMastersWithMultipleInstances(self):
+        """
+        Modify the set of masters with multiple instances.
+        Must be overriden in child class.
+        """
+        # Nothing to do
+        pass
+
+    def modifyCardinalitiesDict(self):
+        """
+        Modify the dictionary of cardinalities.
+        Must be overriden in child class.
+        """
+        # Nothing to do
+        pass
+
+    def modifyHeapSizeProperties(self):
+        """
+        Modify the dictionary of heap size properties.
+        Must be overriden in child class.
+        """
+        pass
+
+    def modifyNotValuableComponents(self):
+        """
+        Modify the set of components whose host assignment is based on other services.
+        Must be overriden in child class.
+        """
+        # Nothing to do
+        pass
+
+    def modifyComponentsNotPreferableOnServer(self):
+        """
+        Modify the set of components that are not preferable on the server.
+        Must be overriden in child class.
+        """
+        # Nothing to do
+        pass
+
+    def modifyComponentLayoutSchemes(self):
+        """
+        Modify layout scheme dictionaries for components.
+        The scheme dictionary basically maps the number of hosts to
+        host index where component should exist.
+        Must be overriden in child class.
+        """
+
+        # Nothing to do
+        pass
+
+    def getServiceComponentLayoutValidations(self, services, hosts):
+        """
+        Get a list of errors.
+        Must be overriden in child class.
+        """
+
+        return self.getServiceComponentCardinalityValidations(
+            services, hosts, "CELEBORN"
+        )
+
+    def getServiceConfigurationRecommendations(
+        self, configurations, clusterData, services, hosts
+    ):
+        """
+        Entry point.
+        Must be overriden in child class.
+        """
+        # Logger.info("Class: %s, Method: %s. Recommending Service Configurations." %
+        #            (self.__class__.__name__, inspect.stack()[0][3]))
+
+        recommender = CelebornRecommender()
+        recommender.recommendCelebornConfigurationsFromHDP33(
+            configurations, clusterData, services, hosts
+        )
+
+    # def getServiceConfigurationRecommendationsForSSO(self, configurations, clusterData, services, hosts):
+    #   """
+    #   Entry point.
+    #   Must be overriden in child class.
+    #   """
+    #   recommender = CelebornRecommender()
+    #   recommender.recommendConfigurationsForSSO(configurations, clusterData, services, hosts)
+
+    def getServiceConfigurationsValidationItems(
+        self, configurations, recommendedDefaults, services, hosts
+    ):
+        """
+        Entry point.
+        Validate configurations for the service. Return a list of errors.
+        The code for this function should be the same for each Service Advisor.
+        """
+        # Logger.info("Class: %s, Method: %s. Validating Configurations." %
+        #            (self.__class__.__name__, inspect.stack()[0][3]))
+
+        return []
+
+    @staticmethod
+    def isKerberosEnabled(services, configurations):
+        """
+        Determines if security is enabled by testing the value of core-site/hadoop.security.authentication enabled.
+        If the property exists and is equal to "kerberos", then is it enabled; otherwise is it assumed to be
+        disabled.
+
+        :type services: dict
+        :param services: the dictionary containing the existing configuration values
+        :type configurations: dict
+        :param configurations: the dictionary containing the updated configuration values
+        :rtype: bool
+        :return: True or False
+        """
+        if (
+            configurations
+            and "core-site" in configurations
+            and "hadoop.security.authentication"
+            in configurations["core-site"]["properties"]
+        ):
+            return (
+                configurations["core-site"]["properties"][
+                    "hadoop.security.authentication"
+                ].lower()
+                == "kerberos"
+            )
+        elif (
+            services
+            and "core-site" in services["configurations"]
+            and "hadoop.security.authentication"
+            in services["configurations"]["core-site"]["properties"]
+        ):
+            return (
+                services["configurations"]["core-site"]["properties"][
+                    "hadoop.security.authentication"
+                ].lower()
+                == "kerberos"
+            )
+        else:
+            return False
+
+
+class CelebornRecommender(service_advisor.ServiceAdvisor):
+    """
+    Celeborn Recommender suggests properties when adding the service for the first time or modifying configs via the UI.
+    """
+
+    def __init__(self, *args, **kwargs):
+        self.as_super = super(CelebornRecommender, self)
+        self.as_super.__init__(*args, **kwargs)
+
+    def recommendCelebornConfigurationsFromHDP33(
+        self, configurations, clusterData, services, hosts
+    ):
+        """
+        Recommend configurations for this service based on HDP 3.3.
+        """

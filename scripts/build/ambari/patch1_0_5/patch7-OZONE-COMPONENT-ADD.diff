Subject: [PATCH] feauture: ozone 1.4.1 集成
---
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/role_command_order.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/role_command_order.json b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/role_command_order.json
--- a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/role_command_order.json	(revision ea5b8a88deb574efd17aa14e5030b8522b9dc67c)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/role_command_order.json	(date 1739257256745)
@@ -42,8 +42,13 @@
     "WEBHCAT_SERVER-START": ["NODEMANAGER-START", "HIVE_SERVER-START"],
     "ZOOKEEPER_QUORUM_SERVICE_CHECK-SERVICE_CHECK": ["ZOOKEEPER_SERVER-START"],
     "ZOOKEEPER_SERVER-STOP": ["HBASE_MASTER-STOP", "HBASE_REGIONSERVER-STOP", "METRICS_COLLECTOR-STOP", "SOLR_SERVER-STOP"],
-    "ZOOKEEPER_SERVICE_CHECK-SERVICE_CHECK": ["ZOOKEEPER_SERVER-START"]
-
+    "ZOOKEEPER_SERVICE_CHECK-SERVICE_CHECK": ["ZOOKEEPER_SERVER-START"],
+    "FLINK_SERVICE_CHECK-SERVICE_CHECK": ["HIVE_SERVICE_CHECK-SERVICE_CHECK"],
+    "OZONE_SCM-START" : ["ZOOKEEPER_SERVER-START"],
+	"OZONE_DATANODE-START" : ["OZONE_SCM-START","OZONE_OM-START"],
+	"OZONE_OM-START" : ["OZONE_SCM-START","RANGER_ADMIN-START"],
+	"OZONE_RECON-START" : ["OZONE_SCM-START","OZONE_OM-START","OZONE_DATANODE-START"],
+	"OZONE_S3G-START" : ["OZONE_SCM-START","OZONE_OM-START","OZONE_DATANODE-START"]
   },
   "namenode_optional_ha": {
     "_comment": "Dependencies that are used in HA NameNode cluster",
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/properties/stack_packages.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/properties/stack_packages.json b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/properties/stack_packages.json
--- a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/properties/stack_packages.json	(revision ea5b8a88deb574efd17aa14e5030b8522b9dc67c)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/properties/stack_packages.json	(date 1739236349340)
@@ -724,6 +724,98 @@
             "celeborn"
           ]
         }
+      },
+      "OZONE": {
+        "OZONE": {
+          "STACK-SELECT-PACKAGE": "ozone",
+          "INSTALL": [
+            "ozone"
+          ],
+          "PATCH": [
+            "ozone"
+          ],
+          "STANDARD": [
+            "ozone"
+          ]
+        },
+        "OZONE_OM": {
+          "STACK-SELECT-PACKAGE": "ozone-om",
+          "INSTALL": [
+            "ozone",
+            "ozone-om"
+          ],
+          "PATCH": [
+            "ozone-om"
+          ],
+          "STANDARD": [
+            "ozone-om"
+          ]
+        },
+        "OZONE_SCM": {
+          "STACK-SELECT-PACKAGE": "ozone-scm",
+          "INSTALL": [
+            "ozone",
+            "ozone-scm"
+          ],
+          "PATCH": [
+            "ozone-scm"
+          ],
+          "STANDARD": [
+            "ozone-scm"
+          ]
+        },
+        "OZONE_DATANODE": {
+          "STACK-SELECT-PACKAGE": "ozone-datanode",
+          "INSTALL": [
+            "ozone",
+            "ozone-datanode"
+          ],
+          "PATCH": [
+            "ozone-datanode"
+          ],
+          "STANDARD": [
+            "ozone-datanode"
+          ]
+        },
+        "OZONE_RECON": {
+          "STACK-SELECT-PACKAGE": "ozone-recon",
+          "INSTALL": [
+            "ozone",
+            "ozone-recon"
+          ],
+          "PATCH": [
+            "ozone-recon"
+          ],
+          "STANDARD": [
+            "ozone-recon"
+          ]
+        },
+        "OZONE_S3G": {
+          "STACK-SELECT-PACKAGE": "ozone-s3g",
+          "INSTALL": [
+            "ozone",
+            "ozone-s3g"
+          ],
+          "PATCH": [
+            "ozone-s3g"
+          ],
+          "STANDARD": [
+            "ozone-s3g"
+          ]
+        },
+        "OZONE_CLIENT": {
+          "STACK-SELECT-PACKAGE": "ozone-client",
+          "INSTALL": [
+            "ozone",
+            "ozone-client"
+          ],
+          "PATCH": [
+            "ozone-client"
+          ],
+          "STANDARD": [
+            "ozone-client"
+          ]
+        }
       }
     },
     "conf-select": {
@@ -915,6 +1007,13 @@
           "current_dir": "{0}/current/doris-hdfs_broker/conf",
           "component": "doris-hdfs_broker"
         }
+      ],
+      "ozone": [
+        {
+          "conf_dir": "/etc/ozone/conf",
+          "current_dir": "{0}/current/ozone/conf",
+          "component": "ozone"
+        }
       ]
     },
     "conf-select-patching": {
@@ -1004,6 +1103,9 @@
           "doris-hdfs_broker",
           "doris-client"
         ]
+      },
+      "OZONE": {
+        "packages": ["ozone"]
       }
     },
     "upgrade-dependencies": {
Index: ambari-web/app/controllers/wizard/step6_controller.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-web/app/controllers/wizard/step6_controller.js b/ambari-web/app/controllers/wizard/step6_controller.js
--- a/ambari-web/app/controllers/wizard/step6_controller.js	(revision ea5b8a88deb574efd17aa14e5030b8522b9dc67c)
+++ b/ambari-web/app/controllers/wizard/step6_controller.js	(date 1739235135125)
@@ -302,11 +302,12 @@
     else if (this.get('isAddServiceWizard')) services = installedServices.concat(selectedServices);

     var headers = Em.A([]);
-    let doHideOzoneDataNodes = !!services.findProperty('serviceName', 'HDFS');
+    //let doHideOzoneDataNodes = !!services.findProperty('serviceName', 'HDFS');
     services.forEach(function (stackService) {
       stackService.get('serviceComponents').forEach(function (serviceComponent) {
-        let hideComponent = serviceComponent.get('componentName') === 'OZONE_DATANODE' ? doHideOzoneDataNodes : false;
-        if (serviceComponent.get('isShownOnInstallerSlaveClientPage') && !hideComponent) {
+        //let hideComponent = serviceComponent.get('componentName') === 'OZONE_DATANODE' ? doHideOzoneDataNodes : false;
+        //if (serviceComponent.get('isShownOnInstallerSlaveClientPage') && !hideComponent) {
+        if (serviceComponent.get('isShownOnInstallerSlaveClientPage')) {
           headers.pushObject(Em.Object.create({
             name: serviceComponent.get('componentName'),
             label: App.format.role(serviceComponent.get('componentName'), false),
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/alerts.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/alerts.json b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/alerts.json
new file mode 100644
--- /dev/null	(date 1739000848198)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/alerts.json	(date 1739000848198)
@@ -0,0 +1,622 @@
+{
+  "OZONE": {
+    "service": [
+      {
+        "name": "ozone_datanode_process_percent",
+        "label": "Ozone Percent DataNodes Available",
+        "description": "This alert is triggered if the number of down DataNodes in the cluster is greater than the configured critical threshold. It aggregates the results of DataNode process checks.",
+        "interval": 1,
+        "scope": "SERVICE",
+        "enabled": true,
+        "source": {
+          "type": "AGGREGATE",
+          "alert_name": "ozone_datanode_process",
+          "reporting": {
+            "ok": {
+              "text": "affected: [{1}], total: [{0}]"
+            },
+            "warning": {
+              "text": "affected: [{1}], total: [{0}]",
+              "value": 10
+            },
+            "critical": {
+              "text": "affected: [{1}], total: [{0}]",
+              "value": 30
+            },
+            "units": "%",
+            "type": "PERCENT"
+          }
+        }
+      },
+      {
+        "name": "ozone_om_process_percent",
+        "label": "Percent Ozone OM Available",
+        "description": "This alert is triggered if the number of down Ozone OM in the cluster is greater than the configured critical threshold. It aggregates the results of Ozone OM process checks.",
+        "interval": 1,
+        "scope": "SERVICE",
+        "enabled": true,
+        "source": {
+          "type": "AGGREGATE",
+          "alert_name": "ozone_om_process",
+          "reporting": {
+            "ok": {
+              "text": "affected: [{1}], total: [{0}]"
+            },
+            "warning": {
+              "text": "affected: [{1}], total: [{0}]",
+              "value": 33
+            },
+            "critical": {
+              "text": "affected: [{1}], total: [{0}]",
+              "value": 50
+            },
+            "units": "%",
+            "type": "PERCENT"
+          }
+        }
+      },
+      {
+        "name": "ozone_scm_process_percent",
+        "label": "Percent Ozone SCM Available",
+        "description": "This alert is triggered if the number of down Ozone SCM in the cluster is greater than the configured critical threshold. It aggregates the results of Ozone OM process checks.",
+        "interval": 1,
+        "scope": "SERVICE",
+        "enabled": true,
+        "source": {
+          "type": "AGGREGATE",
+          "alert_name": "ozone_scm_process",
+          "reporting": {
+            "ok": {
+              "text": "affected: [{1}], total: [{0}]"
+            },
+            "warning": {
+              "text": "affected: [{1}], total: [{0}]",
+              "value": 33
+            },
+            "critical": {
+              "text": "affected: [{1}], total: [{0}]",
+              "value": 50
+            },
+            "units": "%",
+            "type": "PERCENT"
+          }
+        }
+      }
+    ],
+    "OZONE_OM": [
+      {
+        "name": "ozone_om_process",
+        "label": "Ozone OM Process",
+        "description": "This host-level alert is triggered if the individual Ozone OM processes cannot be established to be up and listening on the network.",
+        "interval": 1,
+        "scope": "HOST",
+        "enabled": true,
+        "source": {
+          "type": "PORT",
+          "uri": "{{ozone-site/ozone.om.address}}",
+          "default_port": 9862,
+          "reporting": {
+            "ok": {
+              "text": "TCP OK - {0:.3f}s response on port {1}"
+            },
+            "warning": {
+              "text": "TCP OK - {0:.3f}s response on port {1}",
+              "value": 1.5
+            },
+            "critical": {
+              "text": "Connection failed: {0} to {1}:{2}",
+              "value": 5.0
+            }
+          }
+        }
+      },
+      {
+        "name": "ozone_om_webui",
+        "label": "Ozone OM Web UI",
+        "description": "This host-level alert is triggered if the Ozone OM Web UI is unreachable.",
+        "interval": 1,
+        "scope": "ANY",
+        "enabled": true,
+        "source": {
+          "type": "WEB",
+          "uri": {
+            "http": "{{ozone-site/ozone.om.http-address}}",
+            "https": "{{ozone-site/ozone.om.https-address}}",
+            "https_property": "{{ozone-site/ozone.http.policy}}",
+            "https_property_value": "HTTPS_ONLY",
+            "kerberos_keytab": "{{cluster-env/smokeuser_keytab}}",
+            "kerberos_principal": "{{cluster-env/smokeuser_principal_name}}",
+            "connection_timeout": 5.0
+          },
+          "reporting": {
+            "ok": {
+              "text": "HTTP {0} response in {2:.3f}s"
+            },
+            "warning": {
+              "text": "HTTP {0} response from {1} in {2:.3f}s ({3})"
+            },
+            "critical": {
+              "text": "Connection failed to {1} ({3})"
+            }
+          }
+        }
+      },
+      {
+        "name": "ozone_om_cpu",
+        "label": "Ozone OM Host CPU Utilization",
+        "description": "This host-level alert is triggered if CPU utilization of the Ozone OM exceeds certain warning and critical thresholds. It checks the Ozone OM JMX Servlet for the SystemCPULoad property. The threshold values are in percent.",
+        "interval": 5,
+        "scope": "ANY",
+        "enabled": true,
+        "source": {
+          "type": "METRIC",
+          "uri": {
+            "http": "{{ozone-site/ozone.om.http-address}}",
+            "https": "{{ozone-site/ozone.om.https-address}}",
+            "https_property": "{{ozone-site/ozone.http.policy}}",
+            "https_property_value": "HTTPS_ONLY",
+            "kerberos_keytab": "{{cluster-env/smokeuser_keytab}}",
+            "kerberos_principal": "{{cluster-env/smokeuser_principal_name}}",
+            "connection_timeout": 5.0
+          },
+          "reporting": {
+            "ok": {
+              "text": "{1} CPU, load {0:.1%}"
+            },
+            "warning": {
+              "text": "{1} CPU, load {0:.1%}",
+              "value": 200
+            },
+            "critical": {
+              "text": "{1} CPU, load {0:.1%}",
+              "value": 250
+            },
+            "units": "%",
+            "type": "PERCENT"
+          },
+          "jmx": {
+            "property_list": [
+              "java.lang:type=OperatingSystem/SystemCpuLoad",
+              "java.lang:type=OperatingSystem/AvailableProcessors"
+            ],
+            "value": "{0} * 100"
+          }
+        }
+      },
+      {
+        "name": "ozone_om_rpc_latency",
+        "label": "Ozone OM RPC Latency",
+        "description": "This host-level alert is triggered if the Ozone OM RPC latency exceeds the configured critical threshold. Typically an increase in the RPC processing time increases the RPC queue length, causing the average queue wait time to increase for Ozone OM operations. The threshold values are in milliseconds.",
+        "interval": 2,
+        "scope": "ANY",
+        "enabled": true,
+        "source": {
+          "type": "METRIC",
+          "uri": {
+            "http": "{{ozone-site/ozone.om.http-address}}",
+            "https": "{{ozone-site/ozone.om.https-address}}",
+            "https_property": "{{ozone-site/ozone.http.policy}}",
+            "https_property_value": "HTTPS_ONLY",
+            "kerberos_keytab": "{{cluster-env/smokeuser_keytab}}",
+            "kerberos_principal": "{{cluster-env/smokeuser_principal_name}}",
+            "connection_timeout": 5.0
+          },
+          "reporting": {
+            "ok": {
+              "text": "Average Queue Time:[{0}], Average Processing Time:[{1}]"
+            },
+            "warning": {
+              "text": "Average Queue Time:[{0}], Average Processing Time:[{1}]",
+              "value": 3000
+            },
+            "critical": {
+              "text": "Average Queue Time:[{0}], Average Processing Time:[{1}]",
+              "value": 5000
+            },
+            "units": "ms"
+          },
+          "jmx": {
+            "property_list": [
+              "Hadoop:service=OzoneManager,name=RpcActivityForPort*/RpcQueueTimeAvgTime",
+              "Hadoop:service=OzoneManager,name=RpcActivityForPort*/RpcProcessingTimeAvgTime"
+            ],
+            "value": "{0}"
+          }
+        }
+      }
+    ],
+    "OZONE_SCM": [
+      {
+        "name": "ozone_scm_process",
+        "label": "Ozone SCM Process",
+        "description": "This host-level alert is triggered if the individual Ozone SCM processes cannot be established to be up and listening on the network.",
+        "interval": 1,
+        "scope": "HOST",
+        "enabled": true,
+        "source": {
+          "type": "PORT",
+          "uri": "{{ozone-site/ozone.scm.datanode.address}}",
+          "default_port": 9861,
+          "reporting": {
+            "ok": {
+              "text": "TCP OK - {0:.3f}s response on port {1}"
+            },
+            "warning": {
+              "text": "TCP OK - {0:.3f}s response on port {1}",
+              "value": 1.5
+            },
+            "critical": {
+              "text": "Connection failed: {0} to {1}:{2}",
+              "value": 5.0
+            }
+          }
+        }
+      },
+      {
+        "name": "ozone_scm_webui",
+        "label": "Ozone SCM Web UI",
+        "description": "This host-level alert is triggered if the Ozone SCM Web UI is unreachable.",
+        "interval": 1,
+        "scope": "ANY",
+        "enabled": true,
+        "source": {
+          "type": "WEB",
+          "uri": {
+            "http": "{{ozone-site/ozone.scm.http-address}}",
+            "https": "{{ozone-site/ozone.scm.https-address}}",
+            "https_property": "{{ozone-site/ozone.http.policy}}",
+            "https_property_value": "HTTPS_ONLY",
+            "kerberos_keytab": "{{cluster-env/smokeuser_keytab}}",
+            "kerberos_principal": "{{cluster-env/smokeuser_principal_name}}",
+            "connection_timeout": 5.0
+          },
+          "reporting": {
+            "ok": {
+              "text": "HTTP {0} response in {2:.3f}s"
+            },
+            "warning": {
+              "text": "HTTP {0} response from {1} in {2:.3f}s ({3})"
+            },
+            "critical": {
+              "text": "Connection failed to {1} ({3})"
+            }
+          }
+        }
+      },
+      {
+        "name": "ozone_scm_cpu",
+        "label": "Ozone SCM Host CPU Utilization",
+        "description": "This host-level alert is triggered if CPU utilization of the Ozone SCM exceeds certain warning and critical thresholds. It checks the Ozone SCM JMX Servlet for the SystemCPULoad property. The threshold values are in percent.",
+        "interval": 5,
+        "scope": "ANY",
+        "enabled": true,
+        "source": {
+          "type": "METRIC",
+          "uri": {
+            "http": "{{ozone-site/ozone.scm.http-address}}",
+            "https": "{{ozone-site/ozone.scm.https-address}}",
+            "https_property": "{{ozone-site/ozone.http.policy}}",
+            "https_property_value": "HTTPS_ONLY",
+            "kerberos_keytab": "{{cluster-env/smokeuser_keytab}}",
+            "kerberos_principal": "{{cluster-env/smokeuser_principal_name}}",
+            "connection_timeout": 5.0
+          },
+          "reporting": {
+            "ok": {
+              "text": "{1} CPU, load {0:.1%}"
+            },
+            "warning": {
+              "text": "{1} CPU, load {0:.1%}",
+              "value": 200
+            },
+            "critical": {
+              "text": "{1} CPU, load {0:.1%}",
+              "value": 250
+            },
+            "units": "%",
+            "type": "PERCENT"
+          },
+          "jmx": {
+            "property_list": [
+              "java.lang:type=OperatingSystem/SystemCpuLoad",
+              "java.lang:type=OperatingSystem/AvailableProcessors"
+            ],
+            "value": "{0} * 100"
+          }
+        }
+      },
+      {
+        "name": "ozone_scm_capacity_utilization",
+        "label": "Ozone SCM Capacity Utilization",
+        "description": "This service-level alert is triggered if the Ozone SCM capacity utilization exceeds the configured warning and critical thresholds. It checks the Ozone SCM JMX Servlet for the CapacityUsed and CapacityRemaining properties. The threshold values are in percent.",
+        "interval": 2,
+        "scope": "ANY",
+        "enabled": true,
+        "source": {
+          "type": "METRIC",
+          "uri": {
+            "http": "{{ozone-site/ozone.scm.http-address}}",
+            "https": "{{ozone-site/ozone.scm.https-address}}",
+            "https_property": "{{ozone-site/ozone.http.policy}}",
+            "https_property_value": "HTTPS_ONLY",
+            "kerberos_keytab": "{{cluster-env/smokeuser_keytab}}",
+            "kerberos_principal": "{{cluster-env/smokeuser_principal_name}}",
+            "connection_timeout": 5.0
+          },
+          "reporting": {
+            "ok": {
+              "text": "Capacity Used:[{2:.0f}%, {0}], Capacity Remaining:[{1}]"
+            },
+            "warning": {
+              "text": "Capacity Used:[{2:.0f}%, {0}], Capacity Remaining:[{1}]",
+              "value": 75
+            },
+            "critical": {
+              "text": "Capacity Used:[{2:.0f}%, {0}], Capacity Remaining:[{1}]",
+              "value": 80
+            },
+            "units": "%",
+            "type": "PERCENT"
+          },
+          "jmx": {
+            "property_list": [
+              "Hadoop:service=StorageContainerManager,name=SCMNodeMetrics/DiskCapacity",
+              "Hadoop:service=StorageContainerManager,name=SCMNodeMetrics/DiskRemaining"
+            ],
+            "value": "{0}/({0} + {1}) * 100.0"
+          }
+        }
+      },
+      {
+        "name": "ozone_scm_rpc_latency",
+        "label": "Ozone SCM RPC Latency",
+        "description": "This host-level alert is triggered if the Ozone SCM RPC latency exceeds the configured critical threshold. Typically an increase in the RPC processing time increases the RPC queue length, causing the average queue wait time to increase for Ozone SCM operations. The threshold values are in milliseconds.",
+        "interval": 2,
+        "scope": "ANY",
+        "enabled": true,
+        "source": {
+          "type": "METRIC",
+          "uri": {
+            "http": "{{ozone-site/ozone.scm.http-address}}",
+            "https": "{{ozone-site/ozone.scm.https-address}}",
+            "https_property": "{{ozone-site/ozone.http.policy}}",
+            "https_property_value": "HTTPS_ONLY",
+            "kerberos_keytab": "{{cluster-env/smokeuser_keytab}}",
+            "kerberos_principal": "{{cluster-env/smokeuser_principal_name}}",
+            "connection_timeout": 5.0
+          },
+          "reporting": {
+            "ok": {
+              "text": "Average Queue Time:[{0}], Average Processing Time:[{1}]"
+            },
+            "warning": {
+              "text": "Average Queue Time:[{0}], Average Processing Time:[{1}]",
+              "value": 3000
+            },
+            "critical": {
+              "text": "Average Queue Time:[{0}], Average Processing Time:[{1}]",
+              "value": 5000
+            },
+            "units": "ms"
+          },
+          "jmx": {
+            "property_list": [
+              "Hadoop:service=StorageContainerManager,name=RpcActivityForPort*/RpcQueueTimeAvgTime",
+              "Hadoop:service=StorageContainerManager,name=RpcActivityForPort*/RpcProcessingTimeAvgTime"
+            ],
+            "value": "{0}"
+          }
+        }
+      },
+      {
+        "name": "ozone_datanode_health_summary",
+        "label": "Ozone DataNode Health Summary",
+        "description": "This service-level alert is triggered if there are unhealthy Ozone DataNodes",
+        "interval": 1,
+        "scope": "SERVICE",
+        "enabled": true,
+        "source": {
+          "type": "METRIC",
+          "uri": {
+            "http": "{{ozone-site/ozone.scm.http-address}}",
+            "https": "{{ozone-site/ozone.scm.https-address}}",
+            "https_property": "{{ozone-site/ozone.http.policy}}",
+            "https_property_value": "HTTPS_ONLY",
+            "kerberos_keytab": "{{cluster-env/smokeuser_keytab}}",
+            "kerberos_principal": "{{cluster-env/smokeuser_principal_name}}",
+            "connection_timeout": 5.0
+          },
+          "reporting": {
+            "ok": {
+              "text": "All {2} DataNode(s) are healthy"
+            },
+            "warning": {
+              "text": "DataNode Health: [Live={2}, Stale={1}, Dead={0}]",
+              "value": 1
+            },
+            "critical": {
+              "text": "DataNode Health: [Live={2}, Stale={1}, Dead={0}]",
+              "value": 1
+            },
+            "units": "DNs"
+          },
+          "jmx": {
+            "property_list": [
+              "Hadoop:service=StorageContainerManager,name=SCMNodeMetrics/InServiceDeadNodes",
+              "Hadoop:service=StorageContainerManager,name=SCMNodeMetrics/InServiceStaleNodes",
+              "Hadoop:service=StorageContainerManager,name=SCMNodeMetrics/InServiceHealthyNodes"
+            ],
+            "value": "{0} + {1}"
+          }
+        }
+      }
+    ],
+    "OZONE_DATANODE": [
+      {
+        "name": "ozone_datanode_process",
+        "label": "Ozone DataNode Process",
+        "description": "This host-level alert is triggered if the individual Ozone DataNode processes cannot be established to be up and listening on the network.",
+        "interval": 1,
+        "scope": "HOST",
+        "enabled": true,
+        "source": {
+          "type": "PORT",
+          "uri": "{{ozone-site/hdds.datanode.http-bind-host}}",
+          "default_port": 9859,
+          "reporting": {
+            "ok": {
+              "text": "TCP OK - {0:.3f}s response on port {1}"
+            },
+            "warning": {
+              "text": "TCP OK - {0:.3f}s response on port {1}",
+              "value": 1.5
+            },
+            "critical": {
+              "text": "Connection failed: {0} to {1}:{2}",
+              "value": 5.0
+            }
+          }
+        }
+      },
+      {
+        "name": "ozone_datanode_webui",
+        "label": "Ozone DataNode Web UI",
+        "description": "This host-level alert is triggered if the Ozone DataNode Web UI is unreachable.",
+        "interval": 1,
+        "scope": "HOST",
+        "enabled": true,
+        "source": {
+          "type": "WEB",
+          "uri": {
+            "http": "{{ozone-site/hdds.datanode.http-address}}",
+            "https": "{{ozone-site/hdds.datanode.https-address}}",
+            "https_property": "{{ozone-site/ozone.http.policy}}",
+            "https_property_value": "HTTPS_ONLY",
+            "kerberos_keytab": "{{cluster-env/smokeuser_keytab}}",
+            "kerberos_principal": "{{cluster-env/smokeuser_principal_name}}",
+            "connection_timeout": 5.0
+          },
+          "reporting": {
+            "ok": {
+              "text": "HTTP {0} response in {2:.3f}s"
+            },
+            "warning": {
+              "text": "HTTP {0} response from {1} in {2:.3f}s ({3})"
+            },
+            "critical": {
+              "text": "Connection failed to {1} ({3})"
+            }
+          }
+        }
+      },
+      {
+        "name": "ozone_datanode_heap_usage",
+        "label": "Ozone DataNode Heap Usage",
+        "description": "This host-level alert is triggered if heap usage goes past thresholds on the DataNode. It checks the DataNode JMXServlet for the MemHeapUsedM and MemHeapMaxM properties. The threshold values are in percent.",
+        "interval": 2,
+        "scope": "HOST",
+        "enabled": true,
+        "source": {
+          "type": "METRIC",
+          "uri": {
+            "http": "{{ozone-site/hdds.datanode.http-address}}",
+            "https": "{{ozone-site/hdds.datanode.https-address}}",
+            "kerberos_keytab": "{{cluster-env/smokeuser_keytab}}",
+            "kerberos_principal": "{{cluster-env/smokeuser_principal_name}}",
+            "https_property": "{{ozone-site/ozone.http.policy}}",
+            "https_property_value": "HTTPS_ONLY",
+            "connection_timeout": 5.0
+          },
+          "reporting": {
+            "ok": {
+              "text": "Used Heap:[{2:.0f}%, {0} MB], Max Heap: {1} MB"
+            },
+            "warning": {
+              "text": "Used Heap:[{2:.0f}%, {0} MB], Max Heap: {1} MB",
+              "value": 80
+            },
+            "critical": {
+              "text": "Used Heap:[{2:.0f}%, {0} MB], Max Heap: {1} MB",
+              "value": 90
+            },
+            "units": "%",
+            "type": "PERCENT"
+          },
+          "jmx": {
+            "property_list": [
+              "Hadoop:service=HddsDatanode,name=JvmMetrics/MemHeapUsedM",
+              "Hadoop:service=HddsDatanode,name=JvmMetrics/MemHeapMaxM"
+            ],
+            "value": "100.0 - (({1} - {0})/{1} * 100.0)"
+          }
+        }
+      }
+    ],
+    "OZONE_RECON": [
+      {
+        "name": "ozone_recon_process",
+        "label": "Ozone Recon Web UI",
+        "description": "This host-level alert is triggered if the Recon Web UI is unreachable.",
+        "interval": 1,
+        "scope": "HOST",
+        "enabled": true,
+        "source": {
+          "type": "WEB",
+          "uri": {
+            "http": "{{ozone-site/ozone.recon.http-address}}",
+            "https": "{{ozone-site/ozone.recon.https-address}}",
+            "kerberos_keytab": "{{cluster-env/smokeuser_keytab}}",
+            "kerberos_principal": "{{cluster-env/smokeuser_principal_name}}",
+            "https_property": "{{ozone-site/ozone.http.policy}}",
+            "https_property_value": "HTTPS_ONLY",
+            "connection_timeout": 5.0
+          },
+          "reporting": {
+            "ok": {
+              "text": "HTTP {0} response in {2:.3f}s"
+            },
+            "warning": {
+              "text": "HTTP {0} response from {1} in {2:.3f}s ({3})"
+            },
+            "critical": {
+              "text": "Connection failed to {1} ({3})"
+            }
+          }
+        }
+      }
+    ],
+    "OZONE_S3G": [
+      {
+        "name": "ozone_s3g_process",
+        "label": "Ozone S3G Web UI",
+        "description": "This host-level alert is triggered if the S3G Web UI is unreachable.",
+        "interval": 1,
+        "scope": "HOST",
+        "enabled": true,
+        "source": {
+          "type": "WEB",
+          "uri": {
+            "http": "{{ozone-site/ozone.s3g.http-address}}",
+            "https": "{{ozone-site/ozone.s3g.https-address}}",
+            "kerberos_keytab": "{{cluster-env/smokeuser_keytab}}",
+            "kerberos_principal": "{{cluster-env/smokeuser_principal_name}}",
+            "https_property": "{{ozone-site/ozone.http.policy}}",
+            "https_property_value": "HTTPS_ONLY",
+            "connection_timeout": 5.0
+          },
+          "reporting": {
+            "ok": {
+              "text": "HTTP {0} response in {2:.3f}s"
+            },
+            "warning": {
+              "text": "HTTP {0} response from {1} in {2:.3f}s ({3})"
+            },
+            "critical": {
+              "text": "Connection failed to {1} ({3})"
+            }
+          }
+        }
+      }
+    ]
+  }
+}
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/metainfo.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/metainfo.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/metainfo.xml
new file mode 100644
--- /dev/null	(date 1739257492876)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/metainfo.xml	(date 1739257492876)
@@ -0,0 +1,173 @@
+<?xml version="1.0"?>
+<!--
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to You under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+-->
+<metainfo>
+    <schemaVersion>2.0</schemaVersion>
+    <services>
+        <service>
+            <name>OZONE</name>
+            <displayName>Ozone</displayName>
+            <comment>Component Ozone Integrated By JaneTTR . For commercial use, please contact mail: 3832514048@qq.com</comment>
+            <version>1.4.1</version>
+            <selection>TECH_PREVIEW</selection>
+			<deleted>true</deleted>
+            <components>
+                <component>
+                    <name>OZONE_OM</name>
+                    <displayName>Ozone Manager</displayName>
+                    <category>MASTER</category>
+                    <cardinality>1-3</cardinality>
+                    <versionAdvertised>true</versionAdvertised>
+                    <rollingRestartSupported>true</rollingRestartSupported>
+                    <timelineAppid>ozonemanager</timelineAppid>
+                    <commandScript>
+                        <script>scripts/ozone_om.py</script>
+                        <scriptType>PYTHON</scriptType>
+                        <timeout>1800</timeout>
+                    </commandScript>
+                    <customCommands>
+                        <customCommand>
+                            <name>HA</name>
+                            <commandScript>
+                                <script>scripts/ozone_om.py</script>
+                                <scriptType>PYTHON</scriptType>
+                                <timeout>1200</timeout>
+                            </commandScript>
+                            <hidden>true</hidden>
+                        </customCommand>
+                    </customCommands>
+                </component>
+                <component>
+                    <name>OZONE_SCM</name>
+                    <displayName>Storage Container Manager</displayName>
+                    <category>MASTER</category>
+                    <cardinality>1-3</cardinality>
+                    <versionAdvertised>true</versionAdvertised>
+                    <rollingRestartSupported>true</rollingRestartSupported>
+                    <timelineAppid>storagecontainermanager</timelineAppid>
+                    <commandScript>
+                        <script>scripts/ozone_scm.py</script>
+                        <scriptType>PYTHON</scriptType>
+                        <timeout>1800</timeout>
+                    </commandScript>
+                    <customCommands>
+                        <customCommand>
+                            <name>HA</name>
+                            <commandScript>
+                                <script>scripts/ozone_scm.py</script>
+                                <scriptType>PYTHON</scriptType>
+                                <timeout>1200</timeout>
+                            </commandScript>
+                            <hidden>true</hidden>
+                        </customCommand>
+                    </customCommands>
+                </component>
+                <component>
+                    <name>OZONE_DATANODE</name>
+                    <displayName>Ozone Datanode</displayName>
+                    <category>SLAVE</category>
+                    <cardinality>1+</cardinality>
+                    <versionAdvertised>true</versionAdvertised>
+                    <rollingRestartSupported>true</rollingRestartSupported>
+                    <timelineAppid>hddsdatanode</timelineAppid>
+                    <commandScript>
+                        <script>scripts/ozone_datanode.py</script>
+                        <scriptType>PYTHON</scriptType>
+                        <timeout>1800</timeout>
+                    </commandScript>
+                </component>
+                <component>
+                    <name>OZONE_RECON</name>
+                    <displayName>Recon Server</displayName>
+                    <category>MASTER</category>
+                    <cardinality>1-2</cardinality>
+                    <versionAdvertised>true</versionAdvertised>
+                    <rollingRestartSupported>true</rollingRestartSupported>
+                    <timelineAppid>recon</timelineAppid>
+                    <commandScript>
+                        <script>scripts/ozone_recon.py</script>
+                        <scriptType>PYTHON</scriptType>
+                        <timeout>1800</timeout>
+                    </commandScript>
+                </component>
+                <component>
+                    <name>OZONE_S3G</name>
+                    <displayName>S3G Server</displayName>
+                    <category>MASTER</category>
+                    <cardinality>1-2</cardinality>
+                    <versionAdvertised>true</versionAdvertised>
+                    <rollingRestartSupported>true</rollingRestartSupported>
+                    <commandScript>
+                        <script>scripts/ozone_s3g.py</script>
+                        <scriptType>PYTHON</scriptType>
+                        <timeout>1800</timeout>
+                    </commandScript>
+                </component>
+
+            </components>
+
+            <osSpecifics>
+                <osSpecific>
+                    <osFamily>any</osFamily>
+                    <packages>
+                        <package>
+                            <name>ozone_${stack_version}</name>
+                        </package>
+                        <package>
+                            <name>snappy</name>
+                        </package>
+                        <package>
+                            <name>snappy-devel</name>
+                        </package>
+                    </packages>
+                </osSpecific>
+            </osSpecifics>
+
+            <quickLinksConfigurations>
+                <quickLinksConfiguration>
+                    <fileName>quicklinks.json</fileName>
+                    <default>true</default>
+                </quickLinksConfiguration>
+            </quickLinksConfigurations>
+
+            <configuration-dependencies>
+                <config-type>ozone-site</config-type>
+                <config-type>ozone-env</config-type>
+                <config-type>ozone-core-site</config-type>
+                <config-type>ranger-ozone-plugin-properties</config-type>
+                <config-type>ranger-ozone-audit</config-type>
+                <config-type>ranger-ozone-policymgr-ssl</config-type>
+                <config-type>ranger-ozone-security</config-type>
+            </configuration-dependencies>
+            <restartRequiredAfterChange>true</restartRequiredAfterChange>
+<!--
+
+            <themes>
+                <theme>
+                    <fileName>theme.json</fileName>
+                    <default>true</default>
+                </theme>
+                <theme>
+                    <fileName>directories.json</fileName>
+                    <default>true</default>
+                </theme>
+            </themes>
+-->
+
+        </service>
+    </services>
+</metainfo>
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/kerberos.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/kerberos.json b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/kerberos.json
new file mode 100644
--- /dev/null	(date 1739000793292)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/kerberos.json	(date 1739000793292)
@@ -0,0 +1,271 @@
+{
+  "services": [
+    {
+      "name": "OZONE",
+      "identities": [
+        {
+          "name": "ozone_spnego",
+          "reference": "/spnego"
+        },
+        {
+          "name": "ozone",
+          "principal": {
+            "value": "${ozone-env/ozone_user}${principal_suffix}@${realm}",
+            "type": "user",
+            "configuration": "ozone-env/ozone_principal_name",
+            "local_username": "${ozone-env/ozone_user}"
+          },
+          "keytab": {
+            "file": "${keytab_dir}/ozone.headless.keytab",
+            "owner": {
+              "name": "${ozone-env/ozone_user}",
+              "access": "r"
+            },
+            "group": {
+              "name": "${cluster-env/user_group}",
+              "access": "r"
+            },
+            "configuration": "ozone-env/ozone_user_keytab"
+          }
+        },
+        {
+          "name": "ozone_smokeuser",
+          "reference": "/smokeuser"
+        }
+      ],
+      "configurations": [
+        {
+          "ozone-site": {
+            "hadoop.security.authentication": "kerberos",
+            "ozone.security.enabled": "true",
+            "ozone.security.http.kerberos.enabled": "true",
+            "ozone.http.filter.initializers": "org.apache.hadoop.security.AuthenticationFilterInitializer"
+          }
+        },
+        {
+          "ozone-core-site": {
+            "hadoop.security.authentication": "kerberos"
+          }
+        }
+      ],
+      "components": [
+        {
+          "name": "OZONE_SCM",
+          "identities": [
+            {
+              "name": "ozone_scm",
+              "principal": {
+                "value": "ozone-scm/_HOST@${realm}",
+                "type": "service",
+                "configuration": "ozone-site/hdds.scm.kerberos.principal",
+                "local_username": "${ozone-env/ozone_user}"
+              },
+              "keytab": {
+                "file": "${keytab_dir}/ozone-scm.service.keytab",
+                "owner": {
+                  "name": "${ozone-env/ozone_user}",
+                  "access": "r"
+                },
+                "group": {
+                  "name": "${cluster-env/user_group}",
+                  "access": ""
+                },
+                "configuration": "ozone-site/hdds.scm.kerberos.keytab.file"
+              }
+            },
+            {
+              "name": "ozone_scm_spnego",
+              "reference": "/spnego",
+              "principal": {
+                "configuration": "ozone-site/hdds.scm.http.auth.kerberos.principal"
+              },
+              "keytab": {
+                "configuration": "ozone-site/hdds.scm.http.auth.kerberos.keytab"
+              }
+            }
+          ],
+          "configurations": [
+            {
+              "ozone-site": {
+                "hdds.scm.http.auth.type": "kerberos"
+              }
+            }
+          ]
+        },
+        {
+          "name": "OZONE_OM",
+          "identities": [
+            {
+              "name": "ozone_om",
+              "principal": {
+                "value": "ozone/_HOST@${realm}",
+                "type": "service",
+                "configuration": "ozone-site/ozone.om.kerberos.principal",
+                "local_username": "${ozone-env/ozone_user}"
+              },
+              "keytab": {
+                "file": "${keytab_dir}/ozone-om.service.keytab",
+                "owner": {
+                  "name": "${ozone-env/ozone_user}",
+                  "access": "r"
+                },
+                "group": {
+                  "name": "${cluster-env/user_group}",
+                  "access": ""
+                },
+                "configuration": "ozone-site/ozone.om.kerberos.keytab.file"
+              }
+            },
+            {
+              "name": "ozone_om_spnego",
+              "reference": "/spnego",
+              "principal": {
+                "configuration": "ozone-site/ozone.om.http.auth.kerberos.principal"
+              },
+              "keytab": {
+                "configuration": "ozone-site/ozone.om.http.auth.kerberos.keytab"
+              }
+            }
+          ],
+          "configurations": [
+            {
+              "ozone-site": {
+                "ozone.om.http.auth.type": "kerberos"
+              }
+            }
+          ]
+        },
+        {
+          "name": "OZONE_S3G",
+          "identities": [
+            {
+              "name": "ozone_s3g",
+              "principal": {
+                "value": "ozone-s3g/_HOST@${realm}",
+                "type": "service",
+                "configuration": "ozone-site/ozone.s3g.kerberos.principal",
+                "local_username": "${ozone-env/ozone_user}"
+              },
+              "keytab": {
+                "file": "${keytab_dir}/ozone-s3g.service.keytab",
+                "owner": {
+                  "name": "${ozone-env/ozone_user}",
+                  "access": "r"
+                },
+                "group": {
+                  "name": "${cluster-env/user_group}",
+                  "access": ""
+                },
+                "configuration": "ozone-site/ozone.s3g.kerberos.keytab.file"
+              }
+            },
+            {
+              "name": "ozone_s3g_spnego",
+              "reference": "/spnego",
+              "principal": {
+                "configuration": "ozone-site/ozone.s3g.http.auth.kerberos.principal"
+              },
+              "keytab": {
+                "configuration": "ozone-site/ozone.s3g.http.auth.kerberos.keytab"
+              }
+            }
+          ],
+          "configurations": [
+            {
+              "ozone-site": {
+                "ozone.s3g.http.auth.type": "kerberos"
+              }
+            }
+          ]
+        },
+        {
+          "name": "OZONE_DATANODE",
+          "identities": [
+            {
+              "name": "ozone_dn",
+              "principal": {
+                "value": "ozone-dn/_HOST@${realm}",
+                "type": "service",
+                "configuration": "ozone-site/dfs.datanode.kerberos.principal",
+                "local_username": "${ozone-env/ozone_user}"
+              },
+              "keytab": {
+                "file": "${keytab_dir}/ozone-dn.service.keytab",
+                "owner": {
+                  "name": "${ozone-env/ozone_user}",
+                  "access": "r"
+                },
+                "group": {
+                  "name": "${cluster-env/user_group}",
+                  "access": ""
+                },
+                "configuration": "ozone-site/dfs.datanode.keytab.file"
+              }
+            },
+            {
+              "name": "ozone_dn_spnego",
+              "reference": "/spnego",
+              "principal": {
+                "configuration": "ozone-site/hdds.datanode.http.auth.kerberos.principal"
+              },
+              "keytab": {
+                "configuration": "ozone-site/hdds.datanode.http.auth.kerberos.keytab"
+              }
+            }
+          ],
+          "configurations": [
+            {
+              "ozone-site": {
+                "hdds.datanode.http.auth.type": "kerberos"
+              }
+            }
+          ]
+        },
+        {
+          "name": "OZONE_RECON",
+          "identities": [
+            {
+              "name": "ozone_recon_spnego",
+              "reference": "/spnego",
+              "principal": {
+                "configuration": "ozone-site/ozone.recon.http.auth.kerberos.principal"
+              },
+              "keytab": {
+                "configuration": "ozone-site/ozone.recon.http.auth.kerberos.keytab"
+              }
+            }
+          ],
+          "configurations": [
+            {
+              "ozone-site": {
+                "ozone.s3g.http.auth.type": "kerberos"
+              }
+            }
+          ]
+        },
+        {
+          "name": "OZONE_FREON",
+          "identities": [
+            {
+              "name": "ozone_freon_spnego",
+              "reference": "/spnego",
+              "principal": {
+                "configuration": "ozone-site/ozone.freon.http.auth.kerberos.principal"
+              },
+              "keytab": {
+                "configuration": "ozone-site/ozone.freon.http.auth.kerberos.keytab"
+              }
+            }
+          ],
+          "configurations": [
+            {
+              "ozone-site": {
+                "ozone.s3g.http.auth.type": "kerberos"
+              }
+            }
+          ]
+        }
+      ]
+    }
+  ]
+}
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/metrics.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/metrics.json b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/metrics.json
new file mode 100644
--- /dev/null	(date 1739000817517)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/metrics.json	(date 1739000817517)
@@ -0,0 +1,4867 @@
+{
+  "OZONE_OM": {
+    "Component": [
+      {
+        "type": "ganglia",
+        "metrics": {
+          "default": {
+            "metrics/cpu/cpu_idle": {
+              "metric": "cpu_idle",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/cpu/cpu_nice": {
+              "metric": "cpu_nice",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/cpu/cpu_system": {
+              "metric": "cpu_system",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/cpu/cpu_user": {
+              "metric": "cpu_user",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/cpu/cpu_wio": {
+              "metric": "cpu_wio",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/disk_free": {
+              "metric": "disk_free",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/disk_total": {
+              "metric": "disk_total",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/load/load_fifteen": {
+              "metric": "load_fifteen",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/load/load_five": {
+              "metric": "load_five",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/load/load_one": {
+              "metric": "load_one",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_buffers": {
+              "metric": "mem_buffers",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_cached": {
+              "metric": "mem_cached",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_free": {
+              "metric": "mem_free",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_shared": {
+              "metric": "mem_shared",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_total": {
+              "metric": "mem_total",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/swap_free": {
+              "metric": "swap_free",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/swap_total": {
+              "metric": "swap_total",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/network/bytes_in": {
+              "metric": "bytes_in",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/network/bytes_out": {
+              "metric": "bytes_out",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/network/pkts_in": {
+              "metric": "pkts_in",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/network/pkts_out": {
+              "metric": "pkts_out",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/process/proc_run": {
+              "metric": "proc_run",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/process/proc_total": {
+              "metric": "proc_total",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/read_count": {
+              "metric": "read_count",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/write_count": {
+              "metric": "write_count",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/read_bytes": {
+              "metric": "read_bytes",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/write_bytes": {
+              "metric": "write_bytes",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/read_time": {
+              "metric": "read_time",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/write_time": {
+              "metric": "write_time",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/dfs/OMMetrics/NumBucketOps": {
+              "metric": "dfs.OMMetrics.NumBucketLists",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/OMMetrics/NumBuckets": {
+              "metric": "dfs.OMMetrics.NumBuckets",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/OMMetrics/NumFSOps": {
+              "metric": "dfs.OMMetrics.NumFSOps",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/dfs/OMMetrics/NumKeyOps": {
+              "metric": "dfs.OMMetrics.NumKeyOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/OMMetrics/NumKeys": {
+              "metric": "dfs.OMMetrics.NumKeys",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/OMMetrics/NumS3Buckets": {
+              "metric": "dfs.OMMetrics.NumS3Buckets",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/OMMetrics/NumTrashWriteRequests": {
+              "metric": "dfs.OMMetrics.NumTrashWriteRequests",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/OMMetrics/NumVolumeOps": {
+              "metric": "dfs.OMMetrics.NumVolumeOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/OMMetrics/NumVolumes": {
+              "metric": "dfs.OMMetrics.NumVolumes",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpcdetailed/submitRequest_avg_time": {
+              "metric": "rpcdetailed.rpcdetailed.SubmitRequestAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpcdetailed/submitRequest_numOps": {
+              "metric": "rpcdetailed.rpcdetailed.SubmitRequestNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/memNonHeapUsedM": {
+              "metric": "jvm.JvmMetrics.MemNonHeapUsedM",
+              "unit": "MB",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/threadsBlocked": {
+              "metric": "jvm.JvmMetrics.ThreadsBlocked",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/memNonHeapCommittedM": {
+              "metric": "jvm.JvmMetrics.MemNonHeapCommittedM",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/memHeapCommittedM": {
+              "metric": "jvm.JvmMetrics.MemHeapCommittedM",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsRunnable": {
+              "metric": "jvm.JvmMetrics.ThreadsRunnable",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsNew": {
+              "metric": "jvm.JvmMetrics.ThreadsNew",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/logWarn": {
+              "metric": "jvm.JvmMetrics.LogWarn",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsTimedWaiting": {
+              "metric": "jvm.JvmMetrics.ThreadsTimedWaiting",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/gcCount": {
+              "metric": "jvm.JvmMetrics.GcCount",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/memHeapUsedM": {
+              "metric": "jvm.JvmMetrics.MemHeapUsedM",
+              "unit": "MB",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsWaiting": {
+              "metric": "jvm.JvmMetrics.ThreadsWaiting",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/gcTimeMillis": {
+              "metric": "jvm.JvmMetrics.GcTimeMillis",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsTerminated": {
+              "metric": "jvm.JvmMetrics.ThreadsTerminated",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/logInfo": {
+              "metric": "jvm.JvmMetrics.LogInfo",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/logError": {
+              "metric": "jvm.JvmMetrics.LogError",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/logFatal": {
+              "metric": "jvm.JvmMetrics.LogFatal",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcCountConcurrentMarkSweep": {
+              "metric": "jvm.JvmMetrics.GcCountConcurrentMarkSweep",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcCountParNew": {
+              "metric": "jvm.JvmMetrics.GcCountParNew",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcNumInfoThresholdExceeded": {
+              "metric": "jvm.JvmMetrics.GcNumInfoThresholdExceeded",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcNumWarnThresholdExceeded": {
+              "metric": "jvm.JvmMetrics.GcNumWarnThresholdExceeded",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcTimeMillisConcurrentMarkSweep": {
+              "metric": "jvm.JvmMetrics.GcTimeMillisConcurrentMarkSweep",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcTimeMillisParNew": {
+              "metric": "jvm.JvmMetrics.GcTimeMillisParNew",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcTotalExtraSleepTime": {
+              "metric": "jvm.JvmMetrics.GcTotalExtraSleepTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/MemHeapMaxM": {
+              "metric": "jvm.JvmMetrics.MemHeapMaxM",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/MemMaxM": {
+              "metric": "jvm.JvmMetrics.MemMaxM",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/MemNonHeapMaxM": {
+              "metric": "jvm.JvmMetrics.MemNonHeapMaxM",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/RpcQueueTime_num_ops": {
+              "metric": "rpc.rpc.RpcQueueTimeNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/RpcProcessingTime_avg_time": {
+              "metric": "rpc.rpc.RpcProcessingTimeAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/rpcAuthenticationSuccesses": {
+              "metric": "rpc.rpc.RpcAuthenticationSuccesses",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/rpcAuthenticationFailures": {
+              "metric": "rpc.rpc.RpcAuthenticationFailures",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/rpcAuthorizationFailures": {
+              "metric": "rpc.rpc.RpcAuthorizationFailures",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/RpcQueueTime_avg_time": {
+              "metric": "rpc.rpc.RpcQueueTimeAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/SentBytes": {
+              "metric": "rpc.rpc.SentBytes",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/ReceivedBytes": {
+              "metric": "rpc.rpc.ReceivedBytes",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/NumOpenConnections": {
+              "metric": "rpc.rpc.NumOpenConnections",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/callQueueLen": {
+              "metric": "rpc.rpc.CallQueueLength",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/RpcProcessingTime_num_ops": {
+              "metric": "rpc.rpc.RpcProcessingTimeNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/rpcAuthorizationSuccesses": {
+              "metric": "rpc.rpc.RpcAuthorizationSuccesses",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/DroppedPubAll": {
+              "metric": "metricssystem.MetricsSystem.DroppedPubAll",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/NumActiveSinks": {
+              "metric": "metricssystem.MetricsSystem.NumActiveSinks",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/NumActiveSources": {
+              "metric": "metricssystem.MetricsSystem.NumActiveSources",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/NumAllSinks": {
+              "metric": "metricssystem.MetricsSystem.NumAllSinks",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/NumAllSources": {
+              "metric": "metricssystem.MetricsSystem.NumAllSources",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/PublishAvgTime": {
+              "metric": "metricssystem.MetricsSystem.PublishAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/PublishNumOps": {
+              "metric": "metricssystem.MetricsSystem.PublishNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/Sink_timelineAvgTime": {
+              "metric": "metricssystem.MetricsSystem.Sink_timelineAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/Sink_timelineDropped": {
+              "metric": "metricssystem.MetricsSystem.Sink_timelineDropped",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/Sink_timelineNumOps": {
+              "metric": "metricssystem.MetricsSystem.Sink_timelineNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/Sink_timelineQsize": {
+              "metric": "metricssystem.MetricsSystem.Sink_timelineQsize",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/SnapshotAvgTime": {
+              "metric": "metricssystem.MetricsSystem.SnapshotAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/SnapshotNumOps": {
+              "metric": "metricssystem.MetricsSystem.SnapshotNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/ugi/loginSuccess_avg_time": {
+              "metric": "ugi.UgiMetrics.LoginSuccessAvgTime",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/ugi/loginSuccess_num_ops": {
+              "metric": "ugi.UgiMetrics.LoginSuccessNumOps",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/ugi/loginFailure_avg_time": {
+              "metric": "ugi.UgiMetrics.LoginFailureAvgTime",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/ugi/loginFailure_num_ops": {
+              "metric": "ugi.UgiMetrics.LoginFailureNumOps",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/ugi/UgiMetrics/GetGroupsAvgTime": {
+              "metric": "ugi.UgiMetrics.GetGroupsAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/ugi/UgiMetrics/GetGroupsNumOps": {
+              "metric": "ugi.UgiMetrics.GetGroupsNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/live_hosts": {
+              "metric": "live_hosts",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/boottime": {
+              "metric": "boottime",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            }
+          }
+        }
+      },
+      {
+        "type": "jmx",
+        "jmx_source_uri": {
+          "http": "${ozone-site/ozone.om.http-address}",
+          "https": "${ozone-site/ozone.om.https-address}",
+          "https_property": "${ozone-site/ozone.http.policy}",
+          "https_property_value": "HTTPS_ONLY",
+          "kerberos_keytab": "${cluster-env/smokeuser_keytab}",
+          "kerberos_principal": "${cluster-env/smokeuser_principal_name}",
+          "connection_timeout": 5.0
+        },
+        "metrics": {
+          "default": {
+            "metrics/dfs/OMMetrics/NumBucketOps": {
+              "metric": "Hadoop:service=OzoneManager,name=OMMetrics.NumBucketOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/dfs/OMMetrics/NumBuckets": {
+              "metric": "Hadoop:service=OzoneManager,name=OMMetrics.NumBuckets",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/dfs/OMMetrics/NumFSOps": {
+              "metric": "Hadoop:service=OzoneManager,name=OMMetrics.NumFSOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/dfs/OMMetrics/NumKeyOps": {
+              "metric": "Hadoop:service=OzoneManager,name=OMMetrics.NumKeyOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/dfs/OMMetrics/NumKeys": {
+              "metric": "Hadoop:service=OzoneManager,name=OMMetrics.NumKeys",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/dfs/OMMetrics/NumS3Buckets": {
+              "metric": "Hadoop:service=OzoneManager,name=OMMetrics.NumS3Buckets",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/dfs/OMMetrics/NumTrashWriteRequests": {
+              "metric": "Hadoop:service=OzoneManager,name=OMMetrics.NumTrashWriteRequests",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/dfs/OMMetrics/NumVolumeOps": {
+              "metric": "Hadoop:service=OzoneManager,name=OMMetrics.NumVolumeOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/dfs/OMMetrics/NumVolumes": {
+              "metric": "Hadoop:service=OzoneManager,name=OMMetrics.NumVolumes",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memMaxM": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.MemMaxM",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memNonHeapUsedM": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.MemNonHeapUsedM",
+              "unit": "MB",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsBlocked": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.ThreadsBlocked",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memNonHeapCommittedM": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.MemNonHeapCommittedM",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memHeapCommittedM": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.MemHeapCommittedM",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsRunnable": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.ThreadsRunnable",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsNew": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.ThreadsNew",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/logWarn": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.LogWarn",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsTimedWaiting": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.ThreadsTimedWaiting",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/gcCount": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.GcCount",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memHeapUsedM": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.MemHeapUsedM",
+              "unit": "MB",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsWaiting": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.ThreadsWaiting",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/gcTimeMillis": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.GcTimeMillis",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsTerminated": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.ThreadsTerminated",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/logInfo": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.LogInfo",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/logError": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.LogError",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/logFatal": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.LogFatal",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/GcTimeMillisConcurrentMarkSweep": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.GcTimeMillisConcurrentMarkSweep",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/GcCountConcurrentMarkSweep": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.GcCountConcurrentMarkSweep",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ugi/loginFailure_avg_time": {
+              "metric": "Hadoop:service=OzoneManager,name=UgiMetrics.LoginFailureAvgTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ugi/loginSuccess_avg_time": {
+              "metric": "Hadoop:service=OzoneManager,name=UgiMetrics.LoginSuccessAvgTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ugi/loginSuccess_num_ops": {
+              "metric": "Hadoop:service=OzoneManager,name=UgiMetrics.LoginSuccessNumOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ugi/loginFailure_num_ops": {
+              "metric": "Hadoop:service=OzoneManager,name=UgiMetrics.LoginFailureNumOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/RpcQueueTime_num_ops": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.RpcQueueTimeNumOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/RpcProcessingTime_avg_time": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.RpcProcessingTimeAvgTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/rpcAuthenticationSuccesses": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.RpcAuthenticationSuccesses",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/rpcAuthenticationFailures": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.RpcAuthenticationFailures",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/rpcAuthorizationFailures": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.RpcAuthorizationFailures",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/RpcQueueTime_avg_time": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.RpcQueueTimeAvgTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/SentBytes": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.SentBytes",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/ReceivedBytes": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.ReceivedBytes",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/NumOpenConnections": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.NumOpenConnections",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/callQueueLen": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.callQueueLen",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/RpcProcessingTime_num_ops": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.RpcProcessingTimeNumOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/rpcAuthorizationSuccesses": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.RpcAuthorizationSuccesses",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/RpcQueueTimeAvgTime": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.RpcQueueTimeAvgTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/RpcProcessingTimeAvgTime": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.RpcProcessingTimeAvgTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/NonHeapMemoryUsed": {
+              "metric": "java.lang:type=Memory.NonHeapMemoryUsage[used]",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/HeapMemoryMax": {
+              "metric": "java.lang:type=Memory.HeapMemoryUsage[max]",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/StartTime": {
+              "metric": "java.lang:type=Runtime.StartTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/HeapMemoryUsed": {
+              "metric": "java.lang:type=Memory.HeapMemoryUsage[used]",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/NonHeapMemoryMax": {
+              "metric": "java.lang:type=Memory.NonHeapMemoryUsage[max]",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/Version": {
+              "metric": "Hadoop:service=OzoneManager,name=OzoneManagerInfo,component=ServerRuntime.Version",
+              "pointInTime": true,
+              "temporal": false
+            }
+          }
+        }
+      }
+    ],
+    "HostComponent": [
+      {
+        "type": "ganglia",
+        "metrics": {
+          "default": {
+            "metrics/cpu/cpu_idle": {
+              "metric": "cpu_idle",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/cpu/cpu_nice": {
+              "metric": "cpu_nice",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/cpu/cpu_system": {
+              "metric": "cpu_system",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/cpu/cpu_user": {
+              "metric": "cpu_user",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/cpu/cpu_wio": {
+              "metric": "cpu_wio",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/disk_free": {
+              "metric": "disk_free",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/disk_total": {
+              "metric": "disk_total",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/load/load_fifteen": {
+              "metric": "load_fifteen",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/load/load_five": {
+              "metric": "load_five",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/load/load_one": {
+              "metric": "load_one",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_buffers": {
+              "metric": "mem_buffers",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_cached": {
+              "metric": "mem_cached",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_free": {
+              "metric": "mem_free",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_shared": {
+              "metric": "mem_shared",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_total": {
+              "metric": "mem_total",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/swap_free": {
+              "metric": "swap_free",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/swap_total": {
+              "metric": "swap_total",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/network/bytes_in": {
+              "metric": "bytes_in",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/network/bytes_out": {
+              "metric": "bytes_out",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/network/pkts_in": {
+              "metric": "pkts_in",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/network/pkts_out": {
+              "metric": "pkts_out",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/process/proc_run": {
+              "metric": "proc_run",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/process/proc_total": {
+              "metric": "proc_total",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/read_count": {
+              "metric": "read_count",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/write_count": {
+              "metric": "write_count",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/read_bytes": {
+              "metric": "read_bytes",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/write_bytes": {
+              "metric": "write_bytes",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/read_time": {
+              "metric": "read_time",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/write_time": {
+              "metric": "write_time",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/dfs/OMMetrics/NumBucketOps": {
+              "metric": "dfs.OMMetrics.NumBucketLists",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/dfs/OMMetrics/NumBuckets": {
+              "metric": "dfs.OMMetrics.NumBuckets",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/dfs/OMMetrics/NumFSOps": {
+              "metric": "dfs.OMMetrics.NumFSOps",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/dfs/OMMetrics/NumKeyOps": {
+              "metric": "dfs.OMMetrics.NumKeyOps",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/dfs/OMMetrics/NumKeys": {
+              "metric": "dfs.OMMetrics.NumKeys",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/dfs/OMMetrics/NumS3Buckets": {
+              "metric": "dfs.OMMetrics.NumS3Buckets",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/dfs/OMMetrics/NumTrashWriteRequests": {
+              "metric": "dfs.OMMetrics.NumTrashWriteRequests",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/dfs/OMMetrics/NumVolumeOps": {
+              "metric": "dfs.OMMetrics.NumVolumeOps",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/dfs/OMMetrics/NumVolumes": {
+              "metric": "dfs.OMMetrics.NumVolumes",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/rpcdetailed/submitRequest_avg_time": {
+              "metric": "rpcdetailed.rpcdetailed.SubmitRequestAvgTime",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/rpcdetailed/submitRequest_numOps": {
+              "metric": "rpcdetailed.rpcdetailed.SubmitRequestNumOps",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/memNonHeapUsedM": {
+              "metric": "jvm.JvmMetrics.MemNonHeapUsedM",
+              "unit": "MB",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsBlocked": {
+              "metric": "jvm.JvmMetrics.ThreadsBlocked",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/memNonHeapCommittedM": {
+              "metric": "jvm.JvmMetrics.MemNonHeapCommittedM",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/memHeapCommittedM": {
+              "metric": "jvm.JvmMetrics.MemHeapCommittedM",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsRunnable": {
+              "metric": "jvm.JvmMetrics.ThreadsRunnable",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsNew": {
+              "metric": "jvm.JvmMetrics.ThreadsNew",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/logWarn": {
+              "metric": "jvm.JvmMetrics.LogWarn",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsTimedWaiting": {
+              "metric": "jvm.JvmMetrics.ThreadsTimedWaiting",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/gcCount": {
+              "metric": "jvm.JvmMetrics.GcCount",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/memHeapUsedM": {
+              "metric": "jvm.JvmMetrics.MemHeapUsedM",
+              "unit": "MB",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsWaiting": {
+              "metric": "jvm.JvmMetrics.ThreadsWaiting",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/gcTimeMillis": {
+              "metric": "jvm.JvmMetrics.GcTimeMillis",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsTerminated": {
+              "metric": "jvm.JvmMetrics.ThreadsTerminated",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/logInfo": {
+              "metric": "jvm.JvmMetrics.LogInfo",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/logError": {
+              "metric": "jvm.JvmMetrics.LogError",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/logFatal": {
+              "metric": "jvm.JvmMetrics.LogFatal",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcCountConcurrentMarkSweep": {
+              "metric": "jvm.JvmMetrics.GcCountConcurrentMarkSweep",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcCountParNew": {
+              "metric": "jvm.JvmMetrics.GcCountParNew",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcNumInfoThresholdExceeded": {
+              "metric": "jvm.JvmMetrics.GcNumInfoThresholdExceeded",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcNumWarnThresholdExceeded": {
+              "metric": "jvm.JvmMetrics.GcNumWarnThresholdExceeded",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcTimeMillisConcurrentMarkSweep": {
+              "metric": "jvm.JvmMetrics.GcTimeMillisConcurrentMarkSweep",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcTimeMillisParNew": {
+              "metric": "jvm.JvmMetrics.GcTimeMillisParNew",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcTotalExtraSleepTime": {
+              "metric": "jvm.JvmMetrics.GcTotalExtraSleepTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/MemHeapMaxM": {
+              "metric": "jvm.JvmMetrics.MemHeapMaxM",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/MemMaxM": {
+              "metric": "jvm.JvmMetrics.MemMaxM",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/MemNonHeapMaxM": {
+              "metric": "jvm.JvmMetrics.MemNonHeapMaxM",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/RpcQueueTime_num_ops": {
+              "metric": "rpc.rpc.RpcQueueTimeNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/RpcProcessingTime_avg_time": {
+              "metric": "rpc.rpc.RpcProcessingTimeAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/rpcAuthenticationSuccesses": {
+              "metric": "rpc.rpc.RpcAuthenticationSuccesses",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/rpcAuthenticationFailures": {
+              "metric": "rpc.rpc.RpcAuthenticationFailures",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/rpcAuthorizationFailures": {
+              "metric": "rpc.rpc.RpcAuthorizationFailures",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/RpcQueueTime_avg_time": {
+              "metric": "rpc.rpc.RpcQueueTimeAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/SentBytes": {
+              "metric": "rpc.rpc.SentBytes",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/ReceivedBytes": {
+              "metric": "rpc.rpc.ReceivedBytes",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/NumOpenConnections": {
+              "metric": "rpc.rpc.NumOpenConnections",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/callQueueLen": {
+              "metric": "rpc.rpc.CallQueueLength",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/RpcProcessingTime_num_ops": {
+              "metric": "rpc.rpc.RpcProcessingTimeNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/rpcAuthorizationSuccesses": {
+              "metric": "rpc.rpc.RpcAuthorizationSuccesses",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/DroppedPubAll": {
+              "metric": "metricssystem.MetricsSystem.DroppedPubAll",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/NumActiveSinks": {
+              "metric": "metricssystem.MetricsSystem.NumActiveSinks",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/NumActiveSources": {
+              "metric": "metricssystem.MetricsSystem.NumActiveSources",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/NumAllSinks": {
+              "metric": "metricssystem.MetricsSystem.NumAllSinks",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/NumAllSources": {
+              "metric": "metricssystem.MetricsSystem.NumAllSources",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/PublishAvgTime": {
+              "metric": "metricssystem.MetricsSystem.PublishAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/PublishNumOps": {
+              "metric": "metricssystem.MetricsSystem.PublishNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/Sink_timelineAvgTime": {
+              "metric": "metricssystem.MetricsSystem.Sink_timelineAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/Sink_timelineDropped": {
+              "metric": "metricssystem.MetricsSystem.Sink_timelineDropped",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/Sink_timelineNumOps": {
+              "metric": "metricssystem.MetricsSystem.Sink_timelineNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/Sink_timelineQsize": {
+              "metric": "metricssystem.MetricsSystem.Sink_timelineQsize",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/SnapshotAvgTime": {
+              "metric": "metricssystem.MetricsSystem.SnapshotAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/SnapshotNumOps": {
+              "metric": "metricssystem.MetricsSystem.SnapshotNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/ugi/loginSuccess_avg_time": {
+              "metric": "ugi.UgiMetrics.LoginSuccessAvgTime",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/ugi/loginSuccess_num_ops": {
+              "metric": "ugi.UgiMetrics.LoginSuccessNumOps",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/ugi/loginFailure_avg_time": {
+              "metric": "ugi.UgiMetrics.LoginFailureAvgTime",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/ugi/loginFailure_num_ops": {
+              "metric": "ugi.UgiMetrics.LoginFailureNumOps",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/ugi/UgiMetrics/GetGroupsAvgTime": {
+              "metric": "ugi.UgiMetrics.GetGroupsAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/ugi/UgiMetrics/GetGroupsNumOps": {
+              "metric": "ugi.UgiMetrics.GetGroupsNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/live_hosts": {
+              "metric": "live_hosts",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/boottime": {
+              "metric": "boottime",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            }
+          }
+        }
+      },
+      {
+        "type": "jmx",
+        "jmx_source_uri": {
+          "http": "${ozone-site/ozone.om.http-address}",
+          "https": "${ozone-site/ozone.om.https-address}",
+          "https_property": "${ozone-site/ozone.http.policy}",
+          "https_property_value": "HTTPS_ONLY",
+          "kerberos_keytab": "${cluster-env/smokeuser_keytab}",
+          "kerberos_principal": "${cluster-env/smokeuser_principal_name}",
+          "connection_timeout": 5.0
+        },
+        "metrics": {
+          "default": {
+            "metrics/dfs/OMMetrics/NumBucketOps": {
+              "metric": "Hadoop:service=OzoneManager,name=OMMetrics.NumBucketOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/dfs/OMMetrics/NumBuckets": {
+              "metric": "Hadoop:service=OzoneManager,name=OMMetrics.NumBuckets",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/dfs/OMMetrics/NumFSOps": {
+              "metric": "Hadoop:service=OzoneManager,name=OMMetrics.NumFSOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/dfs/OMMetrics/NumKeyOps": {
+              "metric": "Hadoop:service=OzoneManager,name=OMMetrics.NumKeyOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/dfs/OMMetrics/NumKeys": {
+              "metric": "Hadoop:service=OzoneManager,name=OMMetrics.NumKeys",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/dfs/OMMetrics/NumS3Buckets": {
+              "metric": "Hadoop:service=OzoneManager,name=OMMetrics.NumS3Buckets",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/dfs/OMMetrics/NumTrashWriteRequests": {
+              "metric": "Hadoop:service=OzoneManager,name=OMMetrics.NumTrashWriteRequests",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/dfs/OMMetrics/NumVolumeOps": {
+              "metric": "Hadoop:service=OzoneManager,name=OMMetrics.NumVolumeOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/dfs/OMMetrics/NumVolumes": {
+              "metric": "Hadoop:service=OzoneManager,name=OMMetrics.NumVolumes",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memMaxM": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.MemMaxM",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memNonHeapUsedM": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.MemNonHeapUsedM",
+              "unit": "MB",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsBlocked": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.ThreadsBlocked",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memNonHeapCommittedM": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.MemNonHeapCommittedM",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memHeapCommittedM": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.MemHeapCommittedM",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsRunnable": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.ThreadsRunnable",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsNew": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.ThreadsNew",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/logWarn": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.LogWarn",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsTimedWaiting": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.ThreadsTimedWaiting",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/gcCount": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.GcCount",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memHeapUsedM": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.MemHeapUsedM",
+              "unit": "MB",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsWaiting": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.ThreadsWaiting",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/gcTimeMillis": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.GcTimeMillis",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsTerminated": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.ThreadsTerminated",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/logInfo": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.LogInfo",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/logError": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.LogError",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/logFatal": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.LogFatal",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/GcTimeMillisConcurrentMarkSweep": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.GcTimeMillisConcurrentMarkSweep",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/GcCountConcurrentMarkSweep": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.GcCountConcurrentMarkSweep",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ugi/loginFailure_avg_time": {
+              "metric": "Hadoop:service=OzoneManager,name=UgiMetrics.LoginFailureAvgTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ugi/loginSuccess_avg_time": {
+              "metric": "Hadoop:service=OzoneManager,name=UgiMetrics.LoginSuccessAvgTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ugi/loginSuccess_num_ops": {
+              "metric": "Hadoop:service=OzoneManager,name=UgiMetrics.LoginSuccessNumOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ugi/loginFailure_num_ops": {
+              "metric": "Hadoop:service=OzoneManager,name=UgiMetrics.LoginFailureNumOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/RpcQueueTime_num_ops": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.RpcQueueTimeNumOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/RpcProcessingTime_avg_time": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862..RpcProcessingTimeAvgTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/rpcAuthenticationSuccesses": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.RpcAuthenticationSuccesses",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/rpcAuthenticationFailures": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.RpcAuthenticationFailures",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/rpcAuthorizationFailures": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.RpcAuthorizationFailures",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/RpcQueueTime_avg_time": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.RpcQueueTimeAvgTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/SentBytes": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.SentBytes",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/ReceivedBytes": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.ReceivedBytes",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/NumOpenConnections": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.NumOpenConnections",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/callQueueLen": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.callQueueLen",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/RpcProcessingTime_num_ops": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.RpcProcessingTimeNumOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/rpcAuthorizationSuccesses": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.RpcAuthorizationSuccesses",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/RpcQueueTimeAvgTime": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.RpcQueueTimeAvgTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/RpcProcessingTimeAvgTime": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.RpcProcessingTimeAvgTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/NonHeapMemoryUsed": {
+              "metric": "java.lang:type=Memory.NonHeapMemoryUsage[used]",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/HeapMemoryMax": {
+              "metric": "java.lang:type=Memory.HeapMemoryUsage[max]",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/StartTime": {
+              "metric": "java.lang:type=Runtime.StartTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/HeapMemoryUsed": {
+              "metric": "java.lang:type=Memory.HeapMemoryUsage[used]",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/NonHeapMemoryMax": {
+              "metric": "java.lang:type=Memory.NonHeapMemoryUsage[max]",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/Version": {
+              "metric": "Hadoop:service=OzoneManager,name=OzoneManagerInfo,component=ServerRuntime.Version",
+              "pointInTime": true,
+              "temporal": false
+            }
+          }
+        }
+      }
+    ]
+  },
+  "OZONE_SCM": {
+    "Component": [
+      {
+        "type": "ganglia",
+        "metrics": {
+          "default": {
+            "metrics/cpu/cpu_idle": {
+              "metric": "cpu_idle",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/cpu/cpu_nice": {
+              "metric": "cpu_nice",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/cpu/cpu_system": {
+              "metric": "cpu_system",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/cpu/cpu_user": {
+              "metric": "cpu_user",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/cpu/cpu_wio": {
+              "metric": "cpu_wio",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/disk_free": {
+              "metric": "disk_free",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/disk_total": {
+              "metric": "disk_total",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/load/load_fifteen": {
+              "metric": "load_fifteen",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/load/load_five": {
+              "metric": "load_five",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/load/load_one": {
+              "metric": "load_one",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_buffers": {
+              "metric": "mem_buffers",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_cached": {
+              "metric": "mem_cached",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_free": {
+              "metric": "mem_free",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_shared": {
+              "metric": "mem_shared",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_total": {
+              "metric": "mem_total",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/swap_free": {
+              "metric": "swap_free",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/swap_total": {
+              "metric": "swap_total",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/network/bytes_in": {
+              "metric": "bytes_in",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/network/bytes_out": {
+              "metric": "bytes_out",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/network/pkts_in": {
+              "metric": "pkts_in",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/network/pkts_out": {
+              "metric": "pkts_out",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/process/proc_run": {
+              "metric": "proc_run",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/process/proc_total": {
+              "metric": "proc_total",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/read_count": {
+              "metric": "read_count",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/write_count": {
+              "metric": "write_count",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/read_bytes": {
+              "metric": "read_bytes",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/write_bytes": {
+              "metric": "write_bytes",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/read_time": {
+              "metric": "read_time",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/write_time": {
+              "metric": "write_time",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/ozone/SCMNodeManager/DiskCapacity": {
+              "metric": "ozone.SCMNodeManager.DiskCapacity",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/SCMNodeManager/DiskRemaining": {
+              "metric": "ozone.SCMNodeManager.DiskRemaining",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/ozone/SCMNodeManager/DiskUsed": {
+              "metric": "ozone.SCMNodeManager.DiskUsed",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/ozone/SCMNodeManager/InServiceDeadNodes": {
+              "metric": "ozone.SCMNodeManager.InServiceDeadNodes",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/ozone/SCMNodeManager/InServiceHealthyNodes": {
+              "metric": "ozone.SCMNodeManager.InServiceHealthyNodes",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/ozone/SCMNodeManager/InServiceHealthyReadonlyNodes": {
+              "metric": "ozone.SCMNodeManager.InServiceHealthyReadonlyNodes",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/ozone/SCMNodeManager/InServiceStaleNodes": {
+              "metric": "ozone.SCMNodeManager.InServiceStaleNodes",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/SCMPipelineMetrics/NumPipelineAllocated": {
+              "metric": "default.SCMPipelineMetrics.NumPipelineAllocated",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/SCMPipelineMetrics/NumPipelineCreated": {
+              "metric": "default.SCMPipelineMetrics.NumPipelineCreated",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/SCMPipelineMetrics/NumPipelineDestroyed": {
+              "metric": "default.SCMPipelineMetrics.NumPipelineDestroyed",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/SCMPipelineMetrics/NumPipelineReportProcessed": {
+              "metric": "default.SCMPipelineMetrics.NumPipelineReportProcessed",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/SCMPipelineMetrics/NumPipelineContainSameDatanodes": {
+              "metric": "default.SCMPipelineMetrics.NumPipelineContainSameDatanodes",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/SCMContainerMetrics/ClosedContainers": {
+              "metric": "default.SCMContainerMetrics.ClosedContainers",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/SCMContainerMetrics/ClosingContainers": {
+              "metric": "default.SCMContainerMetrics.ClosingContainers",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/SCMContainerMetrics/DeletedContainers": {
+              "metric": "default.SCMContainerMetrics.DeletedContainers",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/SCMContainerMetrics/DeletingContainers": {
+              "metric": "default.SCMContainerMetrics.DeletingContainers",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/SCMContainerMetrics/OpenContainers": {
+              "metric": "default.SCMContainerMetrics.OpenContainers",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/SCMContainerMetrics/TotalContainers": {
+              "metric": "default.SCMContainerMetrics.TotalContainers",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/SCMContainerManagerMetrics/NumContainerReportsProcessedSuccessful": {
+              "metric": "ozone.SCMContainerManagerMetrics.NumContainerReportsProcessedSuccessful",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/SCMContainerManagerMetrics/NumContainerReportsProcessedFailed": {
+              "metric": "ozone.SCMContainerManagerMetrics.NumContainerReportsProcessedFailed",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/SCMContainerPlacementMetrics/DatanodeRequestCount": {
+              "metric": "ozone.SCMContainerPlacementMetrics.DatanodeRequestCount",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpcdetailed/submitRequest_avg_time": {
+              "metric": "rpcdetailed.rpcdetailed.SubmitRequestAvgTime",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/rpcdetailed/submitRequest_numOps": {
+              "metric": "rpcdetailed.rpcdetailed.SubmitRequestNumOps",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/memNonHeapUsedM": {
+              "metric": "jvm.JvmMetrics.MemNonHeapUsedM",
+              "unit": "MB",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsBlocked": {
+              "metric": "jvm.JvmMetrics.ThreadsBlocked",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/memNonHeapCommittedM": {
+              "metric": "jvm.JvmMetrics.MemNonHeapCommittedM",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/memHeapCommittedM": {
+              "metric": "jvm.JvmMetrics.MemHeapCommittedM",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsRunnable": {
+              "metric": "jvm.JvmMetrics.ThreadsRunnable",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsNew": {
+              "metric": "jvm.JvmMetrics.ThreadsNew",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/logWarn": {
+              "metric": "jvm.JvmMetrics.LogWarn",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsTimedWaiting": {
+              "metric": "jvm.JvmMetrics.ThreadsTimedWaiting",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/gcCount": {
+              "metric": "jvm.JvmMetrics.GcCount",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/memHeapUsedM": {
+              "metric": "jvm.JvmMetrics.MemHeapUsedM",
+              "unit": "MB",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsWaiting": {
+              "metric": "jvm.JvmMetrics.ThreadsWaiting",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/gcTimeMillis": {
+              "metric": "jvm.JvmMetrics.GcTimeMillis",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsTerminated": {
+              "metric": "jvm.JvmMetrics.ThreadsTerminated",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/logInfo": {
+              "metric": "jvm.JvmMetrics.LogInfo",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/logError": {
+              "metric": "jvm.JvmMetrics.LogError",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/logFatal": {
+              "metric": "jvm.JvmMetrics.LogFatal",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcCountConcurrentMarkSweep": {
+              "metric": "jvm.JvmMetrics.GcCountConcurrentMarkSweep",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcCountParNew": {
+              "metric": "jvm.JvmMetrics.GcCountParNew",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcNumInfoThresholdExceeded": {
+              "metric": "jvm.JvmMetrics.GcNumInfoThresholdExceeded",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcNumWarnThresholdExceeded": {
+              "metric": "jvm.JvmMetrics.GcNumWarnThresholdExceeded",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcTimeMillisConcurrentMarkSweep": {
+              "metric": "jvm.JvmMetrics.GcTimeMillisConcurrentMarkSweep",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcTimeMillisParNew": {
+              "metric": "jvm.JvmMetrics.GcTimeMillisParNew",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcTotalExtraSleepTime": {
+              "metric": "jvm.JvmMetrics.GcTotalExtraSleepTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/MemHeapMaxM": {
+              "metric": "jvm.JvmMetrics.MemHeapMaxM",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/MemMaxM": {
+              "metric": "jvm.JvmMetrics.MemMaxM",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/MemNonHeapMaxM": {
+              "metric": "jvm.JvmMetrics.MemNonHeapMaxM",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/RpcQueueTime_num_ops": {
+              "metric": "rpc.rpc.RpcQueueTimeNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/RpcProcessingTime_avg_time": {
+              "metric": "rpc.rpc.RpcProcessingTimeAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/rpcAuthenticationSuccesses": {
+              "metric": "rpc.rpc.RpcAuthenticationSuccesses",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/rpcAuthenticationFailures": {
+              "metric": "rpc.rpc.RpcAuthenticationFailures",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/rpcAuthorizationFailures": {
+              "metric": "rpc.rpc.RpcAuthorizationFailures",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/RpcQueueTime_avg_time": {
+              "metric": "rpc.rpc.RpcQueueTimeAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/SentBytes": {
+              "metric": "rpc.rpc.SentBytes",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/ReceivedBytes": {
+              "metric": "rpc.rpc.ReceivedBytes",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/NumOpenConnections": {
+              "metric": "rpc.rpc.NumOpenConnections",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/callQueueLen": {
+              "metric": "rpc.rpc.CallQueueLength",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/RpcProcessingTime_num_ops": {
+              "metric": "rpc.rpc.RpcProcessingTimeNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/rpcAuthorizationSuccesses": {
+              "metric": "rpc.rpc.RpcAuthorizationSuccesses",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/DroppedPubAll": {
+              "metric": "metricssystem.MetricsSystem.DroppedPubAll",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/NumActiveSinks": {
+              "metric": "metricssystem.MetricsSystem.NumActiveSinks",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/NumActiveSources": {
+              "metric": "metricssystem.MetricsSystem.NumActiveSources",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/NumAllSinks": {
+              "metric": "metricssystem.MetricsSystem.NumAllSinks",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/NumAllSources": {
+              "metric": "metricssystem.MetricsSystem.NumAllSources",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/PublishAvgTime": {
+              "metric": "metricssystem.MetricsSystem.PublishAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/PublishNumOps": {
+              "metric": "metricssystem.MetricsSystem.PublishNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/Sink_timelineAvgTime": {
+              "metric": "metricssystem.MetricsSystem.Sink_timelineAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/Sink_timelineDropped": {
+              "metric": "metricssystem.MetricsSystem.Sink_timelineDropped",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/Sink_timelineNumOps": {
+              "metric": "metricssystem.MetricsSystem.Sink_timelineNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/Sink_timelineQsize": {
+              "metric": "metricssystem.MetricsSystem.Sink_timelineQsize",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/SnapshotAvgTime": {
+              "metric": "metricssystem.MetricsSystem.SnapshotAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/SnapshotNumOps": {
+              "metric": "metricssystem.MetricsSystem.SnapshotNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/ugi/loginSuccess_avg_time": {
+              "metric": "ugi.UgiMetrics.LoginSuccessAvgTime",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/ugi/loginSuccess_num_ops": {
+              "metric": "ugi.UgiMetrics.LoginSuccessNumOps",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/ugi/loginFailure_avg_time": {
+              "metric": "ugi.UgiMetrics.LoginFailureAvgTime",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/ugi/loginFailure_num_ops": {
+              "metric": "ugi.UgiMetrics.LoginFailureNumOps",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/ugi/UgiMetrics/GetGroupsAvgTime": {
+              "metric": "ugi.UgiMetrics.GetGroupsAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/ugi/UgiMetrics/GetGroupsNumOps": {
+              "metric": "ugi.UgiMetrics.GetGroupsNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/live_hosts": {
+              "metric": "live_hosts",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/boottime": {
+              "metric": "boottime",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            }
+          }
+        }
+      },
+      {
+        "type": "jmx",
+        "jmx_source_uri": {
+          "http": "${ozone-site/ozone.scm.http-address}",
+          "https": "${ozone-site/ozone.scm.https-address}",
+          "https_property": "${ozone-site/ozone.http.policy}",
+          "https_property_value": "HTTPS_ONLY",
+          "kerberos_keytab": "${cluster-env/smokeuser_keytab}",
+          "kerberos_principal": "${cluster-env/smokeuser_principal_name}",
+          "connection_timeout": 5.0
+        },
+        "metrics": {
+          "default": {
+            "metrics/ozone/SCMNodeManager/DiskCapacity": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMNodeMetrics.DiskCapacity",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ozone/SCMNodeManager/DiskRemaining": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMNodeMetricss.DiskRemaining",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ozone/SCMNodeManager/DiskUsed": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMNodeMetrics.DiskUsed",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ozone/SCMNodeManager/InServiceDeadNodes": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMNodeMetrics.InServiceDeadNodes",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ozone/SCMNodeManager/InServiceHealthyNodes": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMNodeMetrics.InServiceHealthyNodes",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ozone/SCMNodeManager/InServiceHealthyReadonlyNodes": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMNodeMetrics.InServiceHealthyReadonlyNodes",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ozone/SCMNodeManager/InServiceStaleNodes": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMNodeMetrics.InServiceStaleNodes",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/SCMPipelineMetrics/NumPipelineAllocated": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMPipelineMetrics.NumPipelineAllocated",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/SCMPipelineMetrics/NumPipelineCreated": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMPipelineMetrics.NumPipelineCreated",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/SCMPipelineMetrics/NumPipelineDestroyed": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMPipelineMetrics.NumPipelineDestroyed",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/SCMPipelineMetrics/NumPipelineReportProcessed": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMPipelineMetrics.NumPipelineReportProcessed",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/SCMPipelineMetrics/NumPipelineContainSameDatanodes": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMPipelineMetrics.NumPipelineContainSameDatanodes",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/SCMContainerMetrics/OpenContainers": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMContainerMetrics.OpenContainers",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/SCMContainerMetrics/ClosingContainers": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMContainerMetrics.ClosingContainers",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/SCMContainerMetrics/QuasiClosedContainers": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMContainerMetrics.QuasiClosedContainers",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/SCMContainerMetrics/ClosedContainers": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMContainerMetrics.ClosedContainers",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/SCMContainerMetrics/DeletingContainers": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMContainerMetrics.DeletingContainers",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/SCMContainerMetrics/DeletedContainers": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMContainerMetrics.DeletedContainers",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/SCMContainerMetrics/TotalContainers": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMContainerMetrics.TotalContainers",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memMaxM": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.MemMaxM",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memNonHeapUsedM": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.MemNonHeapUsedM",
+              "unit": "MB",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsBlocked": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.ThreadsBlocked",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memNonHeapCommittedM": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.MemNonHeapCommittedM",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memHeapCommittedM": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.MemHeapCommittedM",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsRunnable": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.ThreadsRunnable",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsNew": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.ThreadsNew",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/logWarn": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.LogWarn",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsTimedWaiting": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.ThreadsTimedWaiting",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/gcCount": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.GcCount",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memHeapUsedM": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.MemHeapUsedM",
+              "unit": "MB",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsWaiting": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.ThreadsWaiting",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/gcTimeMillis": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.GcTimeMillis",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsTerminated": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.ThreadsTerminated",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/logInfo": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.LogInfo",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/logError": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.LogError",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/logFatal": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.LogFatal",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/GcTimeMillisConcurrentMarkSweep": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.GcTimeMillisConcurrentMarkSweep",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/GcCountConcurrentMarkSweep": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.GcCountConcurrentMarkSweep",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ugi/loginFailure_avg_time": {
+              "metric": "Hadoop:service=StorageContainerManager,name=UgiMetrics.LoginFailureNumOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ugi/loginSuccess_avg_time": {
+              "metric": "Hadoop:service=StorageContainerManager,name=UgiMetrics.LoginSuccessAvgTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ugi/loginSuccess_num_ops": {
+              "metric": "Hadoop:service=StorageContainerManager,name=UgiMetrics.LoginSuccessNumOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ugi/loginFailure_num_ops": {
+              "metric": "Hadoop:service=StorageContainerManager,name=UgiMetrics.LoginFailureNumOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/RpcQueueTime_num_ops": {
+              "metric": "Hadoop:service=StorageContainerManager,name=RpcActivityForPort9861.RpcQueueTimeNumOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/RpcProcessingTime_avg_time": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9861.RpcProcessingTimeAvgTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/rpcAuthenticationSuccesses": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9861.RpcAuthenticationSuccesses",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/rpcAuthenticationFailures": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.RpcAuthenticationFailures",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/rpcAuthorizationFailures": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9861.RpcAuthorizationFailures",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/RpcQueueTime_avg_time": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9861.RpcQueueTimeAvgTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/SentBytes": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9861.SentBytes",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/ReceivedBytes": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9861.ReceivedBytes",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/NumOpenConnections": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9861.NumOpenConnections",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/callQueueLen": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9861.callQueueLen",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/RpcProcessingTime_num_ops": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9861.RpcProcessingTimeNumOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/rpcAuthorizationSuccesses": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9861.RpcAuthorizationSuccesses",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/RpcQueueTimeAvgTime": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9861.RpcQueueTimeAvgTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/RpcProcessingTimeAvgTime": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9861.RpcProcessingTimeAvgTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/NonHeapMemoryUsed": {
+              "metric": "java.lang:type=Memory.NonHeapMemoryUsage[used]",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/HeapMemoryMax": {
+              "metric": "java.lang:type=Memory.HeapMemoryUsage[max]",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/StartTime": {
+              "metric": "java.lang:type=Runtime.StartTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/HeapMemoryUsed": {
+              "metric": "java.lang:type=Memory.HeapMemoryUsage[used]",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/NonHeapMemoryMax": {
+              "metric": "java.lang:type=Memory.NonHeapMemoryUsage[max]",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/Version": {
+              "metric": "Hadoop:service=OzoneManager,name=OzoneManagerInfo,component=ServerRuntime.Version",
+              "pointInTime": true,
+              "temporal": false
+            }
+          }
+        }
+      }
+    ],
+    "HostComponent": [
+      {
+        "type": "ganglia",
+        "metrics": {
+          "default": {
+            "metrics/cpu/cpu_idle": {
+              "metric": "cpu_idle",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/cpu/cpu_nice": {
+              "metric": "cpu_nice",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/cpu/cpu_system": {
+              "metric": "cpu_system",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/cpu/cpu_user": {
+              "metric": "cpu_user",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/cpu/cpu_wio": {
+              "metric": "cpu_wio",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/disk_free": {
+              "metric": "disk_free",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/disk_total": {
+              "metric": "disk_total",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/load/load_fifteen": {
+              "metric": "load_fifteen",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/load/load_five": {
+              "metric": "load_five",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/load/load_one": {
+              "metric": "load_one",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_buffers": {
+              "metric": "mem_buffers",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_cached": {
+              "metric": "mem_cached",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_free": {
+              "metric": "mem_free",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_shared": {
+              "metric": "mem_shared",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_total": {
+              "metric": "mem_total",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/swap_free": {
+              "metric": "swap_free",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/swap_total": {
+              "metric": "swap_total",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/network/bytes_in": {
+              "metric": "bytes_in",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/network/bytes_out": {
+              "metric": "bytes_out",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/network/pkts_in": {
+              "metric": "pkts_in",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/network/pkts_out": {
+              "metric": "pkts_out",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/process/proc_run": {
+              "metric": "proc_run",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/process/proc_total": {
+              "metric": "proc_total",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/read_count": {
+              "metric": "read_count",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/write_count": {
+              "metric": "write_count",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/read_bytes": {
+              "metric": "read_bytes",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/write_bytes": {
+              "metric": "write_bytes",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/read_time": {
+              "metric": "read_time",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/write_time": {
+              "metric": "write_time",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/ozone/SCMNodeManager/DiskCapacity": {
+              "metric": "ozone.SCMNodeManager.DiskCapacity",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/SCMNodeManager/DiskRemaining": {
+              "metric": "ozone.SCMNodeManager.DiskRemaining",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/ozone/SCMNodeManager/DiskUsed": {
+              "metric": "ozone.SCMNodeManager.DiskUsed",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/ozone/SCMNodeManager/InServiceDeadNodes": {
+              "metric": "ozone.SCMNodeManager.InServiceDeadNodes",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/ozone/SCMNodeManager/InServiceHealthyNodes": {
+              "metric": "ozone.SCMNodeManager.InServiceHealthyNodes",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/ozone/SCMNodeManager/InServiceHealthyReadonlyNodes": {
+              "metric": "ozone.SCMNodeManager.InServiceHealthyReadonlyNodes",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/ozone/SCMNodeManager/InServiceStaleNodes": {
+              "metric": "ozone.SCMNodeManager.InServiceStaleNodes",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/SCMPipelineMetrics/NumPipelineAllocated": {
+              "metric": "default.SCMPipelineMetrics.NumPipelineAllocated",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/SCMPipelineMetrics/NumPipelineCreated": {
+              "metric": "default.SCMPipelineMetrics.NumPipelineCreated",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/SCMPipelineMetrics/NumPipelineDestroyed": {
+              "metric": "default.SCMPipelineMetrics.NumPipelineDestroyed",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/SCMPipelineMetrics/NumPipelineReportProcessed": {
+              "metric": "default.SCMPipelineMetrics.NumPipelineReportProcessed",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/SCMPipelineMetrics/NumPipelineContainSameDatanodes": {
+              "metric": "default.SCMPipelineMetrics.NumPipelineContainSameDatanodes",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/SCMContainerMetrics/ClosedContainers": {
+              "metric": "default.SCMContainerMetrics.ClosedContainers",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/SCMContainerMetrics/ClosingContainers": {
+              "metric": "default.SCMContainerMetrics.ClosingContainers",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/SCMContainerMetrics/DeletedContainers": {
+              "metric": "default.SCMContainerMetrics.DeletedContainers",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/SCMContainerMetrics/DeletingContainers": {
+              "metric": "default.SCMContainerMetrics.DeletingContainers",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/SCMContainerMetrics/OpenContainers": {
+              "metric": "default.SCMContainerMetrics.OpenContainers",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/SCMContainerMetrics/TotalContainers": {
+              "metric": "default.SCMContainerMetrics.TotalContainers",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/SCMContainerManagerMetrics/NumContainerReportsProcessedSuccessful": {
+              "metric": "ozone.SCMContainerManagerMetrics.NumContainerReportsProcessedSuccessful",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/SCMContainerManagerMetrics/NumContainerReportsProcessedFailed": {
+              "metric": "ozone.SCMContainerManagerMetrics.NumContainerReportsProcessedFailed",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/SCMContainerPlacementMetrics/DatanodeRequestCount": {
+              "metric": "ozone.SCMContainerPlacementMetrics.DatanodeRequestCount",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpcdetailed/submitRequest_avg_time": {
+              "metric": "rpcdetailed.rpcdetailed.SubmitRequestAvgTime",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/rpcdetailed/submitRequest_numOps": {
+              "metric": "rpcdetailed.rpcdetailed.SubmitRequestNumOps",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/memNonHeapUsedM": {
+              "metric": "jvm.JvmMetrics.MemNonHeapUsedM",
+              "unit": "MB",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsBlocked": {
+              "metric": "jvm.JvmMetrics.ThreadsBlocked",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/memNonHeapCommittedM": {
+              "metric": "jvm.JvmMetrics.MemNonHeapCommittedM",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/memHeapCommittedM": {
+              "metric": "jvm.JvmMetrics.MemHeapCommittedM",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsRunnable": {
+              "metric": "jvm.JvmMetrics.ThreadsRunnable",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsNew": {
+              "metric": "jvm.JvmMetrics.ThreadsNew",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/logWarn": {
+              "metric": "jvm.JvmMetrics.LogWarn",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsTimedWaiting": {
+              "metric": "jvm.JvmMetrics.ThreadsTimedWaiting",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/gcCount": {
+              "metric": "jvm.JvmMetrics.GcCount",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/memHeapUsedM": {
+              "metric": "jvm.JvmMetrics.MemHeapUsedM",
+              "unit": "MB",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsWaiting": {
+              "metric": "jvm.JvmMetrics.ThreadsWaiting",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/gcTimeMillis": {
+              "metric": "jvm.JvmMetrics.GcTimeMillis",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsTerminated": {
+              "metric": "jvm.JvmMetrics.ThreadsTerminated",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/logInfo": {
+              "metric": "jvm.JvmMetrics.LogInfo",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/logError": {
+              "metric": "jvm.JvmMetrics.LogError",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/logFatal": {
+              "metric": "jvm.JvmMetrics.LogFatal",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcCountConcurrentMarkSweep": {
+              "metric": "jvm.JvmMetrics.GcCountConcurrentMarkSweep",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcCountParNew": {
+              "metric": "jvm.JvmMetrics.GcCountParNew",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcNumInfoThresholdExceeded": {
+              "metric": "jvm.JvmMetrics.GcNumInfoThresholdExceeded",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcNumWarnThresholdExceeded": {
+              "metric": "jvm.JvmMetrics.GcNumWarnThresholdExceeded",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcTimeMillisConcurrentMarkSweep": {
+              "metric": "jvm.JvmMetrics.GcTimeMillisConcurrentMarkSweep",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcTimeMillisParNew": {
+              "metric": "jvm.JvmMetrics.GcTimeMillisParNew",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcTotalExtraSleepTime": {
+              "metric": "jvm.JvmMetrics.GcTotalExtraSleepTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/MemHeapMaxM": {
+              "metric": "jvm.JvmMetrics.MemHeapMaxM",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/MemMaxM": {
+              "metric": "jvm.JvmMetrics.MemMaxM",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/MemNonHeapMaxM": {
+              "metric": "jvm.JvmMetrics.MemNonHeapMaxM",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/RpcQueueTime_num_ops": {
+              "metric": "rpc.rpc.RpcQueueTimeNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/RpcProcessingTime_avg_time": {
+              "metric": "rpc.rpc.RpcProcessingTimeAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/rpcAuthenticationSuccesses": {
+              "metric": "rpc.rpc.RpcAuthenticationSuccesses",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/rpcAuthenticationFailures": {
+              "metric": "rpc.rpc.RpcAuthenticationFailures",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/rpcAuthorizationFailures": {
+              "metric": "rpc.rpc.RpcAuthorizationFailures",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/RpcQueueTime_avg_time": {
+              "metric": "rpc.rpc.RpcQueueTimeAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/SentBytes": {
+              "metric": "rpc.rpc.SentBytes",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/ReceivedBytes": {
+              "metric": "rpc.rpc.ReceivedBytes",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/NumOpenConnections": {
+              "metric": "rpc.rpc.NumOpenConnections",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/callQueueLen": {
+              "metric": "rpc.rpc.CallQueueLength",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/RpcProcessingTime_num_ops": {
+              "metric": "rpc.rpc.RpcProcessingTimeNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/rpc/rpcAuthorizationSuccesses": {
+              "metric": "rpc.rpc.RpcAuthorizationSuccesses",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/DroppedPubAll": {
+              "metric": "metricssystem.MetricsSystem.DroppedPubAll",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/NumActiveSinks": {
+              "metric": "metricssystem.MetricsSystem.NumActiveSinks",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/NumActiveSources": {
+              "metric": "metricssystem.MetricsSystem.NumActiveSources",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/NumAllSinks": {
+              "metric": "metricssystem.MetricsSystem.NumAllSinks",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/NumAllSources": {
+              "metric": "metricssystem.MetricsSystem.NumAllSources",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/PublishAvgTime": {
+              "metric": "metricssystem.MetricsSystem.PublishAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/PublishNumOps": {
+              "metric": "metricssystem.MetricsSystem.PublishNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/Sink_timelineAvgTime": {
+              "metric": "metricssystem.MetricsSystem.Sink_timelineAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/Sink_timelineDropped": {
+              "metric": "metricssystem.MetricsSystem.Sink_timelineDropped",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/Sink_timelineNumOps": {
+              "metric": "metricssystem.MetricsSystem.Sink_timelineNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/Sink_timelineQsize": {
+              "metric": "metricssystem.MetricsSystem.Sink_timelineQsize",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/SnapshotAvgTime": {
+              "metric": "metricssystem.MetricsSystem.SnapshotAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/SnapshotNumOps": {
+              "metric": "metricssystem.MetricsSystem.SnapshotNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/ugi/loginSuccess_avg_time": {
+              "metric": "ugi.UgiMetrics.LoginSuccessAvgTime",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/ugi/loginSuccess_num_ops": {
+              "metric": "ugi.UgiMetrics.LoginSuccessNumOps",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/ugi/loginFailure_avg_time": {
+              "metric": "ugi.UgiMetrics.LoginFailureAvgTime",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/ugi/loginFailure_num_ops": {
+              "metric": "ugi.UgiMetrics.LoginFailureNumOps",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/ugi/UgiMetrics/GetGroupsAvgTime": {
+              "metric": "ugi.UgiMetrics.GetGroupsAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/ugi/UgiMetrics/GetGroupsNumOps": {
+              "metric": "ugi.UgiMetrics.GetGroupsNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/live_hosts": {
+              "metric": "live_hosts",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/boottime": {
+              "metric": "boottime",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            }
+          }
+        }
+      },
+      {
+        "type": "jmx",
+        "jmx_source_uri": {
+          "http": "${ozone-site/ozone.scm.http-address}",
+          "https": "${ozone-site/ozone.scm.https-address}",
+          "https_property": "${ozone-site/ozone.http.policy}",
+          "https_property_value": "HTTPS_ONLY",
+          "kerberos_keytab": "${cluster-env/smokeuser_keytab}",
+          "kerberos_principal": "${cluster-env/smokeuser_principal_name}",
+          "connection_timeout": 5.0
+        },
+        "metrics": {
+          "default": {
+            "metrics/ozone/SCMNodeManager/DiskCapacity": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMNodeMetrics.DiskCapacity",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ozone/SCMNodeManager/DiskRemaining": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMNodeMetricss.DiskRemaining",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ozone/SCMNodeManager/DiskUsed": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMNodeMetrics.DiskUsed",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ozone/SCMNodeManager/InServiceDeadNodes": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMNodeMetrics.InServiceDeadNodes",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ozone/SCMNodeManager/InServiceHealthyNodes": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMNodeMetrics.InServiceHealthyNodes",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ozone/SCMNodeManager/InServiceHealthyReadonlyNodes": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMNodeMetrics.InServiceHealthyReadonlyNodes",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ozone/SCMNodeManager/InServiceStaleNodes": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMNodeMetrics.InServiceStaleNodes",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/SCMPipelineMetrics/NumPipelineAllocated": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMPipelineMetrics.NumPipelineAllocated",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/SCMPipelineMetrics/NumPipelineCreated": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMPipelineMetrics.NumPipelineCreated",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/SCMPipelineMetrics/NumPipelineDestroyed": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMPipelineMetrics.NumPipelineDestroyed",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/SCMPipelineMetrics/NumPipelineReportProcessed": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMPipelineMetrics.NumPipelineReportProcessed",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/SCMPipelineMetrics/NumPipelineContainSameDatanodes": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMPipelineMetrics.NumPipelineContainSameDatanodes",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/SCMContainerMetrics/OpenContainers": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMContainerMetrics.OpenContainers",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/SCMContainerMetrics/ClosingContainers": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMContainerMetrics.ClosingContainers",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/SCMContainerMetrics/QuasiClosedContainers": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMContainerMetrics.QuasiClosedContainers",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/SCMContainerMetrics/ClosedContainers": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMContainerMetrics.ClosedContainers",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/SCMContainerMetrics/DeletingContainers": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMContainerMetrics.DeletingContainers",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/SCMContainerMetrics/DeletedContainers": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMContainerMetrics.DeletedContainers",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/SCMContainerMetrics/TotalContainers": {
+              "metric": "Hadoop:service=StorageContainerManager,name=SCMContainerMetrics.TotalContainers",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memMaxM": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.MemMaxM",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memNonHeapUsedM": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.MemNonHeapUsedM",
+              "unit": "MB",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsBlocked": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.ThreadsBlocked",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memNonHeapCommittedM": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.MemNonHeapCommittedM",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memHeapCommittedM": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.MemHeapCommittedM",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsRunnable": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.ThreadsRunnable",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsNew": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.ThreadsNew",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/logWarn": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.LogWarn",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsTimedWaiting": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.ThreadsTimedWaiting",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/gcCount": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.GcCount",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memHeapUsedM": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.MemHeapUsedM",
+              "unit": "MB",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsWaiting": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.ThreadsWaiting",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/gcTimeMillis": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.GcTimeMillis",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsTerminated": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.ThreadsTerminated",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/logInfo": {
+              "metric": "Hadoop:service=OzoneManager,name=JvmMetrics.LogInfo",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/logError": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.LogError",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/logFatal": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.LogFatal",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/GcTimeMillisConcurrentMarkSweep": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.GcTimeMillisConcurrentMarkSweep",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/GcCountConcurrentMarkSweep": {
+              "metric": "Hadoop:service=StorageContainerManager,name=JvmMetrics.GcCountConcurrentMarkSweep",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ugi/loginFailure_avg_time": {
+              "metric": "Hadoop:service=StorageContainerManager,name=UgiMetrics.LoginFailureNumOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ugi/loginSuccess_avg_time": {
+              "metric": "Hadoop:service=StorageContainerManager,name=UgiMetrics.LoginSuccessAvgTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ugi/loginSuccess_num_ops": {
+              "metric": "Hadoop:service=StorageContainerManager,name=UgiMetrics.LoginSuccessNumOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ugi/loginFailure_num_ops": {
+              "metric": "Hadoop:service=StorageContainerManager,name=UgiMetrics.LoginFailureNumOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/RpcQueueTime_num_ops": {
+              "metric": "Hadoop:service=StorageContainerManager,name=RpcActivityForPort9861.RpcQueueTimeNumOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/RpcProcessingTime_avg_time": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9861.RpcProcessingTimeAvgTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/rpcAuthenticationSuccesses": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9861.RpcAuthenticationSuccesses",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/rpcAuthenticationFailures": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9862.RpcAuthenticationFailures",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/rpcAuthorizationFailures": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9861.RpcAuthorizationFailures",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/RpcQueueTime_avg_time": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9861.RpcQueueTimeAvgTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/SentBytes": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9861.SentBytes",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/ReceivedBytes": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9861.ReceivedBytes",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/NumOpenConnections": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9861.NumOpenConnections",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/callQueueLen": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9861.callQueueLen",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/RpcProcessingTime_num_ops": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9861.RpcProcessingTimeNumOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/rpcAuthorizationSuccesses": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9861.RpcAuthorizationSuccesses",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/RpcQueueTimeAvgTime": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9861.RpcQueueTimeAvgTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/rpc/RpcProcessingTimeAvgTime": {
+              "metric": "Hadoop:service=OzoneManager,name=RpcActivityForPort9861.RpcProcessingTimeAvgTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/NonHeapMemoryUsed": {
+              "metric": "java.lang:type=Memory.NonHeapMemoryUsage[used]",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/HeapMemoryMax": {
+              "metric": "java.lang:type=Memory.HeapMemoryUsage[max]",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/StartTime": {
+              "metric": "java.lang:type=Runtime.StartTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/HeapMemoryUsed": {
+              "metric": "java.lang:type=Memory.HeapMemoryUsage[used]",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/NonHeapMemoryMax": {
+              "metric": "java.lang:type=Memory.NonHeapMemoryUsage[max]",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/Version": {
+              "metric": "Hadoop:service=OzoneManager,name=OzoneManagerInfo,component=ServerRuntime.Version",
+              "pointInTime": true,
+              "temporal": false
+            }
+          }
+        }
+      }
+    ]
+  },
+  "OZONE_DATANODE": {
+    "Component": [
+      {
+        "type": "ganglia",
+        "metrics": {
+          "default": {
+            "metrics/cpu/cpu_idle": {
+              "metric": "cpu_idle",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/cpu/cpu_nice": {
+              "metric": "cpu_nice",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/cpu/cpu_system": {
+              "metric": "cpu_system",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/cpu/cpu_user": {
+              "metric": "cpu_user",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/cpu/cpu_wio": {
+              "metric": "cpu_wio",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/disk_free": {
+              "metric": "disk_free",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/disk_total": {
+              "metric": "disk_total",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/load/load_fifteen": {
+              "metric": "load_fifteen",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/load/load_five": {
+              "metric": "load_five",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/load/load_one": {
+              "metric": "load_one",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_buffers": {
+              "metric": "mem_buffers",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_cached": {
+              "metric": "mem_cached",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_free": {
+              "metric": "mem_free",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_shared": {
+              "metric": "mem_shared",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_total": {
+              "metric": "mem_total",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/swap_free": {
+              "metric": "swap_free",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/swap_total": {
+              "metric": "swap_total",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/network/bytes_in": {
+              "metric": "bytes_in",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/network/bytes_out": {
+              "metric": "bytes_out",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/network/pkts_in": {
+              "metric": "pkts_in",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/network/pkts_out": {
+              "metric": "pkts_out",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/process/proc_run": {
+              "metric": "proc_run",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/process/proc_total": {
+              "metric": "proc_total",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/read_count": {
+              "metric": "read_count",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/write_count": {
+              "metric": "write_count",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/read_bytes": {
+              "metric": "read_bytes",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/write_bytes": {
+              "metric": "write_bytes",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/read_time": {
+              "metric": "read_time",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/write_time": {
+              "metric": "write_time",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/dfs/StorageContainerMetrics/NumOps": {
+              "metric": "dfs.StorageContainerMetrics.NumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/StorageContainerMetrics/bytesGetBlock": {
+              "metric": "dfs.StorageContainerMetrics.bytesGetBlock",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/StorageContainerMetrics/bytesPutBlock": {
+              "metric": "dfs.StorageContainerMetrics.bytesPutBlock",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/StorageContainerMetrics/bytesReadContainer": {
+              "metric": "dfs.StorageContainerMetrics.bytesReadContainer",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/StorageContainerMetrics/bytesReadChunk": {
+              "metric": "dfs.StorageContainerMetrics.bytesReadChunk",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/StorageContainerMetrics/bytesWriteChunk": {
+              "metric": "dfs.StorageContainerMetrics.bytesWriteChunk",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/StorageContainerMetrics/LatencyPutBlockNumOps": {
+              "metric": "dfs.StorageContainerMetrics.LatencyPutBlockNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/StorageContainerMetrics/LatencyPutSmallFileAvgTime": {
+              "metric": "dfs.StorageContainerMetrics.LatencyPutSmallFileAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/CSMMetrics/PutSmallFileAvgTime": {
+              "metric": "dfs.CSMMetrics.PutSmallFileAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/CSMMetrics/ReadChunkAvgTime": {
+              "metric": "dfs.CSMMetrics.PutSmallFileAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/CSMMetrics/ReadContainerAvgTime": {
+              "metric": "dfs.CSMMetrics.PutSmallFileAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/CSMMetrics/WriteChunkAvgTime": {
+              "metric": "dfs.CSMMetrics.PutSmallFileAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/CSMMetrics/WriteStateMachineDataAvgTime": {
+              "metric": "dfs.CSMMetrics.WriteStateMachineDataAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/VolumeIOStats/WriteTime": {
+              "metric": "default.VolumeIOStats.WriteTime ",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/VolumeIOStats/WriteBytes": {
+              "metric": "default.VolumeIOStats.WriteBytes ",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/VolumeIOStats/WriteOpCount": {
+              "metric": "default.VolumeIOStats.WriteBytes ",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/VolumeIOStats/ReadBytes": {
+              "metric": "default.VolumeIOStats.WriteTime ",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/VolumeIOStats/ReadTime": {
+              "metric": "default.VolumeIOStats.WriteTime ",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/VolumeIOStats/ReadOpCount": {
+              "metric": "default.VolumeIOStats.WriteBytes ",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/memNonHeapUsedM": {
+              "metric": "jvm.JvmMetrics.MemNonHeapUsedM",
+              "unit": "MB",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsBlocked": {
+              "metric": "jvm.JvmMetrics.ThreadsBlocked",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/memNonHeapCommittedM": {
+              "metric": "jvm.JvmMetrics.MemNonHeapCommittedM",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/memHeapCommittedM": {
+              "metric": "jvm.JvmMetrics.MemHeapCommittedM",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsRunnable": {
+              "metric": "jvm.JvmMetrics.ThreadsRunnable",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsNew": {
+              "metric": "jvm.JvmMetrics.ThreadsNew",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/logWarn": {
+              "metric": "jvm.JvmMetrics.LogWarn",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsTimedWaiting": {
+              "metric": "jvm.JvmMetrics.ThreadsTimedWaiting",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/gcCount": {
+              "metric": "jvm.JvmMetrics.GcCount",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/memHeapUsedM": {
+              "metric": "jvm.JvmMetrics.MemHeapUsedM",
+              "unit": "MB",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsWaiting": {
+              "metric": "jvm.JvmMetrics.ThreadsWaiting",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/gcTimeMillis": {
+              "metric": "jvm.JvmMetrics.GcTimeMillis",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsTerminated": {
+              "metric": "jvm.JvmMetrics.ThreadsTerminated",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/logInfo": {
+              "metric": "jvm.JvmMetrics.LogInfo",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/logError": {
+              "metric": "jvm.JvmMetrics.LogError",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/logFatal": {
+              "metric": "jvm.JvmMetrics.LogFatal",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcCountConcurrentMarkSweep": {
+              "metric": "jvm.JvmMetrics.GcCountConcurrentMarkSweep",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcCountParNew": {
+              "metric": "jvm.JvmMetrics.GcCountParNew",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcNumInfoThresholdExceeded": {
+              "metric": "jvm.JvmMetrics.GcNumInfoThresholdExceeded",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcNumWarnThresholdExceeded": {
+              "metric": "jvm.JvmMetrics.GcNumWarnThresholdExceeded",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcTimeMillisConcurrentMarkSweep": {
+              "metric": "jvm.JvmMetrics.GcTimeMillisConcurrentMarkSweep",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcTimeMillisParNew": {
+              "metric": "jvm.JvmMetrics.GcTimeMillisParNew",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcTotalExtraSleepTime": {
+              "metric": "jvm.JvmMetrics.GcTotalExtraSleepTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/MemHeapMaxM": {
+              "metric": "jvm.JvmMetrics.MemHeapMaxM",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/MemMaxM": {
+              "metric": "jvm.JvmMetrics.MemMaxM",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/MemNonHeapMaxM": {
+              "metric": "jvm.JvmMetrics.MemNonHeapMaxM",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/DroppedPubAll": {
+              "metric": "metricssystem.MetricsSystem.DroppedPubAll",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/NumActiveSinks": {
+              "metric": "metricssystem.MetricsSystem.NumActiveSinks",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/NumActiveSources": {
+              "metric": "metricssystem.MetricsSystem.NumActiveSources",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/NumAllSinks": {
+              "metric": "metricssystem.MetricsSystem.NumAllSinks",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/NumAllSources": {
+              "metric": "metricssystem.MetricsSystem.NumAllSources",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/PublishAvgTime": {
+              "metric": "metricssystem.MetricsSystem.PublishAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/PublishNumOps": {
+              "metric": "metricssystem.MetricsSystem.PublishNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/Sink_timelineAvgTime": {
+              "metric": "metricssystem.MetricsSystem.Sink_timelineAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/Sink_timelineDropped": {
+              "metric": "metricssystem.MetricsSystem.Sink_timelineDropped",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/Sink_timelineNumOps": {
+              "metric": "metricssystem.MetricsSystem.Sink_timelineNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/Sink_timelineQsize": {
+              "metric": "metricssystem.MetricsSystem.Sink_timelineQsize",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/SnapshotAvgTime": {
+              "metric": "metricssystem.MetricsSystem.SnapshotAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/SnapshotNumOps": {
+              "metric": "metricssystem.MetricsSystem.SnapshotNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/ugi/loginSuccess_avg_time": {
+              "metric": "ugi.UgiMetrics.LoginSuccessAvgTime",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/ugi/loginSuccess_num_ops": {
+              "metric": "ugi.UgiMetrics.LoginSuccessNumOps",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/ugi/loginFailure_avg_time": {
+              "metric": "ugi.UgiMetrics.LoginFailureAvgTime",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/ugi/loginFailure_num_ops": {
+              "metric": "ugi.UgiMetrics.LoginFailureNumOps",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/ugi/UgiMetrics/GetGroupsAvgTime": {
+              "metric": "ugi.UgiMetrics.GetGroupsAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/ugi/UgiMetrics/GetGroupsNumOps": {
+              "metric": "ugi.UgiMetrics.GetGroupsNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/live_hosts": {
+              "metric": "live_hosts",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/boottime": {
+              "metric": "boottime",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            }
+          }
+        }
+      },
+      {
+        "type": "jmx",
+        "jmx_source_uri": {
+          "http": "${ozone-site/hdds.datanode.http-address}",
+          "https": "${ozone-site/hdds.datanode.https-address}",
+          "https_property": "${ozone-site/ozone.http.policy}",
+          "https_property_value": "HTTPS_ONLY",
+          "kerberos_keytab": "${cluster-env/smokeuser_keytab}",
+          "kerberos_principal": "${cluster-env/smokeuser_principal_name}",
+          "connection_timeout": 5.0
+        },
+        "metrics": {
+          "default": {
+            "metrics/default/HddsDispatcher/counter": {
+              "metric": "Hadoop:service=HddsDatanode,name=HddsDispatcher.counter",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/HddsDispatcher/time": {
+              "metric": "Hadoop:service=HddsDatanode,name=HddsDispatcher.time",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/dfs/StorageContainerMetrics/NumOps": {
+              "metric": "Hadoop:service=HddsDatanode,name=StorageContainerMetrics.NumOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/VolumeIOStats/WriteTime": {
+              "metric": "Hadoop:service=HddsDatanode,name=StorageContainerMetrics.NumOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memMaxM": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.MemMaxM",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memNonHeapUsedM": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.MemNonHeapUsedM",
+              "unit": "MB",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsBlocked": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.ThreadsBlocked",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memNonHeapCommittedM": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.MemNonHeapCommittedM",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memHeapCommittedM": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.MemHeapCommittedM",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsRunnable": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.ThreadsRunnable",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsNew": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.ThreadsNew",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/logWarn": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.LogWarn",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsTimedWaiting": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.ThreadsTimedWaiting",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/gcCount": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.GcCount",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memHeapUsedM": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.MemHeapUsedM",
+              "unit": "MB",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsWaiting": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.ThreadsWaiting",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/gcTimeMillis": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.GcTimeMillis",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsTerminated": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.ThreadsTerminated",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/logInfo": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.LogInfo",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/logError": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.LogError",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/logFatal": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.LogFatal",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/GcTimeMillisConcurrentMarkSweep": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.GcTimeMillisConcurrentMarkSweep",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/GcCountConcurrentMarkSweep": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.GcCountConcurrentMarkSweep",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/ugi/loginFailure_avg_time": {
+              "metric": "Hadoop:service=HddsDatanode,name=UgiMetrics.LoginFailureAvgTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ugi/loginSuccess_avg_time": {
+              "metric": "Hadoop:service=HddsDatanode,name=UgiMetrics.LoginSuccessAvgTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ugi/loginSuccess_num_ops": {
+              "metric": "Hadoop:service=HddsDatanode,name=UgiMetrics.LoginSuccessNumOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ugi/loginFailure_num_ops": {
+              "metric": "Hadoop:service=HddsDatanode,name=UgiMetrics.LoginFailureNumOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/HeapMemoryMax": {
+              "metric": "java.lang:type=Memory.HeapMemoryUsage[max]",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/StartTime": {
+              "metric": "java.lang:type=Runtime.StartTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/HeapMemoryUsed": {
+              "metric": "java.lang:type=Memory.HeapMemoryUsage[used]",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/NonHeapMemoryMax": {
+              "metric": "java.lang:type=Memory.NonHeapMemoryUsage[max]",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/Version": {
+              "metric": "Hadoop:service=HddsDatanodeService,name=HddsDatanodeServiceInfo,component=ServerRuntime.Version",
+              "pointInTime": true,
+              "temporal": false
+            }
+          }
+        }
+      }
+    ],
+    "HostComponent": [
+      {
+        "type": "ganglia",
+        "metrics": {
+          "default": {
+            "metrics/cpu/cpu_idle": {
+              "metric": "cpu_idle",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/cpu/cpu_nice": {
+              "metric": "cpu_nice",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/cpu/cpu_system": {
+              "metric": "cpu_system",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/cpu/cpu_user": {
+              "metric": "cpu_user",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/cpu/cpu_wio": {
+              "metric": "cpu_wio",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/disk_free": {
+              "metric": "disk_free",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/disk_total": {
+              "metric": "disk_total",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/load/load_fifteen": {
+              "metric": "load_fifteen",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/load/load_five": {
+              "metric": "load_five",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/load/load_one": {
+              "metric": "load_one",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_buffers": {
+              "metric": "mem_buffers",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_cached": {
+              "metric": "mem_cached",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_free": {
+              "metric": "mem_free",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_shared": {
+              "metric": "mem_shared",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/mem_total": {
+              "metric": "mem_total",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/swap_free": {
+              "metric": "swap_free",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/memory/swap_total": {
+              "metric": "swap_total",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/network/bytes_in": {
+              "metric": "bytes_in",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/network/bytes_out": {
+              "metric": "bytes_out",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/network/pkts_in": {
+              "metric": "pkts_in",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/network/pkts_out": {
+              "metric": "pkts_out",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/process/proc_run": {
+              "metric": "proc_run",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/process/proc_total": {
+              "metric": "proc_total",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/read_count": {
+              "metric": "read_count",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/write_count": {
+              "metric": "write_count",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/read_bytes": {
+              "metric": "read_bytes",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/write_bytes": {
+              "metric": "write_bytes",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/read_time": {
+              "metric": "read_time",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/disk/write_time": {
+              "metric": "write_time",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            },
+            "metrics/dfs/StorageContainerMetrics/NumOps": {
+              "metric": "dfs.StorageContainerMetrics.NumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/StorageContainerMetrics/bytesGetBlock": {
+              "metric": "dfs.StorageContainerMetrics.bytesGetBlock",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/StorageContainerMetrics/bytesPutBlock": {
+              "metric": "dfs.StorageContainerMetrics.bytesPutBlock",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/StorageContainerMetrics/bytesReadChunk": {
+              "metric": "dfs.StorageContainerMetrics.bytesReadChunk",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/StorageContainerMetrics/bytesWriteChunk": {
+              "metric": "dfs.StorageContainerMetrics.bytesWriteChunk",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/StorageContainerMetrics/LatencyPutBlockNumOps": {
+              "metric": "dfs.StorageContainerMetrics.LatencyPutBlockNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/StorageContainerMetrics/LatencyPutSmallFileAvgTime": {
+              "metric": "dfs.StorageContainerMetrics.LatencyPutSmallFileAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/CSMMetrics/PutSmallFileAvgTime": {
+              "metric": "dfs.CSMMetrics.PutSmallFileAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/CSMMetrics/ReadChunkAvgTime": {
+              "metric": "dfs.CSMMetrics.PutSmallFileAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/CSMMetrics/ReadContainerAvgTime": {
+              "metric": "dfs.CSMMetrics.PutSmallFileAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/CSMMetrics/WriteChunkAvgTime": {
+              "metric": "dfs.CSMMetrics.PutSmallFileAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/dfs/CSMMetrics/WriteStateMachineDataAvgTime": {
+              "metric": "dfs.CSMMetrics.WriteStateMachineDataAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/VolumeIOStats/WriteTime": {
+              "metric": "default.VolumeIOStats.WriteTime ",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/VolumeIOStats/WriteBytes": {
+              "metric": "default.VolumeIOStats.WriteBytes ",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/VolumeIOStats/WriteOpCount": {
+              "metric": "default.VolumeIOStats.WriteBytes ",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/VolumeIOStats/ReadBytes": {
+              "metric": "default.VolumeIOStats.WriteTime ",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/VolumeIOStats/ReadTime": {
+              "metric": "default.VolumeIOStats.WriteTime ",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/default/VolumeIOStats/ReadOpCount": {
+              "metric": "default.VolumeIOStats.WriteBytes ",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/memNonHeapUsedM": {
+              "metric": "jvm.JvmMetrics.MemNonHeapUsedM",
+              "unit": "MB",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsBlocked": {
+              "metric": "jvm.JvmMetrics.ThreadsBlocked",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/memNonHeapCommittedM": {
+              "metric": "jvm.JvmMetrics.MemNonHeapCommittedM",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/memHeapCommittedM": {
+              "metric": "jvm.JvmMetrics.MemHeapCommittedM",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsRunnable": {
+              "metric": "jvm.JvmMetrics.ThreadsRunnable",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsNew": {
+              "metric": "jvm.JvmMetrics.ThreadsNew",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/logWarn": {
+              "metric": "jvm.JvmMetrics.LogWarn",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsTimedWaiting": {
+              "metric": "jvm.JvmMetrics.ThreadsTimedWaiting",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/gcCount": {
+              "metric": "jvm.JvmMetrics.GcCount",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/memHeapUsedM": {
+              "metric": "jvm.JvmMetrics.MemHeapUsedM",
+              "unit": "MB",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsWaiting": {
+              "metric": "jvm.JvmMetrics.ThreadsWaiting",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/gcTimeMillis": {
+              "metric": "jvm.JvmMetrics.GcTimeMillis",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/threadsTerminated": {
+              "metric": "jvm.JvmMetrics.ThreadsTerminated",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/logInfo": {
+              "metric": "jvm.JvmMetrics.LogInfo",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/logError": {
+              "metric": "jvm.JvmMetrics.LogError",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/logFatal": {
+              "metric": "jvm.JvmMetrics.LogFatal",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcCountConcurrentMarkSweep": {
+              "metric": "jvm.JvmMetrics.GcCountConcurrentMarkSweep",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcCountParNew": {
+              "metric": "jvm.JvmMetrics.GcCountParNew",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcNumInfoThresholdExceeded": {
+              "metric": "jvm.JvmMetrics.GcNumInfoThresholdExceeded",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcNumWarnThresholdExceeded": {
+              "metric": "jvm.JvmMetrics.GcNumWarnThresholdExceeded",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcTimeMillisConcurrentMarkSweep": {
+              "metric": "jvm.JvmMetrics.GcTimeMillisConcurrentMarkSweep",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcTimeMillisParNew": {
+              "metric": "jvm.JvmMetrics.GcTimeMillisParNew",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/GcTotalExtraSleepTime": {
+              "metric": "jvm.JvmMetrics.GcTotalExtraSleepTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/MemHeapMaxM": {
+              "metric": "jvm.JvmMetrics.MemHeapMaxM",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/MemMaxM": {
+              "metric": "jvm.JvmMetrics.MemMaxM",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/jvm/JvmMetrics/MemNonHeapMaxM": {
+              "metric": "jvm.JvmMetrics.MemNonHeapMaxM",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/DroppedPubAll": {
+              "metric": "metricssystem.MetricsSystem.DroppedPubAll",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/NumActiveSinks": {
+              "metric": "metricssystem.MetricsSystem.NumActiveSinks",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/NumActiveSources": {
+              "metric": "metricssystem.MetricsSystem.NumActiveSources",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/NumAllSinks": {
+              "metric": "metricssystem.MetricsSystem.NumAllSinks",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/NumAllSources": {
+              "metric": "metricssystem.MetricsSystem.NumAllSources",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/PublishAvgTime": {
+              "metric": "metricssystem.MetricsSystem.PublishAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/PublishNumOps": {
+              "metric": "metricssystem.MetricsSystem.PublishNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/Sink_timelineAvgTime": {
+              "metric": "metricssystem.MetricsSystem.Sink_timelineAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/Sink_timelineDropped": {
+              "metric": "metricssystem.MetricsSystem.Sink_timelineDropped",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/Sink_timelineNumOps": {
+              "metric": "metricssystem.MetricsSystem.Sink_timelineNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/Sink_timelineQsize": {
+              "metric": "metricssystem.MetricsSystem.Sink_timelineQsize",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/SnapshotAvgTime": {
+              "metric": "metricssystem.MetricsSystem.SnapshotAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/metricssystem/MetricsSystem/SnapshotNumOps": {
+              "metric": "metricssystem.MetricsSystem.SnapshotNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/ugi/loginSuccess_avg_time": {
+              "metric": "ugi.UgiMetrics.LoginSuccessAvgTime",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/ugi/loginSuccess_num_ops": {
+              "metric": "ugi.UgiMetrics.LoginSuccessNumOps",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/ugi/loginFailure_avg_time": {
+              "metric": "ugi.UgiMetrics.LoginFailureAvgTime",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/ugi/loginFailure_num_ops": {
+              "metric": "ugi.UgiMetrics.LoginFailureNumOps",
+              "pointInTime": false,
+              "temporal": true
+            },
+            "metrics/ugi/UgiMetrics/GetGroupsAvgTime": {
+              "metric": "ugi.UgiMetrics.GetGroupsAvgTime",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/ugi/UgiMetrics/GetGroupsNumOps": {
+              "metric": "ugi.UgiMetrics.GetGroupsNumOps",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/live_hosts": {
+              "metric": "live_hosts",
+              "pointInTime": true,
+              "temporal": true
+            },
+            "metrics/boottime": {
+              "metric": "boottime",
+              "pointInTime": true,
+              "temporal": true,
+              "amsHostMetric": true
+            }
+          }
+        }
+      },
+      {
+        "type": "jmx",
+        "jmx_source_uri": {
+          "http": "${ozone-site/hdds.datanode.http-address}",
+          "https": "${ozone-site/hdds.datanode.https-address}",
+          "https_property": "${ozone-site/ozone.http.policy}",
+          "https_property_value": "HTTPS_ONLY",
+          "kerberos_keytab": "${cluster-env/smokeuser_keytab}",
+          "kerberos_principal": "${cluster-env/smokeuser_principal_name}",
+          "connection_timeout": 5.0
+        },
+        "metrics": {
+          "default": {
+            "metrics/default/HddsDispatcher/counter": {
+              "metric": "Hadoop:service=HddsDatanode,name=HddsDispatcher.counter",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/HddsDispatcher/time": {
+              "metric": "Hadoop:service=HddsDatanode,name=HddsDispatcher.time",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/dfs/StorageContainerMetrics/NumOps": {
+              "metric": "Hadoop:service=HddsDatanode,name=StorageContainerMetrics.NumOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/default/VolumeIOStats/WriteTime": {
+              "metric": "Hadoop:service=HddsDatanode,name=StorageContainerMetrics.NumOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memMaxM": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.MemMaxM",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memNonHeapUsedM": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.MemNonHeapUsedM",
+              "unit": "MB",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsBlocked": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.ThreadsBlocked",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memNonHeapCommittedM": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.MemNonHeapCommittedM",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memHeapCommittedM": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.MemHeapCommittedM",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsRunnable": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.ThreadsRunnable",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsNew": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.ThreadsNew",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/logWarn": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.LogWarn",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsTimedWaiting": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.ThreadsTimedWaiting",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/gcCount": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.GcCount",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/memHeapUsedM": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.MemHeapUsedM",
+              "unit": "MB",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsWaiting": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.ThreadsWaiting",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/gcTimeMillis": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.GcTimeMillis",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/threadsTerminated": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.ThreadsTerminated",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/logInfo": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.LogInfo",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/logError": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.LogError",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/logFatal": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.LogFatal",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/GcTimeMillisConcurrentMarkSweep": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.GcTimeMillisConcurrentMarkSweep",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/jvm/GcCountConcurrentMarkSweep": {
+              "metric": "Hadoop:service=HddsDatanode,name=JvmMetrics.GcCountConcurrentMarkSweep",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ugi/loginFailure_avg_time": {
+              "metric": "Hadoop:service=HddsDatanode,name=UgiMetrics.LoginFailureAvgTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ugi/loginSuccess_avg_time": {
+              "metric": "Hadoop:service=HddsDatanode,name=UgiMetrics.LoginSuccessAvgTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ugi/loginSuccess_num_ops": {
+              "metric": "Hadoop:service=HddsDatanode,name=UgiMetrics.LoginSuccessNumOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "metrics/ugi/loginFailure_num_ops": {
+              "metric": "Hadoop:service=HddsDatanode,name=UgiMetrics.LoginFailureNumOps",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/HeapMemoryMax": {
+              "metric": "java.lang:type=Memory.HeapMemoryUsage[max]",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/StartTime": {
+              "metric": "java.lang:type=Runtime.StartTime",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/HeapMemoryUsed": {
+              "metric": "java.lang:type=Memory.HeapMemoryUsage[used]",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/NonHeapMemoryMax": {
+              "metric": "java.lang:type=Memory.NonHeapMemoryUsage[max]",
+              "pointInTime": true,
+              "temporal": false
+            },
+            "ServiceComponentInfo/Version": {
+              "metric": "Hadoop:service=HddsDatanodeService,name=HddsDatanodeServiceInfo,component=ServerRuntime.Version",
+              "pointInTime": true,
+              "temporal": false
+            }
+          }
+        }
+      }
+    ]
+  }
+}
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/role_command_order.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/role_command_order.json b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/role_command_order.json
new file mode 100644
--- /dev/null	(date 1739240179144)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/role_command_order.json	(date 1739240179144)
@@ -0,0 +1,10 @@
+{
+  "general_deps" : {
+    "_comment" : "dependencies for OZONE",
+	"OZONE_SCM-START" : ["ZOOKEEPER_SERVER-START"],
+	"OZONE_DATANODE-START" : ["OZONE_SCM-START","OZONE_OM-START"],
+	"OZONE_OM-START" : ["OZONE_SCM-START","RANGER_ADMIN-START"],
+	"OZONE_RECON-START" : ["OZONE_SCM-START","OZONE_OM-START","OZONE_DATANODE-START"],
+	"OZONE_S3G-START" : ["OZONE_SCM-START","OZONE_OM-START","OZONE_DATANODE-START"]
+  }
+}
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/service_advisor.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/service_advisor.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/service_advisor.py
new file mode 100644
--- /dev/null	(date 1739255797894)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/service_advisor.py	(date 1739255797894)
@@ -0,0 +1,200 @@
+#!/usr/bin/env ambari-python-wrap
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+"""
+import imp
+# Python imports
+import os
+import traceback
+
+
+from resource_management.core.logger import Logger
+
+SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
+STACKS_DIR = os.path.join(SCRIPT_DIR, '../../../../../stacks/')
+PARENT_FILE = os.path.join(STACKS_DIR, 'service_advisor.py')
+
+try:
+  if "BASE_SERVICE_ADVISOR" in os.environ:
+    PARENT_FILE = os.environ["BASE_SERVICE_ADVISOR"]
+  with open(PARENT_FILE, "rb") as fp:
+    service_advisor = imp.load_module(
+      "service_advisor", fp, PARENT_FILE, (".py", "rb", imp.PY_SOURCE)
+    )
+except Exception as e:
+  traceback.print_exc()
+  print("Failed to load parent")
+
+
+
+class OzoneServiceAdvisor(service_advisor.ServiceAdvisor):
+
+  def __init__(self, *args, **kwargs):
+    self.as_super = super(OzoneServiceAdvisor, self)
+    self.as_super.__init__(*args, **kwargs)
+
+    # Always call these methods
+    self.modifyMastersWithMultipleInstances()
+    self.modifyCardinalitiesDict()
+    self.modifyHeapSizeProperties()
+    self.modifyNotValuableComponents()
+    self.modifyComponentsNotPreferableOnServer()
+    self.modifyComponentLayoutSchemes()
+
+  def modifyMastersWithMultipleInstances(self):
+    """
+    Modify the set of masters with multiple instances.
+    Must be overriden in child class.
+    """
+    # Nothing to do
+    pass
+
+  def modifyCardinalitiesDict(self):
+    """
+    Modify the dictionary of cardinalities.
+    Must be overriden in child class.
+    """
+    # Nothing to do
+    pass
+
+  def modifyHeapSizeProperties(self):
+    """
+    Modify the dictionary of heap size properties.
+    Must be overriden in child class.
+    """
+    pass
+
+  def modifyNotValuableComponents(self):
+    """
+    Modify the set of components whose host assignment is based on other services.
+    Must be overriden in child class.
+    """
+    # Nothing to do
+    pass
+
+  def modifyComponentsNotPreferableOnServer(self):
+    """
+    Modify the set of components that are not preferable on the server.
+    Must be overriden in child class.
+    """
+    # Nothing to do
+    pass
+
+  def modifyComponentLayoutSchemes(self):
+    """
+    Modify layout scheme dictionaries for components.
+    The scheme dictionary basically maps the number of hosts to
+    host index where component should exist.
+    Must be overriden in child class.
+    """
+
+   # Nothing to do
+    pass
+
+
+  def getServiceComponentLayoutValidations(self, services, hosts):
+    """
+    Get a list of errors.
+    Must be overriden in child class.
+    """
+
+    return self.getServiceComponentCardinalityValidations(services, hosts, "OZONE")
+
+  def getServiceConfigurationRecommendations(self, configurations, clusterData, services, hosts):
+    """
+    Entry point.
+    Must be overriden in child class.
+    """
+    # Logger.info("Class: %s, Method: %s. Recommending Service Configurations." %
+    #            (self.__class__.__name__, inspect.stack()[0][3]))
+
+    recommender = OzoneRecommender()
+    recommender.recommendOzoneConfigurationsFromHDP32(configurations, clusterData, services, hosts)
+
+
+  # def getServiceConfigurationRecommendationsForSSO(self, configurations, clusterData, services, hosts):
+  #   """
+  #   Entry point.
+  #   Must be overriden in child class.
+  #   """
+  #   recommender = OzoneRecommender()
+  #   recommender.recommendConfigurationsForSSO(configurations, clusterData, services, hosts)
+
+  def getServiceConfigurationsValidationItems(self, configurations, recommendedDefaults, services, hosts):
+    """
+    Entry point.
+    Validate configurations for the service. Return a list of errors.
+    The code for this function should be the same for each Service Advisor.
+    """
+    # Logger.info("Class: %s, Method: %s. Validating Configurations." %
+    #            (self.__class__.__name__, inspect.stack()[0][3]))
+
+    return []
+
+  @staticmethod
+  def isKerberosEnabled(services, configurations):
+    """
+    Determines if security is enabled by testing the value of core-site/hadoop.security.authentication enabled.
+    If the property exists and is equal to "kerberos", then is it enabled; otherwise is it assumed to be
+    disabled.
+
+    :type services: dict
+    :param services: the dictionary containing the existing configuration values
+    :type configurations: dict
+    :param configurations: the dictionary containing the updated configuration values
+    :rtype: bool
+    :return: True or False
+    """
+    if configurations and "core-site" in configurations and \
+            "hadoop.security.authentication" in configurations["core-site"]["properties"]:
+      return configurations["core-site"]["properties"]["hadoop.security.authentication"].lower() == "kerberos"
+    elif services and "core-site" in services["configurations"] and \
+            "hadoop.security.authentication" in services["configurations"]["core-site"]["properties"]:
+      return services["configurations"]["core-site"]["properties"]["hadoop.security.authentication"].lower() == "kerberos"
+    else:
+      return False
+
+
+class OzoneRecommender(service_advisor.ServiceAdvisor):
+  """
+  Ozone Recommender suggests properties when adding the service for the first time or modifying configs via the UI.
+  """
+
+  def __init__(self, *args, **kwargs):
+    self.as_super = super(OzoneRecommender, self)
+    self.as_super.__init__(*args, **kwargs)
+
+  def recommendOzoneConfigurationsFromHDP32(self, configurations, clusterData, services, hosts):
+    """
+    Recommend configurations for this service based on HDP 3.2.
+    """
+    putOzoneSiteProperty = self.putProperty(configurations, "ozone-site", services)
+    putOzoneSitePropertyAttribute = self.putPropertyAttribute(configurations, "ozone-site")
+    putOzoneRangerPluginProperty = self.putProperty(configurations, "ranger-ozone-plugin-properties", services)
+
+
+    # Recommend Ranger Hive authorization as per Ranger Hive plugin property
+    if "ranger-env" in services["configurations"] and "ozone-env" in services["configurations"] and \
+        "ranger-ozone-plugin-enabled" in services["configurations"]["ranger-env"]["properties"]:
+      rangerEnvOzonePluginProperty = services["configurations"]["ranger-env"]["properties"]["ranger-ozone-plugin-enabled"]
+      putOzoneRangerPluginProperty("ranger-ozone-plugin-enabled", rangerEnvOzonePluginProperty)
+      if (rangerEnvOzonePluginProperty.lower() == "yes"):
+        putOzoneSiteProperty("ozone.acl.enabled", "true")
+        putOzoneSiteProperty("ozone.acl.authorizer.class", 'org.apache.ranger.authorization.ozone.authorizer.RangerOzoneAuthorizer')
+      else:
+        #putOzoneSiteProperty("ozone.acl.enabled", "false")
+        putOzoneSiteProperty("ozone.acl.authorizer.class", 'org.apache.hadoop.ozone.security.acl.OzoneAccessAuthorizer')
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/themes/directories.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/themes/directories.json b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/themes/directories.json
new file mode 100644
--- /dev/null	(date 1738999374874)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/themes/directories.json	(date 1738999374874)
@@ -0,0 +1,197 @@
+{
+  "name": "directories",
+  "description": "Directories theme for Ozone service",
+  "configuration": {
+    "layouts": [
+      {
+        "name": "directories",
+        "tabs": [
+          {
+            "name": "directories",
+            "display-name": "Directories",
+            "layout": {
+              "tab-columns": "1",
+              "tab-rows": "4",
+              "sections": [
+                {
+                  "name": "subsection-data-dirs",
+                  "display-name": "DATA DIRS",
+                  "row-index": "0",
+                  "column-index": "0",
+                  "row-span": "1",
+                  "column-span": "1",
+                  "section-columns": "1",
+                  "section-rows": "1",
+                  "subsections": [
+                    {
+                      "name": "subsection-data-dirs",
+                      "row-index": "0",
+                      "column-index": "0",
+                      "row-span": "1",
+                      "column-span": "1"
+                    }
+                  ]
+                },
+                {
+                  "name": "subsection-log-dirs",
+                  "display-name": "LOG DIRS",
+                  "row-index": "1",
+                  "column-index": "0",
+                  "row-span": "1",
+                  "column-span": "1",
+                  "section-columns": "1",
+                  "section-rows": "1",
+                  "subsections": [
+                    {
+                      "name": "subsection-log-dirs",
+                      "row-index": "0",
+                      "column-index": "0",
+                      "row-span": "1",
+                      "column-span": "1"
+                    }
+                  ]
+                },
+                {
+                  "name": "subsection-pid-dirs",
+                  "display-name": "PID DIRS",
+                  "row-index": "2",
+                  "column-index": "0",
+                  "row-span": "1",
+                  "column-span": "1",
+                  "section-columns": "1",
+                  "section-rows": "1",
+                  "subsections": [
+                    {
+                      "name": "subsection-pid-dirs",
+                      "row-index": "0",
+                      "column-index": "0",
+                      "row-span": "1",
+                      "column-span": "1"
+                    }
+                  ]
+                }
+              ]
+            }
+          }
+        ]
+      }
+    ],
+    "placement": {
+      "configuration-layout": "default",
+      "configs": [
+        {
+          "config": "ozone-env/ozone_pid_dir_prefix",
+          "subsection-name": "subsection-pid-dirs"
+        },
+        {
+          "config": "ozone-env/ozone_log_dir_prefix",
+          "subsection-name": "subsection-log-dirs"
+        },
+        {
+          "config": "ozone-site/ozone.metadata.dirs",
+          "subsection-name": "subsection-data-dirs"
+        },
+        {
+          "config": "ozone-site/ozone.om.db.dirs",
+          "subsection-name": "subsection-data-dirs"
+        },
+        {
+          "config": "ozone-site/ozone.om.ratis.storage.dir",
+          "subsection-name": "subsection-data-dirs"
+        },
+        {
+          "config": "ozone-site/ozone.scm.db.dirs",
+          "subsection-name": "subsection-data-dirs"
+        },
+        {
+          "config": "ozone-site/ozone.scm.datanode.id.dir",
+          "subsection-name": "subsection-data-dirs"
+        },
+        {
+          "config": "ozone-site/hdds.datanode.dir",
+          "subsection-name": "subsection-data-dirs"
+        },
+        {
+          "config": "ozone-site/dfs.container.ratis.datanode.storage.dir",
+          "subsection-name": "subsection-data-dirs"
+        },
+        {
+          "config": "ozone-site/ozone.recon.db.dir",
+          "subsection-name": "subsection-data-dirs"
+        },
+        {
+          "config": "ozone-site/ozone.recon.om.db.dir",
+          "subsection-name": "subsection-data-dirs"
+        }
+      ]
+    },
+    "widgets": [
+      {
+        "config": "ozone-env/ozone_pid_dir_prefix",
+        "widget": {
+          "type": "text-field"
+        }
+      },
+      {
+        "config": "ozone-env/ozone_log_dir_prefix",
+        "widget": {
+          "type": "text-field"
+        }
+      },
+      {
+        "config": "ozone-site/ozone.metadata.dirs",
+        "widget": {
+          "type": "directories"
+        }
+      },
+      {
+        "config": "ozone-site/ozone.om.db.dirs",
+        "widget": {
+          "type": "directories"
+        }
+      },
+      {
+        "config": "ozone-site/ozone.om.ratis.storage.dir",
+        "widget": {
+          "type": "directories"
+        }
+      },
+      {
+        "config": "ozone-site/ozone.scm.db.dirs",
+        "widget": {
+          "type": "directories"
+        }
+      },
+      {
+        "config": "ozone-site/ozone.scm.datanode.id.dir",
+        "widget": {
+          "type": "directories"
+        }
+      },
+      {
+        "config": "ozone-site/hdds.datanode.dir",
+        "widget": {
+          "type": "text-field"
+        }
+      },
+      {
+        "config": "ozone-site/dfs.container.ratis.datanode.storage.dir",
+        "widget": {
+          "type": "text-field"
+        }
+      },
+      {
+        "config": "ozone-site/ozone.recon.db.dir",
+        "widget": {
+          "type": "text-field"
+        }
+      },
+      {
+        "config": "ozone-site/ozone.recon.om.db.dir",
+        "widget": {
+          "type": "text-field"
+        }
+      }
+    ]
+  }
+}
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/widgets.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/widgets.json b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/widgets.json
new file mode 100644
--- /dev/null	(date 1739000731551)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/widgets.json	(date 1739000731551)
@@ -0,0 +1,636 @@
+{
+  "layouts": [
+    {
+      "layout_name": "default_ozone_dashboard",
+      "display_name": "Standard Ozone Dashboard",
+      "section_name": "OZONE_SUMMARY",
+      "widgetLayoutInfo": [
+        {
+          "widget_name": "OZONE OM GC count",
+          "description": "Count of total garbage collections and count of major type garbage collections of the JVM.",
+          "widget_type": "GRAPH",
+          "is_visible": true,
+          "metrics": [
+            {
+              "name": "jvm.JvmMetrics.GcCount._rate",
+              "metric_path": "metrics/jvm/gcCount._rate",
+              "service_name": "OZONE",
+              "component_name": "OZONE_OM"
+            },
+            {
+              "name": "jvm.JvmMetrics.GcCountConcurrentMarkSweep._rate",
+              "metric_path": "metrics/jvm/GcCountConcurrentMarkSweep._rate",
+              "service_name": "OZONE",
+              "component_name": "OZONE_OM"
+            }
+          ],
+          "values": [
+            {
+              "name": "GC total count",
+              "value": "${jvm.JvmMetrics.GcCount._rate}"
+            },
+            {
+              "name": "GC count of type major collection",
+              "value": "${jvm.JvmMetrics.GcCountConcurrentMarkSweep._rate}"
+            }
+          ],
+          "properties": {
+            "graph_type": "LINE",
+            "time_range": "1"
+          }
+        },
+        {
+          "widget_name": "OZONE OM GC time",
+          "description": "Total time taken by major type garbage collections in milliseconds.",
+          "widget_type": "GRAPH",
+          "is_visible": true,
+          "metrics": [
+            {
+              "name": "jvm.JvmMetrics.GcTimeMillisConcurrentMarkSweep._rate",
+              "metric_path": "metrics/jvm/GcTimeMillisConcurrentMarkSweep._rate",
+              "service_name": "OZONE",
+              "component_name": "OZONE_OM"
+            }
+          ],
+          "values": [
+            {
+              "name": "GC time in major collection",
+              "value": "${jvm.JvmMetrics.GcTimeMillisConcurrentMarkSweep._rate}"
+            }
+          ],
+          "properties": {
+            "display_unit": "ms",
+            "graph_type": "LINE",
+            "time_range": "1"
+          }
+        },
+        {
+          "widget_name": "OZONE OM  Connection Load",
+          "description": "Number of open RPC connections being managed by OM.",
+          "widget_type": "GRAPH",
+          "is_visible": true,
+          "metrics": [
+            {
+              "name": "rpc.rpc.NumOpenConnections",
+              "metric_path": "metrics/rpc/NumOpenConnections",
+              "category": "",
+              "service_name": "OZONE",
+              "component_name": "OZONE_OM"
+            },
+            {
+              "name": "rpc.rpc.RpcProcessingTimeNumOps",
+              "metric_path": "metrics/rpc/RpcProcessingTime_num_ops",
+              "category": "",
+              "service_name": "OZONE",
+              "component_name": "OZONE_OM"
+            }
+          ],
+          "values": [
+            {
+              "name": "Open Connections",
+              "value": "${rpc.rpc.NumOpenConnection}"
+            },
+            {
+              "name": "RpcProcessingTimeNumOps",
+              "value": "${rpc.rpc.RpcProcessingTimeNumOps}"
+            }
+          ],
+          "properties": {
+            "graph_type": "LINE",
+            "time_range": "1"
+          }
+        },
+        {
+          "widget_name": "OZONE OM Heap",
+          "description": "Heap memory committed and Heap memory used with respect to time.",
+          "widget_type": "GRAPH",
+          "is_visible": true,
+          "metrics": [
+            {
+              "name": "jvm.JvmMetrics.MemHeapCommittedM",
+              "metric_path": "metrics/jvm/memHeapCommittedM",
+              "service_name": "OZONE",
+              "component_name": "OZONE_OM"
+            },
+            {
+              "name": "jvm.JvmMetrics.MemHeapUsedM",
+              "metric_path": "metrics/jvm/memHeapUsedM",
+              "service_name": "OZONE",
+              "component_name": "OZONE_OM"
+            }
+          ],
+          "values": [
+            {
+              "name": "JVM heap committed",
+              "value": "${jvm.JvmMetrics.MemHeapCommittedM}"
+            },
+            {
+              "name": "JVM heap used",
+              "value": "${jvm.JvmMetrics.MemHeapUsedM}"
+            }
+          ],
+          "properties": {
+            "display_unit": "MB",
+            "graph_type": "LINE",
+            "time_range": "1"
+          }
+        },
+        {
+          "widget_name": "OZONE OM Host Load",
+          "description": "Percentage of CPU and Memory resources being consumed on OM host.",
+          "widget_type": "GRAPH",
+          "is_visible": true,
+          "metrics": [
+            {
+              "name": "cpu_system",
+              "metric_path": "metrics/cpu/cpu_system",
+              "service_name": "OZONE",
+              "component_name": "OZONE_OM"
+            },
+            {
+              "name": "cpu_user",
+              "metric_path": "metrics/cpu/cpu_user",
+              "service_name": "OZONE",
+              "component_name": "OZONE_OM"
+            },
+            {
+              "name": "cpu_nice",
+              "metric_path": "metrics/cpu/cpu_nice",
+              "service_name": "OZONE",
+              "component_name": "OZONE_OM"
+            },
+            {
+              "name": "cpu_idle",
+              "metric_path": "metrics/cpu/cpu_idle",
+              "service_name": "OZONE",
+              "component_name": "OZONE_OM"
+            },
+            {
+              "name": "cpu_wio",
+              "metric_path": "metrics/cpu/cpu_wio",
+              "service_name": "OZONE",
+              "component_name": "OZONE_OM"
+            },
+            {
+              "name": "mem_total",
+              "metric_path": "metrics/memory/mem_total",
+              "service_name": "OZONE",
+              "component_name": "OZONE_OM"
+            },
+            {
+              "name": "mem_free",
+              "metric_path": "metrics/memory/mem_free",
+              "service_name": "OZONE",
+              "component_name": "OZONE_OM"
+            }
+          ],
+          "values": [
+            {
+              "name": "CPU utilization",
+              "value": "${((cpu_system + cpu_user + cpu_nice)/(cpu_system + cpu_user + cpu_nice + cpu_idle + cpu_wio)) * 100}"
+            },
+            {
+              "name": "Memory utilization",
+              "value": "${((mem_total - mem_free)/mem_total) * 100}"
+            }
+          ],
+          "properties": {
+            "graph_type": "LINE",
+            "time_range": "1",
+            "display_unit": "%"
+          }
+        },
+        {
+          "widget_name": "OZONE OM RPC",
+          "description": "Compares the average time spent for RPC request in a queue and RPC request being processed.",
+          "widget_type": "GRAPH",
+          "is_visible": true,
+          "metrics": [
+            {
+              "name": "rpc.rpc.RpcQueueTimeAvgTime",
+              "metric_path": "metrics/rpc/RpcQueueTime_avg_time",
+              "service_name": "OZONE",
+              "component_name": "OZONE_OM"
+            },
+            {
+              "name": "rpc.rpc.RpcProcessingTimeAvgTime",
+              "metric_path": "metrics/rpc/RpcProcessingTime_avg_time",
+              "service_name": "OZONE",
+              "component_name": "OZONE_OM"
+            }
+          ],
+          "values": [
+            {
+              "name": "RPC Queue Wait time",
+              "value": "${rpc.rpc.RpcQueueTimeAvgTime}"
+            },
+            {
+              "name": "RPC Processing time",
+              "value": "${rpc.rpc.RpcProcessingTimeAvgTime}"
+            }
+          ],
+          "properties": {
+            "graph_type": "LINE",
+            "time_range": "1",
+            "display_unit": "ms"
+          }
+        },
+        {
+          "widget_name": "OpenContainers(Metics)",
+          "description": "OpenContainers.",
+          "widget_type": "NUMBER",
+          "is_visible": true,
+          "metrics": [
+            {
+              "name": "default.SCMContainerMetrics.OpenContainers",
+              "metric_path": "metrics/default/SCMContainerMetrics/OpenContainers",
+              "service_name": "OZONE",
+              "component_name": "OZONE_SCM"
+            }
+          ],
+          "values": [
+            {
+              "name": "OpenContainers",
+              "value": "${default.SCMContainerMetrics.OpenContainers}"
+            }
+          ],
+          "properties": {
+            "display_unit": ""
+          }
+        },
+        {
+          "widget_name": "OpenContainers(JMX)",
+          "description": "OpenContainers.",
+          "widget_type": "NUMBER",
+          "is_visible": true,
+          "metrics": [
+            {
+              "name": "Hadoop:service=StorageContainerManager,name=SCMContainerMetrics.OpenContainers",
+              "metric_path": "metrics/default/SCMContainerMetrics/OpenContainers",
+              "service_name": "OZONE",
+              "component_name": "OZONE_SCM"
+            }
+          ],
+          "values": [
+            {
+              "name": "OpenContainers",
+              "value": "${Hadoop:service=StorageContainerManager,name=SCMContainerMetrics.OpenContainers}"
+            }
+          ],
+          "properties": {
+            "display_unit": ""
+          }
+        },
+        {
+          "widget_name": "Piplines(Metrics)",
+          "description": "Piplines.",
+          "widget_type": "TEMPLATE",
+          "is_visible": true,
+          "metrics": [
+            {
+              "name": "default.SCMPipelineMetrics.NumPipelineAllocated",
+              "metric_path": "metrics/default/SCMPipelineMetrics/NumPipelineAllocated",
+              "service_name": "OZONE",
+              "component_name": "OZONE_SCM"
+            },
+            {
+              "name": "default.SCMPipelineMetrics.NumPipelineCreated",
+              "metric_path": "metrics/default/SCMPipelineMetrics/NumPipelineCreated",
+              "service_name": "OZONE",
+              "component_name": "OZONE_SCM"
+            }
+          ],
+          "values": [
+            {
+              "name": "PipeLine",
+              "value": "${default.SCMPipelineMetrics.NumPipelineCreated}/${default.SCMPipelineMetrics.NumPipelineAllocated}"
+            }
+          ],
+          "properties": {
+            "display_unit": ""
+          }
+        },
+        {
+          "widget_name": "InServiceHealthyNodes(Metrics)",
+          "description": "InServiceHealthyNodes.",
+          "widget_type": "TEMPLATE",
+          "is_visible": true,
+          "metrics": [
+            {
+              "name": "ozone.SCMNodeManager.InServiceHealthyNodes",
+              "metric_path": "metrics/ozone/SCMNodeManager/InServiceHealthyNodes",
+              "service_name": "OZONE",
+              "component_name": "OZONE_SCM"
+            },
+            {
+              "name": "ozone.SCMNodeManager.InServiceDeadNodes",
+              "metric_path": "metrics/ozone/SCMNodeManager/InServiceDeadNodes",
+              "service_name": "OZONE",
+              "component_name": "OZONE_SCM"
+            },
+            {
+              "name": "ozone.SCMNodeManager.InServiceHealthyReadonlyNodes",
+              "metric_path": "metrics/ozone/SCMNodeManager/InServiceHealthyReadonlyNodes",
+              "service_name": "OZONE",
+              "component_name": "OZONE_SCM"
+            },
+            {
+              "name": "ozone.SCMNodeManager.InServiceStaleNodes",
+              "metric_path": "metrics/ozone/SCMNodeManager/InServiceStaleNodes",
+              "service_name": "OZONE",
+              "component_name": "OZONE_SCM"
+            }
+          ],
+          "values": [
+            {
+              "name": "DataNodes",
+              "value": "${ozone.SCMNodeManager.InServiceHealthyNodes}/${(ozone.SCMNodeManager.InServiceHealthyNodes) + (ozone.SCMNodeManager.InServiceDeadNodes) + (ozone.SCMNodeManager.InServiceHealthyReadonlyNodes) + (ozone.SCMNodeManager.InServiceStaleNodes) }"
+            }
+          ],
+          "properties": {
+            "display_unit": ""
+          }
+        },
+        {
+          "widget_name": "InServiceHealthyNodes(JMX)",
+          "description": "InServiceHealthyNodes.",
+          "widget_type": "NUMBER",
+          "is_visible": true,
+          "metrics": [
+            {
+              "name": "Hadoop:service=StorageContainerManager,name=SCMNodeMetrics.InServiceHealthyNodes",
+              "metric_path": "metrics/ozone/SCMNodeManager/InServiceHealthyNodes",
+              "service_name": "OZONE",
+              "component_name": "OZONE_SCM"
+            }
+          ],
+          "values": [
+            {
+              "name": "OpenContainers",
+              "value": "${Hadoop:service=StorageContainerManager,name=SCMNodeMetrics.InServiceHealthyNodes}"
+            }
+          ],
+          "properties": {
+            "display_unit": ""
+          }
+        },
+        {
+          "widget_name": "OZONE Space Utilization",
+          "description": "Percentage of available space used in the OZONE.",
+          "widget_type": "GAUGE",
+          "is_visible": true,
+          "metrics": [
+            {
+              "name": "ozone.SCMNodeManager.DiskRemaining",
+              "metric_path": "metrics/dfs/SCMNodeManager/DiskRemaining",
+              "service_name": "OZONE",
+              "component_name": "OZONE_SCM"
+            },
+            {
+              "name": "ozone.SCMNodeManager.DiskCapacity",
+              "metric_path": "metrics/ozone/SCMNodeManager/DiskCapacity",
+              "service_name": "OZONE",
+              "component_name": "OZONE_SCM"
+            }
+          ],
+          "values": [
+            {
+              "name": "OZONE Space Utilization",
+              "value": "${(ozone.SCMNodeManager.DiskCapacity - ozone.SCMNodeManager.DiskRemaining)/ozone.SCMNodeManager.DiskCapacity}"
+            }
+          ],
+          "properties": {
+            "warning_threshold": "0.75",
+            "error_threshold": "0.9"
+          }
+        },
+        {
+          "widget_name": "NumVolumes(Metrics)",
+          "description": "NumVolumes",
+          "widget_type": "NUMBER",
+          "is_visible": true,
+          "metrics": [
+            {
+              "name": "dfs.OMMetrics.NumVolumes",
+              "metric_path": "metrics/dfs/OMMetrics/NumVolumes",
+              "service_name": "OZONE",
+              "component_name": "OZONE_OM"
+            }
+          ],
+          "values": [
+            {
+              "name": "Volumes",
+              "value": "${dfs.OMMetrics.NumVolumes}"
+            }
+          ],
+          "properties": {
+            "display_unit": ""
+          }
+        },
+        {
+          "widget_name": "NumBuckets(Metrics)",
+          "description": "NumBuckets",
+          "widget_type": "NUMBER",
+          "is_visible": true,
+          "metrics": [
+            {
+              "name": "dfs.OMMetrics.NumBuckets",
+              "metric_path": "metrics/dfs/OMMetrics/NumBuckets",
+              "service_name": "OZONE",
+              "component_name": "OZONE_OM"
+            }
+          ],
+          "values": [
+            {
+              "name": "Volumes",
+              "value": "${dfs.OMMetrics.NumBuckets}"
+            }
+          ],
+          "properties": {
+            "display_unit": ""
+          }
+        },
+        {
+          "widget_name": "NumKeys(Metrics)",
+          "description": "NumKeys",
+          "widget_type": "NUMBER",
+          "is_visible": true,
+          "metrics": [
+            {
+              "name": "dfs.OMMetrics.NumKeys",
+              "metric_path": "metrics/dfs/OMMetrics/NumKeys",
+              "service_name": "OZONE",
+              "component_name": "OZONE_OM"
+            }
+          ],
+          "values": [
+            {
+              "name": "Volumes",
+              "value": "${dfs.OMMetrics.NumKeys}"
+            }
+          ],
+          "properties": {
+            "display_unit": ""
+          }
+        },
+        {
+          "widget_name": "OZONE Capacity(JMX)",
+          "description": "Capacity in the OZONE.",
+          "widget_type": "TEMPLATE",
+          "is_visible": true,
+          "metrics": [
+            {
+              "name": "ozone.SCMNodeManager.DiskUsed",
+              "metric_path": "Hadoop:service=StorageContainerManager,name=SCMNodeMetrics.DiskUsed",
+              "service_name": "OZONE",
+              "component_name": "OZONE_SCM"
+            },
+            {
+              "name": "ozone.SCMNodeManager.DiskCapacity",
+              "metric_path": "Hadoop:service=StorageContainerManager,name=SCMNodeMetrics.DiskCapacity",
+              "service_name": "OZONE",
+              "component_name": "OZONE_SCM"
+            }
+          ],
+          "values": [
+            {
+              "name": "OZONE Capacity",
+              "value": "${Hadoop:service=StorageContainerManager,name=SCMNodeMetrics.DiskUsed}/${Hadoop:service=StorageContainerManager,name=SCMNodeMetrics.DiskCapacity}"
+            }
+          ],
+          "properties": {
+            "display_unit": "B"
+          }
+        }
+      ]
+    },
+    {
+      "layout_name": "default_ozone_heatmap",
+      "section_name": "OZONE_HEATMAPS",
+      "display_name": "OZONE Heatmaps",
+      "widgetLayoutInfo": [
+        {
+          "widget_name": "Ozone Chunk Bytes Read",
+          "default_section_name": "OZONE_HEATMAPS",
+          "description": "",
+          "widget_type": "HEATMAP",
+          "is_visible": true,
+          "metrics": [
+            {
+              "name": "dfs.StorageContainerMetrics.bytesReadChunk",
+              "metric_path": "metrics/dfs/StorageContainerMetrics/bytesReadChunk",
+              "service_name": "OZONE",
+              "component_name": "OZONE_DATANODE"
+            }
+          ],
+          "values": [
+            {
+              "name": "Ozone Chunk Bytes Read",
+              "value": "${dfs.StorageContainerMetrics.bytesReadChunk}"
+            }
+          ],
+          "properties": {
+            "display_unit": "MB",
+            "max_limit": "1024"
+          }
+        },
+        {
+          "widget_name": "Ozone Chunk Bytes Written",
+          "description": "",
+          "widget_type": "HEATMAP",
+          "is_visible": false,
+          "metrics": [
+            {
+              "name": "dfs.StorageContainerMetrics.bytesWriteChunk",
+              "metric_path": "metrics/dfs/StorageContainerMetrics/bytesWriteChunk",
+              "service_name": "OZONE",
+              "component_name": "OZONE_DATANODE"
+            }
+          ],
+          "values": [
+            {
+              "name": "Ozone Chunk Bytes Written",
+              "value": "${ddfs.StorageContainerMetrics.bytesWriteChunk}"
+            }
+          ],
+          "properties": {
+            "display_unit": "MB",
+            "max_limit": "1024"
+          }
+        },
+        {
+          "widget_name": "DataNode Garbage Collection Time",
+          "description": "",
+          "widget_type": "HEATMAP",
+          "is_visible": false,
+          "metrics": [
+            {
+              "name": "Hadoop:service=HddsDatanode,name=JvmMetrics.GcTimeMillis",
+              "metric_path": "metrics/jvm/gcTimeMillis",
+              "service_name": "OZONE",
+              "component_name": "OZONE_DATANODE"
+            }
+          ],
+          "values": [
+            {
+              "name": "DataNode Garbage Collection Time",
+              "value": "${Hadoop:service=HddsDatanode,name=JvmMetrics.GcTimeMillis}"
+            }
+          ],
+          "properties": {
+            "display_unit": "ms",
+            "max_limit": "10000"
+          }
+        },
+        {
+          "widget_name": "DataNode JVM Heap Memory Used",
+          "description": "",
+          "widget_type": "HEATMAP",
+          "is_visible": false,
+          "metrics": [
+            {
+              "name": "Hadoop:service=HddsDatanode,name=JvmMetrics.MemHeapUsedM",
+              "metric_path": "metrics/jvm/memHeapUsedM",
+              "service_name": "OZONE",
+              "component_name": "OZONE_DATANODE"
+            }
+          ],
+          "values": [
+            {
+              "name": "DataNode JVM Heap Memory Used",
+              "value": "${Hadoop:service=HddsDatanode,name=JvmMetrics.MemHeapUsedM}"
+            }
+          ],
+          "properties": {
+            "display_unit": "MB",
+            "max_limit": "512"
+          }
+        },
+        {
+          "widget_name": "DataNode JVM Heap Memory Committed",
+          "description": "",
+          "widget_type": "HEATMAP",
+          "is_visible": false,
+          "metrics": [
+            {
+              "name": "Hadoop:service=HddsDatanode,name=JvmMetrics.MemHeapCommittedM",
+              "metric_path": "metrics/jvm/memHeapCommittedM",
+              "service_name": "OZONE",
+              "component_name": "OZONE_DATANODE"
+            }
+          ],
+          "values": [
+            {
+              "name": "DataNode JVM Heap Memory Committed",
+              "value": "${Hadoop:service=HddsDatanode,name=JvmMetrics.MemHeapCommittedM}"
+            }
+          ],
+          "properties": {
+            "display_unit": "MB",
+            "max_limit": "512"
+          }
+        }
+      ]
+    }
+  ]
+}
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/themes/theme.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/themes/theme.json b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/themes/theme.json
new file mode 100644
--- /dev/null	(date 1739000761032)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/themes/theme.json	(date 1739000761032)
@@ -0,0 +1,177 @@
+{
+  "name": "default",
+  "description": "Default theme for Ozone service",
+  "configuration": {
+    "layouts": [
+      {
+        "name": "default",
+        "tabs": [
+          {
+            "name": "settings",
+            "display-name": "Settings",
+            "layout": {
+              "tab-columns": "2",
+              "tab-rows": "1",
+              "sections": [
+                {
+                  "name": "section-om",
+                  "display-name": "OzoneManager",
+                  "row-index": "0",
+                  "column-index": "0",
+                  "row-span": "1",
+                  "column-span": "1",
+                  "section-columns": "1",
+                  "section-rows": "1",
+                  "subsections": [
+                    {
+                      "name": "subsection-om-col1",
+                      "row-index": "0",
+                      "column-index": "0",
+                      "row-span": "1",
+                      "column-span": "1"
+                    }
+                  ]
+                },
+                {
+                  "name": "section-scm",
+                  "display-name": "StorageContainerManager",
+                  "row-index": "0",
+                  "column-index": "0",
+                  "row-span": "1",
+                  "column-span": "1",
+                  "section-columns": "1",
+                  "section-rows": "1",
+                  "subsections": [
+                    {
+                      "name": "subsection-scm-col1",
+                      "row-index": "0",
+                      "column-index": "0",
+                      "row-span": "1",
+                      "column-span": "1"
+                    }
+                  ]
+                },
+                {
+                  "name": "section-datanode",
+                  "display-name": "DataNode",
+                  "row-index": "0",
+                  "column-index": "1",
+                  "row-span": "1",
+                  "column-span": "1",
+                  "section-columns": "1",
+                  "section-rows": "1",
+                  "subsections": [
+                    {
+                      "name": "subsection-datanode-col1",
+                      "row-index": "0",
+                      "column-index": "0",
+                      "row-span": "1",
+                      "column-span": "1"
+                    }
+                  ]
+                }
+              ]
+            }
+          }
+        ]
+      }
+    ],
+    "placement": {
+      "configuration-layout": "default",
+      "configs": [
+        {
+          "config": "ozone-site/ozone.om.db.dirs",
+          "subsection-name": "subsection-om-col1"
+        },
+        {
+          "config": "ozone-site/ozone.om.ratis.storage.dir",
+          "subsection-name": "subsection-om-col1"
+        },
+        {
+          "config": "ozone-site/ozone.om.handler.count.key",
+          "subsection-name": "subsection-om-col1"
+        },
+        {
+          "config": "ozone-site/ozone.scm.db.dirs",
+          "subsection-name": "subsection-scm-col1"
+        },
+        {
+          "config": "ozone-site/ozone.scm.datanode.id.dir",
+          "subsection-name": "subsection-scm-col1"
+        },
+        {
+          "config": "ozone-site/ozone.scm.handler.count.key",
+          "subsection-name": "subsection-scm-col1"
+        },
+        {
+          "config": "ozone-site/hdds.datanode.dir",
+          "subsection-name": "subsection-datanode-col1"
+        },
+        {
+          "config": "ozone-site/dfs.container.ratis.datanode.storage.dir",
+          "subsection-name": "subsection-datanode-col1"
+        }
+      ]
+    },
+    "widgets": [
+      {
+        "config": "ozone-site/ozone.om.db.dirs",
+        "widget": {
+          "type": "directories"
+        }
+      },
+      {
+        "config": "ozone-site/ozone.om.ratis.storage.dir",
+        "widget": {
+          "type": "directories"
+        }
+      },
+      {
+        "config": "ozone-site/ozone.om.handler.count.key",
+        "widget": {
+          "type": "slider",
+          "units": [
+            {
+              "unit-name": "int"
+            }
+          ]
+        }
+      },
+      {
+        "config": "ozone-site/ozone.scm.db.dirs",
+        "widget": {
+          "type": "directories"
+        }
+      },
+      {
+        "config": "ozone-site/ozone.scm.datanode.id.dir",
+        "widget": {
+          "type": "directories"
+        }
+      },
+      {
+        "config": "ozone-site/ozone.scm.handler.count.key",
+        "widget": {
+          "type": "slider",
+          "units": [
+            {
+              "unit-name": "int"
+            }
+          ]
+        }
+      },
+      {
+        "config": "ozone-site/hdds.datanode.dir",
+        "widget": {
+          "type": "directories"
+        }
+      },
+      {
+        "config": "ozone-site/dfs.container.ratis.datanode.storage.dir",
+        "widget": {
+          "type": "directories"
+        }
+      }
+    ]
+  }
+}
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/quicklinks/quicklinks.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/quicklinks/quicklinks.json b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/quicklinks/quicklinks.json
new file mode 100644
--- /dev/null	(date 1739000612904)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/quicklinks/quicklinks.json	(date 1739000612904)
@@ -0,0 +1,78 @@
+{
+  "name": "default",
+  "description": "default quick links configuration",
+  "configuration": {
+    "protocol": {
+      "type": "https",
+      "checks": [
+        {
+          "property": "ozone.http.policy",
+          "desired": "HTTPS_ONLY",
+          "site": "ozone-site"
+        }
+      ]
+    },
+    "links": [
+      {
+        "name": "ozone_scm_ui",
+        "label": "Ozone Scm UI",
+        "component_name": "OZONE_SCM",
+        "url": "%@://%@:%@",
+        "requires_user_name": "false",
+        "port": {
+          "http_property": "ozone.scm.http-address",
+          "http_default_port": "9876",
+          "https_property": "ozone.scm.https-address",
+          "https_default_port": "9877",
+          "regex": "\\w*:(\\d+)",
+          "site": "ozone-site"
+        }
+      },
+      {
+        "name": "ozone_om_ui",
+        "label": "Ozone OM UI",
+        "component_name": "OZONE_OM",
+        "url": "%@://%@:%@",
+        "requires_user_name": "false",
+        "port": {
+          "http_property": "ozone.om.http-address",
+          "http_default_port": "9874",
+          "https_property": "ozone.om.https-address",
+          "https_default_port": "9875",
+          "regex": "\\w*:(\\d+)",
+          "site": "ozone-site"
+        }
+      },
+      {
+        "name": "ozone_recon_ui",
+        "label": "Ozone Recon UI",
+        "component_name": "OZONE_RECON",
+        "url": "%@://%@:%@",
+        "requires_user_name": "false",
+        "port": {
+          "http_property": "ozone.recon.http-address",
+          "http_default_port": "9888",
+          "https_property": "ozone.recon.https-address",
+          "https_default_port": "9889",
+          "regex": "\\w*:(\\d+)",
+          "site": "ozone-site"
+        }
+      },
+      {
+        "name": "ozone_s3g",
+        "label": "Ozone S3G",
+        "component_name": "OZONE_S3G",
+        "url": "%@://%@:%@",
+        "requires_user_name": "false",
+        "port": {
+          "http_property": "ozone.s3g.http-address",
+          "http_default_port": "9878",
+          "https_property": "ozone.s3g.https-address",
+          "https_default_port": "9879",
+          "regex": "\\w*:(\\d+)",
+          "site": "ozone-site"
+        }
+      }
+    ]
+  }
+}
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ozone-env.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ozone-env.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ozone-env.xml
new file mode 100644
--- /dev/null	(date 1738999374950)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ozone-env.xml	(date 1738999374950)
@@ -0,0 +1,399 @@
+<?xml version="1.0"?>
+<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
+<!--
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+<configuration supports_adding_forbidden="true">
+  <property>
+    <name>ozone_log_dir_prefix</name>
+    <value>/var/log/ozone</value>
+    <description>Ozone Log Dir Prefix</description>
+    <display-name>Ozone Log Dir Prefix</display-name>
+    <value-attributes>
+      <type>directory</type>
+      <overridable>false</overridable>
+    </value-attributes>
+    <on-ambari-upgrade add="true"/>
+  </property>
+  <property>
+    <name>ozone_pid_dir_prefix</name>
+    <value>/var/run/ozone</value>
+    <display-name>Ozone PID Dir Prefix</display-name>
+    <description>Ozone PID Dir Prefix</description>
+    <value-attributes>
+      <type>directory</type>
+      <overridable>false</overridable>
+      <editable-only-at-install>true</editable-only-at-install>
+    </value-attributes>
+    <on-ambari-upgrade add="true"/>
+  </property>
+  <property>
+    <name>ozone_root_logger</name>
+    <value>INFO,RFA</value>
+    <display-name>Ozone Root Logger</display-name>
+    <description>Ozone Root Logger</description>
+    <value-attributes>
+      <overridable>false</overridable>
+    </value-attributes>
+    <on-ambari-upgrade add="true"/>
+  </property>
+  <property>
+    <name>ozone_user</name>
+    <display-name>Ozone User</display-name>
+    <value>ozone</value>
+    <property-type>USER</property-type>
+    <description>User to run Ozone as</description>
+    <value-attributes>
+      <type>user</type>
+      <overridable>false</overridable>
+      <user-groups>
+        <property>
+          <type>cluster-env</type>
+          <name>user_group</name>
+        </property>
+        <property>
+          <type>hdfs-site</type>
+          <name>dfs.permissions.superusergroup</name>
+        </property>
+      </user-groups>
+    </value-attributes>
+    <on-ambari-upgrade add="true"/>
+  </property>
+  <property>
+    <name>ozone_principal_name</name>
+	<display-name>ozone principal name</display-name>
+    <description>OZONE principal name</description>
+    <property-type>KERBEROS_PRINCIPAL</property-type>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>ozone_user_keytab</name>
+    <description>OZONE keytab path</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <!-- ozone-env.sh -->
+  <property>
+    <name>content</name>
+    <display-name>ozone-env template</display-name>
+    <description>This is the jinja template for hadoop-env.sh file</description>
+    <value>#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Set Ozone-specific environment variables here.
+
+# Enable core dump when crash in C++
+ulimit -c unlimited
+
+# Many of the options here are built from the perspective that users
+# may want to provide OVERWRITING values on the command line.
+# For example:
+#
+# JAVA_HOME=/usr/java/testing ozone fs -ls
+#
+# Therefore, the vast majority (BUT NOT ALL!) of these defaults
+# are configured for substitution and not append.  If append
+# is preferable, modify this file accordingly.
+
+###
+# Generic settings
+###
+
+# Technically, the only required environment variable is JAVA_HOME.
+# All others are optional.  However, the defaults are probably not
+# preferred.  Many sites configure these options outside of Ozone,
+# such as in /etc/profile.d
+
+# The java implementation to use. By default, this environment
+# variable is REQUIRED on ALL platforms except OS X!
+# export JAVA_HOME=
+
+export JAVA_HOME={{java_home}}
+
+# Location of Ozone.  By default, Ozone will attempt to determine
+# this location based upon its execution path.
+# export OZONE_HOME=
+
+export OZONE_HOME=${OZONE_HOME:-{{ozone_home}}}
+
+# Location of Ozone's configuration information.  i.e., where this
+# file is living. If this is not defined, Ozone will attempt to
+# locate it based upon its execution path.
+#
+# NOTE: It is recommend that this variable not be set here but in
+# /etc/profile.d or equivalent.  Some options (such as
+# --config) may react strangely otherwise.
+#
+# export OZONE_CONF_DIR=${OZONE_HOME}/etc/hadoop
+
+export OZONE_CONF_DIR=${OZONE_HOME}/etc/hadoop
+
+# The maximum amount of heap to use (Java -Xmx).  If no unit
+# is provided, it will be converted to MB.  Daemons will
+# prefer any Xmx setting in their respective _OPT variable.
+# There is no default; the JVM will autoscale based upon machine
+# memory size.
+# export OZONE_HEAPSIZE_MAX=
+
+# The minimum amount of heap to use (Java -Xms).  If no unit
+# is provided, it will be converted to MB.  Daemons will
+# prefer any Xms setting in their respective _OPT variable.
+# There is no default; the JVM will autoscale based upon machine
+# memory size.
+# export OZONE_HEAPSIZE_MIN=
+
+# Extra Java runtime options for all Ozone commands. We don't support
+# IPv6 yet/still, so by default the preference is set to IPv4.
+# export OZONE_OPTS="-Djava.net.preferIPv4Stack=true"
+# For Kerberos debugging, an extended option set logs more information
+# export OZONE_OPTS="-Djava.net.preferIPv4Stack=true -Dsun.security.krb5.debug=true -Dsun.security.spnego.debug"
+
+# Some parts of the shell code may do special things dependent upon
+# the operating system.  We have to set this here. See the next
+# section as to why....
+export OZONE_OS_TYPE=${OZONE_OS_TYPE:-$(uname -s)}
+
+# Extra Java runtime options for some Ozone commands
+# and clients (e.g., ozone sh).  These get appended to OZONE_OPTS for
+# such commands.  In most cases, this should be left empty and
+# let users supply it on the command line.
+# export OZONE_CLIENT_OPTS=""
+
+#
+# A note about classpaths.
+#
+# By default, Apache Ozone overrides Java's CLASSPATH
+# environment variable.  It is configured such
+# that it starts out blank with new entries added after passing
+# a series of checks (file/dir exists, not already listed aka
+# de-deduplication).  During de-deduplication, wildcards and/or
+# directories are *NOT* expanded to keep it simple. Therefore,
+# if the computed classpath has two specific mentions of
+# awesome-methods-1.0.jar, only the first one added will be seen.
+# If two directories are in the classpath that both contain
+# awesome-methods-1.0.jar, then Java will pick up both versions.
+
+# An additional, custom CLASSPATH. Site-wide configs should be
+# handled via the shellprofile functionality, utilizing the
+# ozone_add_classpath function for greater control and much
+# harder for apps/end-users to accidentally override.
+# Similarly, end users should utilize ${HOME}/.ozonerc .
+# This variable should ideally only be used as a short-cut,
+# interactive way for temporary additions on the command line.
+# export OZONE_CLASSPATH="/some/cool/path/on/your/machine"
+
+# Should OZONE_CLASSPATH be first in the official CLASSPATH?
+# export OZONE_USER_CLASSPATH_FIRST="yes"
+
+# If OZONE_USE_CLIENT_CLASSLOADER is set, OZONE_CLASSPATH and
+# OZONE_USER_CLASSPATH_FIRST are ignored.
+# export OZONE_USE_CLIENT_CLASSLOADER=true
+
+###
+# Options for remote shell connectivity
+###
+
+# There are some optional components of ozone that allow for
+# command and control of remote hosts.  For example,
+# start-ozone.sh will attempt to bring up all OMs, SCMs, DNs, etc.
+
+# Options to pass to SSH when one of the "log into a host and
+# start/stop daemons" scripts is executed
+# export OZONE_SSH_OPTS="-o BatchMode=yes -o StrictHostKeyChecking=no -o ConnectTimeout=10s"
+
+# The built-in ssh handler will limit itself to 10 simultaneous connections.
+# For pdsh users, this sets the fanout size ( -f )
+# Change this to increase/decrease as necessary.
+# export OZONE_SSH_PARALLEL=10
+
+# Filename which contains all of the hosts for any remote execution
+# helper scripts # such as workers.sh, start-ozone.sh, etc.
+# export OZONE_WORKERS="${OZONE_CONF_DIR}/workers"
+
+###
+# Options for all daemons
+###
+#
+
+#
+# Many options may also be specified as Java properties.  It is
+# very common, and in many cases, desirable, to hard-set these
+# in daemon _OPTS variables.  Where applicable, the appropriate
+# Java property is also identified.  Note that many are re-used
+# or set differently in certain contexts (e.g., secure vs
+# non-secure)
+#
+
+# Where (primarily) daemon log files are stored.
+# ${OZONE_HOME}/logs by default.
+# Java property: hadoop.log.dir
+# export OZONE_LOG_DIR=${OZONE_HOME}/logs
+
+USER="$(whoami)"
+
+export OZONE_LOG_DIR={{ozone_log_dir_prefix}}/$USER
+
+# A string representing this instance of Ozone. $USER by default.
+# This is used in writing log and pid files, so keep that in mind!
+# Java property: hadoop.id.str
+# export OZONE_IDENT_STRING=$USER
+
+# How many seconds to pause after stopping a daemon
+# export OZONE_STOP_TIMEOUT=5
+
+# Where pid files are stored.  /tmp by default.
+# export OZONE_PID_DIR=/tmp
+
+export OZONE_PID_DIR={{ozone_pid_dir_prefix}}/$USER
+
+# Default log4j setting for interactive commands
+# Java property: hadoop.root.logger
+# export OZONE_ROOT_LOGGER=INFO,console
+
+export OZONE_ROOT_LOGGER={{ozone_root_logger}}
+
+
+# Default log4j setting for daemons spawned explicitly by
+# --daemon option of ozone command.
+# Java property: hadoop.root.logger
+# export OZONE_DAEMON_ROOT_LOGGER=INFO,RFA
+
+# Default log level and output location for security-related messages.
+# You will almost certainly want to change this on a per-daemon basis via
+# the Java property (i.e., -Dhadoop.security.logger=foo).
+# Java property: hadoop.security.logger
+# export OZONE_SECURITY_LOGGER=INFO,NullAppender
+
+# Default process priority level
+# Note that sub-processes will also run at this level!
+# export OZONE_NICENESS=0
+
+# Default name for the service level authorization file
+# Java property: hadoop.policy.file
+# export OZONE_POLICYFILE="hadoop-policy.xml"
+
+#
+# NOTE: this is not used by default!
+# You can define variables right here and then re-use them later on.
+# For example, it is common to use the same garbage collection settings
+# for all the daemons.  So one could define:
+#
+# export OZONE_GC_SETTINGS="-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps"
+#
+# .. and then use it when setting OZONE_OM_OPTS, etc. below
+
+###
+# Secure/privileged execution
+###
+
+#
+# Out of the box, Ozone uses jsvc from Apache Commons to launch daemons
+# on privileged ports.  This functionality can be replaced by providing
+# custom functions.  See ozone-functions.sh for more information.
+#
+
+# The jsvc implementation to use. Jsvc is required to run secure datanodes
+# that bind to privileged ports to provide authentication of data transfer
+# protocol.  Jsvc is not required if SASL is configured for authentication of
+# data transfer protocol using non-privileged ports.
+# export JSVC_HOME=/usr/bin
+
+#
+# This directory contains pids for secure and privileged processes.
+#export OZONE_SECURE_PID_DIR=${OZONE_PID_DIR}
+
+#
+# This directory contains the logs for secure and privileged processes.
+# Java property: hadoop.log.dir
+# export OZONE_SECURE_LOG=${OZONE_LOG_DIR}
+
+#
+# When running a secure daemon, the default value of OZONE_IDENT_STRING
+# ends up being a bit bogus.  Therefore, by default, the code will
+# replace OZONE_IDENT_STRING with OZONE_xx_SECURE_USER.  If one wants
+# to keep OZONE_IDENT_STRING untouched, then uncomment this line.
+# export OZONE_SECURE_IDENT_PRESERVE="true"
+
+###
+# Ozone Manager specific parameters
+###
+# Specify the JVM options to be used when starting the Ozone Manager.
+# These options will be appended to the options specified as OZONE_OPTS
+# and therefore may override any similar flags set in OZONE_OPTS
+#
+# export OZONE_OM_OPTS=""
+
+###
+# Ozone DataNode specific parameters
+###
+# Specify the JVM options to be used when starting Ozone DataNodes.
+# These options will be appended to the options specified as OZONE_OPTS
+# and therefore may override any similar flags set in OZONE_OPTS
+#
+# export OZONE_DATANODE_OPTS=""
+
+###
+# HDFS StorageContainerManager specific parameters
+###
+# Specify the JVM options to be used when starting the HDFS Storage Container Manager.
+# These options will be appended to the options specified as OZONE_OPTS
+# and therefore may override any similar flags set in OZONE_OPTS
+#
+# export OZONE_SCM_OPTS=""
+
+###
+# Advanced Users Only!
+###
+
+#
+# When building Ozone, one can add the class paths to the commands
+# via this special env var:
+# export OZONE_ENABLE_BUILD_PATHS="true"
+
+#
+# To prevent accidents, shell commands be (superficially) locked
+# to only allow certain users to execute certain subcommands.
+# It uses the format of (command)_(subcommand)_USER.
+#
+# For example, to limit who can execute the om command,
+# export OZONE_OM_USER=ozone
+
+export OZONE_OM_USER={{ozone_user}}
+export OZONE_OPTS="$OZONE_OPTS  -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=70 -XX:+CMSParallelRemarkEnabled "
+
+    </value>
+    <value-attributes>
+      <type>content</type>
+    </value-attributes>
+    <on-ambari-upgrade add="true"/>
+  </property>
+</configuration>
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ozone-core-site.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ozone-core-site.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ozone-core-site.xml
new file mode 100644
--- /dev/null	(date 1738999374962)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ozone-core-site.xml	(date 1738999374962)
@@ -0,0 +1,33 @@
+<?xml version="1.0"?>
+<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
+<!--
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to You under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+-->
+<!-- Put site-specific property overrides in this file. -->
+<configuration xmlns:xi="http://www.w3.org/2001/XInclude" supports_final="true">
+  <property>
+    <name>hadoop.security.authentication</name>
+    <value></value>
+    <description>
+      if core-site.xml not exists,use this.
+    </description>
+    <value-attributes>
+      <empty-value-valid>true</empty-value-valid>
+    </value-attributes>
+    <on-ambari-upgrade add="false"/>
+  </property>
+
+</configuration>
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ranger-ozone-audit.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ranger-ozone-audit.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ranger-ozone-audit.xml
new file mode 100644
--- /dev/null	(date 1738999374966)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ranger-ozone-audit.xml	(date 1738999374966)
@@ -0,0 +1,133 @@
+<?xml version="1.0"?>
+<!--
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+<configuration>
+  <property>
+    <name>xasecure.audit.is.enabled</name>
+    <value>true</value>
+    <description>Is Audit enabled?</description>
+    <value-attributes>
+      <type>boolean</type>
+    </value-attributes>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>xasecure.audit.destination.hdfs</name>
+    <value>true</value>
+    <display-name>Audit to HDFS</display-name>
+    <description>Is Audit to HDFS enabled?</description>
+    <value-attributes>
+      <type>boolean</type>
+    </value-attributes>
+    <depends-on>
+      <property>
+        <type>ranger-env</type>
+        <name>xasecure.audit.destination.hdfs</name>
+      </property>
+    </depends-on>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>xasecure.audit.destination.hdfs.dir</name>
+    <value>hdfs://NAMENODE_HOSTNAME:8020/ranger/audit</value>
+    <description>HDFS folder to write audit to, make sure the service user has requried permissions</description>
+    <depends-on>
+      <property>
+        <type>ranger-env</type>
+        <name>xasecure.audit.destination.hdfs.dir</name>
+      </property>
+    </depends-on>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>xasecure.audit.destination.hdfs.batch.filespool.dir</name>
+    <value>/var/log/ozone/audit/hdfs/spool</value>
+    <description>/var/log/ozone/audit/hdfs/spool</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>xasecure.audit.destination.solr</name>
+    <value>false</value>
+    <display-name>Audit to SOLR</display-name>
+    <description>Is Solr audit enabled?</description>
+    <value-attributes>
+      <type>boolean</type>
+    </value-attributes>
+    <depends-on>
+      <property>
+        <type>ranger-env</type>
+        <name>xasecure.audit.destination.solr</name>
+      </property>
+    </depends-on>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>xasecure.audit.destination.solr.urls</name>
+    <value/>
+    <description>Solr URL</description>
+    <value-attributes>
+      <empty-value-valid>true</empty-value-valid>
+    </value-attributes>
+    <depends-on>
+      <property>
+        <type>ranger-admin-site</type>
+        <name>ranger.audit.solr.urls</name>
+      </property>
+    </depends-on>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>xasecure.audit.destination.solr.zookeepers</name>
+    <value>NONE</value>
+    <description>Solr Zookeeper string</description>
+    <depends-on>
+      <property>
+        <type>ranger-admin-site</type>
+        <name>ranger.audit.solr.zookeepers</name>
+      </property>
+    </depends-on>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>xasecure.audit.destination.solr.batch.filespool.dir</name>
+    <value>/var/log/ozone/audit/solr/spool</value>
+    <description>/var/log/ozone/audit/solr/spool</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>xasecure.audit.provider.summary.enabled</name>
+    <value>false</value>
+    <display-name>Audit provider summary enabled</display-name>
+    <description>Enable Summary audit?</description>
+    <value-attributes>
+      <type>boolean</type>
+    </value-attributes>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>ranger.plugin.ozone.ambari.cluster.name</name>
+    <value>{{cluster_name}}</value>
+    <description>Capture cluster name from where Ranger ozone plugin is enabled.</description>
+    <value-attributes>
+      <empty-value-valid>true</empty-value-valid>
+    </value-attributes>
+    <on-ambari-upgrade add="false"/>
+  </property>
+</configuration>
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ozone-site.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ozone-site.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ozone-site.xml
new file mode 100644
--- /dev/null	(date 1738999374956)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ozone-site.xml	(date 1738999374956)
@@ -0,0 +1,600 @@
+<?xml version="1.0"?>
+<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
+<!--
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to You under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+-->
+<!-- Put site-specific property overrides in this file. -->
+<configuration xmlns:xi="http://www.w3.org/2001/XInclude" supports_final="true">
+  <!-- ResourceManager -->
+  <property>
+    <name>ozone.om.address</name>
+    <value>0.0.0.0:9862</value>
+    <description>The address of the Ozone OM service. This allows clients to discover
+      the address of the OM.</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>ozone.scm.names</name>
+    <value>localhost</value>
+    <description>The value of this property is a set of DNS | DNS:PORT | IP
+      Address | IP:PORT. Written as a comma separated string. e.g. scm1,
+      scm2:8020, 7.7.7.7:7777.
+      This property allows datanodes to discover where SCM is, so that
+      datanodes can send heartbeat to SCM. </description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>ozone.scm.client.address</name>
+    <value>localhost:9860</value>
+    <description> The address of the Ozone SCM client service. This is a required setting.
+      It is a string in the host:port format. The port number is optional
+      and defaults to 9860. </description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+
+  <property>
+    <name>ozone.metadata.dirs</name>
+    <display-name>Ozone Default storage directories</display-name>
+    <value>/ozone/meta</value>
+    <description>  This setting is the fallback location for SCM, OM, Recon and DataNodes
+      to store their metadata. This setting may be used only in test/PoC
+      clusters to simplify configuration.
+
+      For production clusters or any time you care about performance, it is
+      recommended that ozone.om.db.dirs, ozone.scm.db.dirs and
+      dfs.container.ratis.datanode.storage.dir be configured separately. </description>
+    <value-attributes>
+      <type>directories</type>
+    </value-attributes>
+    <on-ambari-upgrade add="true"/>
+  </property>
+
+  <property>
+    <name>ozone.om.ratis.enable</name>
+    <display-name>ozone.om.ratis.enable</display-name>
+    <value>false</value>
+    <description>Property to enable or disable Ratis server on OM.
+    Please note - this is a temporary property to disable OM Ratis server.</description>
+    <on-ambari-upgrade add="true"/>
+  </property>
+
+  <property>
+    <name>ozone.om.ratis.storage.dir</name>
+    <display-name>OM's Ratis metadata directory</display-name>
+    <value>/ozone/om/ratis/storage</value>
+    <description> This directory is used for storing OM's Ratis metadata like
+      logs. If this is not set then default metadata dirs is used. A warning
+      will be logged if this not set. Ideally, this should be mapped to as
+      fast disk like an SSD.
+      If undefined, OM ratis storage dir will fallback to ozone.metadata.dirs.
+      This fallback approach is not recommended for production environments.</description>
+    <value-attributes>
+      <type>directories</type>
+    </value-attributes>
+    <on-ambari-upgrade add="true"/>
+  </property>
+
+
+  <property>
+    <name>ozone.om.db.dirs</name>
+    <display-name>OzoneManager metadata directories</display-name>
+    <value>/ozone/om/db/</value>
+    <description> Directory where the OzoneManager stores its metadata. This should
+      be specified as a single directory. If the directory does not
+      exist then the OM will attempt to create it.
+
+      If undefined, then the OM will log a warning and fallback to
+      ozone.metadata.dirs. This fallback approach is not recommended for
+      production environments.</description>
+    <value-attributes>
+      <type>directories</type>
+    </value-attributes>
+    <on-ambari-upgrade add="true"/>
+  </property>
+
+  <property>
+    <name>ozone.om.ratis.storage.dir</name>
+    <display-name>OM's Ratis metadata directory</display-name>
+    <value>/ozone/om/ratis/storage</value>
+    <description> This directory is used for storing OM's Ratis metadata like
+      logs. If this is not set then default metadata dirs is used. A warning
+      will be logged if this not set. Ideally, this should be mapped to a
+      fast disk like an SSD.
+      If undefined, OM ratis storage dir will fallback to ozone.metadata.dirs.
+      This fallback approach is not recommended for production environments.</description>
+    <value-attributes>
+      <type>directories</type>
+    </value-attributes>
+    <on-ambari-upgrade add="true"/>
+  </property>
+
+  <property>
+    <name>ozone.om.ratis.snapshot.dir</name>
+    <display-name>OM snapshot dir</display-name>
+    <value>/ozone/om/ratis/snapshot</value>
+    <description> This directory is used for storing OM's snapshot
+      related files like the ratisSnapshotIndex and DB checkpoint from leader
+      OM.
+      If undefined, OM snapshot dir will fallback to ozone.metadata.dirs.
+      This fallback approach is not recommended for production environments.</description>
+    <value-attributes>
+      <type>directories</type>
+    </value-attributes>
+    <on-ambari-upgrade add="true"/>
+  </property>
+
+  <property>
+    <name>ozone.scm.db.dirs</name>
+    <display-name>StorageContainerManager metadata directories</display-name>
+    <value>/ozone/scm/db</value>
+    <description> Directory where the StorageContainerManager stores its metadata.
+      This should be specified as a single directory. If the directory
+      does not exist then the SCM will attempt to create it.
+
+      If undefined, then the SCM will log a warning and fallback to
+      ozone.metadata.dirs. This fallback approach is not recommended for
+      production environments.</description>
+    <value-attributes>
+      <type>directories</type>
+    </value-attributes>
+    <on-ambari-upgrade add="true"/>
+  </property>
+
+  <property>
+    <name>ozone.scm.datanode.id.dir</name>
+    <display-name>Datanode ID directory</display-name>
+    <value>/ozone/datanode/scm/</value>
+    <description> The path that datanodes will use to store the datanode ID.
+      If this value is not set, then datanode ID is created under the
+      metadata directory.</description>
+    <value-attributes>
+      <type>directories</type>
+    </value-attributes>
+    <on-ambari-upgrade add="true"/>
+  </property>
+
+
+
+  <property>
+    <name>dfs.container.ratis.datanode.storage.dir</name>
+    <display-name>Datanode container ratis directory</display-name>
+    <value>/ozone/datanode/container/ratis</value>
+    <description> This directory is used for storing Ratis metadata like logs. If
+      this is not set then default metadata dirs is used. A warning will be logged if
+      this not set. Ideally, this should be mapped to a fast disk like an SSD.</description>
+    <value-attributes>
+      <type>directories</type>
+    </value-attributes>
+    <on-ambari-upgrade add="true"/>
+  </property>
+
+  <property>
+    <name>hdds.datanode.dir</name>
+    <display-name>hdds.datanode.dir</display-name>
+    <value>/ozone/disk1</value>
+    <description> Determines where on the local filesystem HDDS data will be
+      stored. Defaults to dfs.datanode.data.dir if not specified.
+      The directories should be tagged with corresponding storage types
+      ([SSD]/[DISK]/[ARCHIVE]/[RAM_DISK]) for storage policies. The default
+      storage type will be DISK if the directory does not have a storage type
+      tagged explicitly.</description>
+    <value-attributes>
+      <type>directories</type>
+    </value-attributes>
+    <on-ambari-upgrade add="true"/>
+  </property>
+
+
+  <property>
+    <name>ozone.recon.db.dir</name>
+    <display-name>ozone.recon.db.dir</display-name>
+    <value>/ozone/recon/db</value>
+    <description> Directory where the Recon Server stores its metadata. This should
+      be specified as a single directory. If the directory does not
+      exist then the Recon will attempt to create it.
+      If undefined, then the Recon will log a warning and fallback to
+      ozone.metadata.dirs. This fallback approach is not recommended for
+      production environments.</description>
+    <value-attributes>
+      <type>directories</type>
+    </value-attributes>
+    <on-ambari-upgrade add="true"/>
+  </property>
+
+  <property>
+    <name>ozone.recon.om.db.dir</name>
+    <display-name>ozone.recon.om.db.dir</display-name>
+    <value>/ozone/recon/om/db</value>
+    <description>  Directory where the Recon Server stores its OM snapshot DB. This should
+    be specified as a single directory. If the directory does not
+    exist then the Recon will attempt to create it.
+    If undefined, then the Recon will log a warning and fallback to
+    ozone.metadata.dirs. This fallback approach is not recommended for
+    production environments.</description>
+    <value-attributes>
+      <type>directories</type>
+    </value-attributes>
+    <on-ambari-upgrade add="true"/>
+  </property>
+
+
+
+  <property>
+    <name>ozone.scm.http-address</name>
+    <display-name>ozone.scm.http-address</display-name>
+    <value>localhost:9876</value>
+    <description> The address and the base port where the SCM web ui will listen on.
+      If the port is 0 then the server will start on a free port.</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>ozone.scm.https-address</name>
+    <display-name>ozone.scm.https-address</display-name>
+    <value>0.0.0.0:9877</value>
+    <description> The address and the base port where the SCM web UI will listen
+      on using HTTPS.
+      If the port is 0 then the server will start on a free port.</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+
+  <property>
+    <name>ozone.scm.datanode.address</name>
+    <display-name>ozone.scm.datanode.address</display-name>
+    <value>localhost:9861</value>
+    <description> The address and the base port where the SCM web ui will listen on.
+      If the port is 0 then the server will start on a free port.</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+
+  <property>
+    <name>ozone.om.http-address</name>
+    <display-name>ozone.om.http-address</display-name>
+    <value>0.0.0.0:9874</value>
+    <description> The address and the base port where the OM web UI will listen on.
+      If the port is 0, then the server will start on a free port. However, it
+      is best to specify a well-known port, so it is easy to connect and see
+      the OM management UI.</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>ozone.om.https-address</name>
+    <display-name>ozone.om.https-address</display-name>
+    <value>0.0.0.0:9875</value>
+    <description> The address and the base port where the OM web UI will listen
+      on using HTTPS.
+      If the port is 0 then the server will start on a free port.</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+
+  <property>
+    <name>ozone.recon.http-address</name>
+    <display-name>ozone.recon.http-address</display-name>
+    <value>0.0.0.0:9888</value>
+    <description> The address and the base port where the Recon web UI will listen on.
+      If the port is 0, then the server will start on a free port. However, it
+      is best to specify a well-known port, so it is easy to connect and see
+      the Recon management UI.</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>ozone.recon.https-address</name>
+    <display-name>ozone.recon.https-address</display-name>
+    <value>0.0.0.0:9889</value>
+    <description> The address and the base port where the Recon web UI will listen
+      on using HTTPS. If the port is 0 then the server will start on a free
+      port.</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+
+  <property>
+    <name>hdds.datanode.http-address</name>
+    <display-name>hdds.datanode.http-address</display-name>
+    <value>0.0.0.0:9882</value>
+    <description> The address and the base port where the Datanode web ui will listen on.
+      If the port is 0 then the server will start on a free port.</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>hdds.datanode.https-address</name>
+    <display-name>hdds.datanode.https-address</display-name>
+    <value>0.0.0.0:9883</value>
+    <description> The address and the base port where the Datanode web UI will listen
+      on using HTTPS.
+      If the port is 0 then the server will start on a free port.</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>hdds.datanode.http-bind-host</name>
+    <display-name>hdds.datanode.http-bind-host</display-name>
+    <value>0.0.0.0</value>
+    <description> The actual address the Datanode web server will bind to. If this
+      optional address is set, it overrides only the hostname portion of
+      hdds.datanode.http-address.</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+
+  <property>
+    <name>ozone.http.policy</name>
+    <display-name>ozone.http.policy</display-name>
+    <value>HTTP_ONLY</value>
+    <description> Decide if HTTPS(SSL) is supported on Ozone
+      This configures the HTTP endpoint for Ozone daemons:
+      The following values are supported:
+      - HTTP_ONLY : Service is provided only on http
+      - HTTPS_ONLY : Service is provided only on https
+      - HTTP_AND_HTTPS : Service is provided both on http and https.</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+
+  <property>
+    <name>ozone.acl.enabled</name>
+    <value>false</value>
+    <description>Key to enable/disable ozone acls.</description>
+    <display-name>ozone.acl.enabled</display-name>
+    <value-attributes>
+      <type>value-list</type>
+      <entries>
+        <entry>
+          <value>true</value>
+          <label>On</label>
+        </entry>
+        <entry>
+          <value>false</value>
+          <label>Off</label>
+        </entry>
+      </entries>
+      <selection-cardinality>1</selection-cardinality>
+    </value-attributes>
+    <depends-on>
+      <property>
+        <type>ranger-ozone-plugin-properties</type>
+        <name>ranger-ozone-plugin-enabled</name>
+      </property>
+    </depends-on>
+    <on-ambari-upgrade add="false"/>
+  </property>
+
+  <property>
+    <name>ozone.acl.authorizer.class</name>
+    <value>org.apache.hadoop.ozone.security.acl.OzoneAccessAuthorizer</value>
+    <description>Acl authorizer for Ozone.
+    </description>
+    <value-attributes>
+      <empty-value-valid>true</empty-value-valid>
+    </value-attributes>
+    <depends-on>
+      <property>
+        <type>ozone-site</type>
+        <name>ozone.acl.enabled</name>
+      </property>
+      <property>
+        <type>ranger-ozone-plugin-properties</type>
+        <name>ranger-ozone-plugin-enabled</name>
+      </property>
+    </depends-on>
+    <on-ambari-upgrade add="false"/>
+  </property>
+
+  <property>
+    <name>hdds.scm.kerberos.principal</name>
+    <value>ozone_scm/_HOST@${realm}</value>
+    <description>
+      The SCM service principal. e.g. scm/_HOST@REALM.COM
+    </description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>hdds.scm.kerberos.keytab.file</name>
+    <value>${keytab_dir}/ozone_scm.service.keytab</value>
+    <description>
+      The keytab file used by SCM daemon to login as its service principal.
+    </description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>hdds.scm.http.auth.kerberos.principal</name>
+    <value>HTTP/_HOST@REALM</value>
+    <description>
+      SCM http server service principal if SPNEGO is enabled for SCM http server.
+    </description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>hdds.scm.http.auth.kerberos.keytab</name>
+    <value>/etc/security/keytabs/HTTP.keytab</value>
+    <description>
+      The keytab file used by SCM http server to login as its service
+      principal if SPNEGO is enabled for SCM http server.
+    </description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+
+  <property>
+    <name>ozone.om.kerberos.principal</name>
+    <value>ozone_om/_HOST@${realm}</value>
+    <description>
+      The OzoneManager service principal. Ex om/_HOST@REALM.COM
+    </description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>ozone.om.kerberos.keytab.file</name>
+    <value>${keytab_dir}/ozone_om.service.keytab</value>
+    <description>
+      The keytab file used by OzoneManager daemon to login as its
+      service principal. The principal name is configured with
+      ozone.om.kerberos.principal.
+    </description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>ozone.om.http.auth.kerberos.principal</name>
+    <value>HTTP/_HOST@REALM</value>
+    <description>
+      Ozone Manager http server service principal if SPNEGO is enabled for om http server.
+    </description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>ozone.om.http.auth.kerberos.keytab</name>
+    <value>/etc/security/keytabs/HTTP.keytab</value>
+    <description>
+      The keytab file used by OM http server to login as its service
+      principal if SPNEGO is enabled for om http server.
+    </description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+
+  <property>
+    <name>ozone.security.enabled</name>
+    <value>false</value>
+    <description>
+      True if security is enabled for ozone. When this property is
+     true, hadoop.security.authentication should be Kerberos.
+    </description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+
+
+  <property>
+    <name>ozone.s3g.http.enabled</name>
+    <display-name>ozone.s3g.http.enabled</display-name>
+    <value>true</value>
+    <description> The boolean which enables the Ozone S3Gateway server.</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>ozone.s3g.domain.name</name>
+    <value/>
+    <description>List of Ozone S3Gateway domain names. If multiple
+      domain names to be provided, they should be a "," separated.
+      This parameter is only required when virtual host style pattern is
+      followed.</description>
+    <value-attributes>
+      <empty-value-valid>true</empty-value-valid>
+    </value-attributes>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>ozone.s3g.http-address</name>
+    <display-name>ozone.s3g.http-address</display-name>
+    <value>0.0.0.0:9878</value>
+    <description> The address and the base port where the Ozone S3Gateway
+      Server will listen on.</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>ozone.s3g.https-address</name>
+    <display-name>ozone.s3g.https-address</display-name>
+    <value>0.0.0.0:9879</value>
+    <description> Ozone S3Gateway serverHTTPS server address and port.</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>ozone.s3g.volume.name</name>
+    <display-name>ozone.s3g.volume.name</display-name>
+    <value>s3v</value>
+    <description> The volume name to access through the s3gateway.</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+
+  <property>
+    <name>ozone.s3g.http.auth.kerberos.principal</name>
+    <value>HTTP/_HOST@REALM</value>
+    <description>
+      The server principal used by Ozone S3Gateway server. This is
+      typically set to
+      HTTP/_HOST@REALM.TLD The SPNEGO server principal begins with the prefix
+      HTTP/ by convention.
+    </description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>ozone.s3g.http.auth.kerberos.keytab</name>
+    <value>/etc/security/keytabs/HTTP.keytab</value>
+    <description>
+      The keytab file used by the S3Gateway server to login as its
+      service principal.
+    </description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+
+  <property>
+    <name>ozone.om.handler.count.key</name>
+    <value>100</value>
+    <description>
+      The number of RPC handler threads for OM service endpoints.
+    </description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+
+  <property>
+    <name>ozone.scm.handler.count.key</name>
+    <value>100</value>
+    <description>
+      The number of RPC handler threads for each SCM service
+      endpoint.
+
+      The default is appropriate for small clusters (tens of nodes).
+
+      Set a value that is appropriate for the cluster size. Generally, HDFS
+      recommends RPC handler count is set to 20 * log2(Cluster Size) with an
+      upper limit of 200. However, SCM will not have the same amount of
+      traffic as Namenode, so a value much smaller than that will work well too.
+    </description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+
+
+  <property>
+    <name>dfs.container.ratis.num.write.chunk.threads.per.volume</name>
+    <value>10</value>
+    <description>
+      Maximum number of threads in the thread pool that Datanode
+      will use for writing replicated chunks.
+      This is a per configured locations!
+      (10 thread per disk by default).
+    </description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+
+
+  <property>
+    <name>ozone.block.deleting.container.limit.per.interval</name>
+    <value>10</value>
+    <description>
+      A maximum number of containers to be scanned by block deleting
+      service per
+      time interval. The block deleting service spawns a thread to handle block
+      deletions in a container. This property is used to throttle the number of
+      threads spawned for block deletions.
+    </description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>ozone.block.deleting.limit.per.task</name>
+    <value>1000</value>
+    <description>
+      A maximum number of blocks to be deleted by block deleting
+      service per
+      time interval. This property is used to throttle the actual number of
+      block deletions on a data node per container.
+    </description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+
+
+</configuration>
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ranger-ozone-policymgr-ssl.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ranger-ozone-policymgr-ssl.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ranger-ozone-policymgr-ssl.xml
new file mode 100644
--- /dev/null	(date 1738999374976)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ranger-ozone-policymgr-ssl.xml	(date 1738999374976)
@@ -0,0 +1,72 @@
+<?xml version="1.0"?>
+<!--
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+<configuration>
+  <property>
+    <name>xasecure.policymgr.clientssl.keystore</name>
+    <value/>
+    <description>Java Keystore files</description>
+    <value-attributes>
+      <empty-value-valid>true</empty-value-valid>
+    </value-attributes>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>xasecure.policymgr.clientssl.keystore.password</name>
+    <value>myKeyFilePassword</value>
+    <property-type>PASSWORD</property-type>
+    <description>password for keystore</description>
+    <value-attributes>
+      <type>password</type>
+    </value-attributes>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>xasecure.policymgr.clientssl.truststore</name>
+    <value/>
+    <description>java truststore file</description>
+    <value-attributes>
+      <empty-value-valid>true</empty-value-valid>
+    </value-attributes>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>xasecure.policymgr.clientssl.truststore.password</name>
+    <value>changeit</value>
+    <property-type>PASSWORD</property-type>
+    <description>java truststore password</description>
+    <value-attributes>
+      <type>password</type>
+    </value-attributes>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>xasecure.policymgr.clientssl.keystore.credential.file</name>
+    <value>jceks://file{{credential_file}}</value>
+    <description>java keystore credential file</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>xasecure.policymgr.clientssl.truststore.credential.file</name>
+    <value>jceks://file{{credential_file}}</value>
+    <description>java truststore credential file</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+</configuration>
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ranger-ozone-plugin-properties.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ranger-ozone-plugin-properties.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ranger-ozone-plugin-properties.xml
new file mode 100644
--- /dev/null	(date 1738999374979)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ranger-ozone-plugin-properties.xml	(date 1738999374979)
@@ -0,0 +1,135 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+<configuration supports_final="true">
+  <property>
+    <name>common.name.for.certificate</name>
+    <value/>
+    <description>Common name for certificate, this value should match what is specified in repo within ranger admin</description>
+    <value-attributes>
+      <empty-value-valid>true</empty-value-valid>
+    </value-attributes>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>policy_user</name>
+    <value>ambari-qa</value>
+    <display-name>Policy user for OZONE</display-name>
+    <depends-on>
+      <property>
+        <type>ranger-env</type>
+        <name>ranger_user</name>
+      </property>
+    </depends-on>
+    <description>This user must be system user and also present at Ranger admin portal</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>ranger-ozone-plugin-enabled</name>
+    <value>No</value>
+    <display-name>Enable Ranger for OZONE</display-name>
+    <description>Enable ranger ozone plugin ?</description>
+    <value-attributes>
+      <type>boolean</type>
+      <overridable>false</overridable>
+    </value-attributes>
+    <depends-on>
+      <property>
+        <type>ranger-env</type>
+        <name>ranger-ozone-plugin-enabled</name>
+      </property>
+    </depends-on>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>REPOSITORY_CONFIG_USERNAME</name>
+    <value>ozone</value>
+    <display-name>Ranger repository config user</display-name>
+    <description>Used for repository creation on ranger admin</description>
+    <depends-on>
+      <property>
+        <type>ranger-ozone-plugin-properties</type>
+        <name>ranger-ozone-plugin-enabled</name>
+      </property>
+      <property>
+        <type>ozone-env</type>
+        <name>ozone_user</name>
+      </property>
+    </depends-on>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>REPOSITORY_CONFIG_PASSWORD</name>
+    <value>ozone</value>
+    <display-name>Ranger repository config password</display-name>
+    <property-type>PASSWORD</property-type>
+    <description>Used for repository creation on ranger admin</description>
+    <value-attributes>
+      <type>password</type>
+    </value-attributes>
+    <on-ambari-upgrade add="false"/>
+  </property>
+
+  <!-- Inherited from HBase in HDP 2.6 -->
+  <property>
+    <name>external_admin_username</name>
+    <value></value>
+    <display-name>External Ranger admin username</display-name>
+    <description>Add ranger default admin username if want to communicate to external ranger</description>
+    <value-attributes>
+      <empty-value-valid>true</empty-value-valid>
+    </value-attributes>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>external_admin_password</name>
+    <value></value>
+    <display-name>External Ranger admin password</display-name>
+    <property-type>PASSWORD</property-type>
+    <description>Add ranger default admin password if want to communicate to external ranger</description>
+    <value-attributes>
+      <type>password</type>
+      <empty-value-valid>true</empty-value-valid>
+    </value-attributes>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>external_ranger_admin_username</name>
+    <value></value>
+    <display-name>External Ranger Ambari admin username</display-name>
+    <description>Add ranger default ambari admin username if want to communicate to external ranger</description>
+    <value-attributes>
+      <empty-value-valid>true</empty-value-valid>
+    </value-attributes>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>external_ranger_admin_password</name>
+    <value></value>
+    <display-name>External Ranger Ambari admin password</display-name>
+    <property-type>PASSWORD</property-type>
+    <description>Add ranger default ambari admin password if want to communicate to external ranger</description>
+    <value-attributes>
+      <type>password</type>
+      <empty-value-valid>true</empty-value-valid>
+    </value-attributes>
+    <on-ambari-upgrade add="false"/>
+  </property>
+</configuration>
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone.py
new file mode 100644
--- /dev/null	(date 1739000653061)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone.py	(date 1739000653061)
@@ -0,0 +1,91 @@
+#!/usr/bin/env python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+import os
+from ambari_commons.os_family_impl import OsFamilyFuncImpl, OsFamilyImpl
+from resource_management import *
+
+
+@OsFamilyFuncImpl(os_family=OsFamilyImpl.DEFAULT)
+def ozone(name=None):
+    import params
+
+    Directory(params.ozone_log_dir_prefix,
+              owner=params.ozone_user,
+              create_parents=True,
+              group=params.user_group,
+              mode=0o775
+              )
+
+    Directory(params.ozone_pid_dir_prefix,
+              owner=params.ozone_user,
+              create_parents=True,
+              group=params.user_group,
+              mode=0o775
+              )
+
+    Directory(params.ozone_log_dir,
+              owner=params.ozone_user,
+              create_parents=True,
+              group=params.user_group,
+              mode=0o755
+              )
+
+    Directory(params.ozone_pid_dir,
+              owner=params.ozone_user,
+              create_parents=True,
+              group=params.user_group,
+              mode=0o755
+              )
+
+    XmlConfig("ozone-site.xml",
+              conf_dir=params.ozone_conf_dir,
+              configurations=params.config['configurations']['ozone-site'],
+              configuration_attributes=params.config['configuration_attributes']['ozone-site'],
+              owner=params.ozone_user,
+              group=params.user_group,
+              mode=0o644
+              )
+
+    ozone_env_sh_template = params.config['configurations']['ozone-env']['content']
+
+    File(os.path.join(params.ozone_conf_dir, "ozone-env.sh"),
+         owner=params.ozone_user,
+         group=params.user_group,
+         mode=0o755,
+         content=InlineTemplate(ozone_env_sh_template)
+         )
+
+    XmlConfig("core-site.xml",
+              conf_dir=params.ozone_conf_dir,
+              # configurations=params.config['configurations']['core-site'],
+              # configuration_attributes=params.config['configurationAttributes']['core-site'],
+              configurations=params.core_site_configurations,
+              configuration_attributes=params.core_site_attributes,
+              owner=params.ozone_user,
+              group=params.user_group,
+              mode=0o644
+              )
+
+    File(os.path.join(params.ozone_conf_dir, "hadoop-metrics2.properties"),
+         owner=params.ozone_user,
+         group=params.user_group,
+         mode=0o644,
+         content=Template("hadoop-metrics2-ozone.properties.j2")
+         )
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ranger-ozone-security.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ranger-ozone-security.xml b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ranger-ozone-security.xml
new file mode 100644
--- /dev/null	(date 1738999374970)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/configuration/ranger-ozone-security.xml	(date 1738999374970)
@@ -0,0 +1,74 @@
+<?xml version="1.0"?>
+<!--
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+<configuration>
+  <property>
+    <name>ranger.plugin.ozone.service.name</name>
+    <value>{{repo_name}}</value>
+    <description>Name of the Ranger service containing Ozone policies</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>ranger.plugin.ozone.policy.source.impl</name>
+    <value>org.apache.ranger.admin.client.RangerAdminRESTClient</value>
+    <description>Class to retrieve policies from the source</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>ranger.plugin.ozone.policy.rest.url</name>
+    <value>{{policymgr_mgr_url}}</value>
+    <description>URL to Ranger Admin</description>
+    <on-ambari-upgrade add="false"/>
+    <depends-on>
+      <property>
+        <type>admin-properties</type>
+        <name>policymgr_external_url</name>
+      </property>
+    </depends-on>
+  </property>
+  <property>
+    <name>ranger.plugin.ozone.policy.rest.ssl.config.file</name>
+    <value>/etc/ozone/conf/ranger-policymgr-ssl.xml</value>
+    <description>Path to the file containing SSL details to contact Ranger Admin</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>ranger.plugin.ozone.policy.pollIntervalMs</name>
+    <value>30000</value>
+    <description>How often to poll for changes in policies?</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>ranger.plugin.ozone.policy.cache.dir</name>
+    <value>/etc/ranger/{{repo_name}}/policycache</value>
+    <description>Directory where Ranger policies are cached after successful retrieval from the source</description>
+    <on-ambari-upgrade add="false"/>
+  </property>
+  <property>
+    <name>xasecure.ozone.update.xapolicies.on.grant.revoke</name>
+    <value>true</value>
+    <display-name>Should Ozone GRANT/REVOKE update XA policies</display-name>
+    <description>Should Ozone plugin update Ranger policies for updates to permissions done using GRANT/REVOKE?</description>
+    <value-attributes>
+      <type>boolean</type>
+    </value-attributes>
+    <on-ambari-upgrade add="false"/>
+  </property>
+</configuration>
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone_om.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone_om.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone_om.py
new file mode 100644
--- /dev/null	(date 1739000612877)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone_om.py	(date 1739000612877)
@@ -0,0 +1,93 @@
+#!/usr/bin/env python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+from resource_management import *
+from resource_management import *
+from resource_management.libraries.functions import check_process_status
+
+from ozone import ozone
+from ozone_service import ozone_service
+from setup_ranger_ozone import setup_ranger_ozone
+
+
+class OzoneManager(Script):
+    def install(self, env):
+        import params
+        env.set_params(params)
+        # configure the correct package name(metainfo.xml) so that stack-select can find it
+        self.install_packages(env)
+        Logger.info('install ozone om server successfully!')
+
+    def configure(self, env):
+        import params
+        env.set_params(params)
+        ozone(name='ozone')
+        Logger.info('configure ozone om server successfully!')
+
+    def start(self, env):
+        import params
+        env.set_params(params)
+        self.configure(env)  # for security reason
+        setup_ranger_ozone(upgrade_type=None, service_name="ozone")
+        ozone_service('ozone', action='om_start')
+        Logger.info('start ozone om server successfully!')
+
+    def stop(self, env):
+        import params
+        env.set_params(params)
+        ozone_service('ozone', action='om_stop')
+        Logger.info('stop ozone om server successfully!')
+
+    def restart(self, env):
+        self.stop(env)
+        self.start(env)
+
+    def status(self, env):
+        import params
+        check_process_status(params.ozone_om_pid_file)
+
+    def init(self, env):
+        import params
+        env.set_params(params)
+        self.configure(env)  # for security reason
+        ozone_service('ozone', action='om_init')
+        Logger.info('init ozone om server successfully!')
+
+    def ha(self, env):
+        import params
+        env.set_params(params)
+        self.configure(env)  # for security reason
+        ozone_service('ozone', action='om_ha')
+        Logger.info(' ozone om  ha command execute successfully!')
+
+    def get_user(self):
+        import params
+        return params.ozone_user
+
+    def get_log_folder(self):
+        import params
+        return params.ozone_log_dir
+
+    def get_pid_files(self):
+        import params
+        return [params.ozone_om_pid_file]
+
+
+if __name__ == "__main__":
+    OzoneManager().execute()
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone_datanode.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone_datanode.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone_datanode.py
new file mode 100644
--- /dev/null	(date 1739000612856)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone_datanode.py	(date 1739000612856)
@@ -0,0 +1,77 @@
+#!/usr/bin/env python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+from resource_management import *
+from resource_management import *
+from resource_management.libraries.functions import check_process_status
+
+from ozone import ozone
+from ozone_service import ozone_service
+
+
+class OzoneDataNode(Script):
+    def install(self, env):
+        import params
+        env.set_params(params)
+        # configure the correct package name(metainfo.xml) so that stack-select can find it
+        self.install_packages(env)
+        Logger.info('install ozone datanode successfully!')
+
+    def configure(self, env):
+        import params
+        env.set_params(params)
+        ozone(name='ozone')
+        Logger.info('configure ozone datanode successfully!')
+
+    def start(self, env):
+        import params
+        env.set_params(params)
+        self.configure(env)  # for security reason
+        ozone_service('ozone', action='datanode_start')
+        Logger.info('start ozone datanode successfully!')
+
+    def stop(self, env):
+        import params
+        env.set_params(params)
+        ozone_service('ozone', action='datanode_stop')
+        Logger.info('stop ozone datanode successfully!')
+
+    def restart(self, env):
+        self.stop(env)
+        self.start(env)
+
+    def status(self, env):
+        import params
+        check_process_status(params.ozone_datanode_pid_file)
+
+    def get_user(self):
+        import params
+        return params.ozone_user
+
+    def get_log_folder(self):
+        import params
+        return params.ozone_log_dir
+
+    def get_pid_files(self):
+        import params
+        return [params.ozone_datanode_pid_file]
+
+
+if __name__ == "__main__":
+    OzoneDataNode().execute()
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone_s3g.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone_s3g.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone_s3g.py
new file mode 100644
--- /dev/null	(date 1739000612888)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone_s3g.py	(date 1739000612888)
@@ -0,0 +1,77 @@
+#!/usr/bin/env python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+from resource_management import *
+from resource_management import *
+from resource_management.libraries.functions import check_process_status
+
+from ozone import ozone
+from ozone_service import ozone_service
+
+
+class OzoneS3G(Script):
+    def install(self, env):
+        import params
+        env.set_params(params)
+        # configure the correct package name(metainfo.xml) so that stack-select can find it
+        self.install_packages(env)
+        Logger.info('install ozone s3g server successfully!')
+
+    def configure(self, env):
+        import params
+        env.set_params(params)
+        ozone(name='ozone')
+        Logger.info('configure ozone s3g server successfully!')
+
+    def start(self, env):
+        import params
+        env.set_params(params)
+        self.configure(env)  # for security reason
+        ozone_service('ozone', action='s3g_start')
+        Logger.info('start ozone s3g server successfully!')
+
+    def stop(self, env):
+        import params
+        env.set_params(params)
+        ozone_service('ozone', action='s3g_stop')
+        Logger.info('stop ozone s3g server successfully!')
+
+    def restart(self, env):
+        self.stop(env)
+        self.start(env)
+
+    def status(self, env):
+        import params
+        check_process_status(params.ozone_s3g_pid_file)
+
+    def get_user(self):
+        import params
+        return params.ozone_user
+
+    def get_log_folder(self):
+        import params
+        return params.ozone_log_dir
+
+    def get_pid_files(self):
+        import params
+        return [params.ozone_s3g_pid_file]
+
+
+if __name__ == "__main__":
+    OzoneS3G().execute()
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone_recon.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone_recon.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone_recon.py
new file mode 100644
--- /dev/null	(date 1739000612882)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone_recon.py	(date 1739000612882)
@@ -0,0 +1,77 @@
+#!/usr/bin/env python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+from resource_management import *
+from resource_management import *
+from resource_management.libraries.functions import check_process_status
+
+from ozone import ozone
+from ozone_service import ozone_service
+
+
+class OzoneRecon(Script):
+    def install(self, env):
+        import params
+        env.set_params(params)
+        # configure the correct package name(metainfo.xml) so that stack-select can find it
+        self.install_packages(env)
+        Logger.info('install ozone recon server successfully!')
+
+    def configure(self, env):
+        import params
+        env.set_params(params)
+        ozone(name='ozone')
+        Logger.info('configure ozone recon server successfully!')
+
+    def start(self, env):
+        import params
+        env.set_params(params)
+        self.configure(env)  # for security reason
+        ozone_service('ozone', action='recon_start')
+        Logger.info('start ozone  recon server successfully!')
+
+    def stop(self, env):
+        import params
+        env.set_params(params)
+        ozone_service('ozone', action='recon_stop')
+        Logger.info('stop ozone  recon server successfully!')
+
+    def restart(self, env):
+        self.stop(env)
+        self.start(env)
+
+    def status(self, env):
+        import params
+        check_process_status(params.ozone_recon_pid_file)
+
+    def get_user(self):
+        import params
+        return params.ozone_user
+
+    def get_log_folder(self):
+        import params
+        return params.ozone_log_dir
+
+    def get_pid_files(self):
+        import params
+        return [params.ozone_recon_pid_file]
+
+
+if __name__ == "__main__":
+    OzoneRecon().execute()
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone_service.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone_service.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone_service.py
new file mode 100644
--- /dev/null	(date 1739237368713)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone_service.py	(date 1739237368713)
@@ -0,0 +1,291 @@
+#!/usr/bin/env python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+from resource_management import *
+import os
+
+
+def ozone_service(
+        name,
+        action='start_master'):  # 'start' or 'stop' or 'status'
+    # initializing the op command variables
+    import params
+
+    # "cd {ozone_home} ;nohup ./ozone --daemon start scm  > {ozone_log_dir}/ozone.log 2>&1 & echo $! > {ozone_pid_file}")
+    env = {'JAVA_HOME': format("{java64_home}")}
+    if action == 'scm_start':
+        # first start ,need init.
+        if params.is_scm_needinit():
+            Logger.info('ozone scm  init start...')
+            ozone_service('ozone', action='scm_init')
+            Logger.info('ozone scm  init finished.')
+
+        cmd = format("cd {ozone_home} ;./bin/ozone --daemon start scm ")
+        Execute(cmd,
+                user=params.ozone_user,
+                environment=env
+                )
+
+    elif action == 'scm_init':
+        if not os.path.exists(params.ozone_metadata_dirs):
+            Directory(params.ozone_metadata_dirs,
+                      mode=0o755,
+                      cd_access='a',
+                      owner=params.ozone_user,
+                      group=params.user_group,
+                      create_parents=True,
+                      recursive_ownership=True
+                      )
+        if not os.path.exists(params.ozone_scm_db_dirs):
+            Directory(params.ozone_scm_db_dirs,
+                      mode=0o755,
+                      cd_access='a',
+                      owner=params.ozone_user,
+                      group=params.user_group,
+                      create_parents=True,
+                      recursive_ownership=True
+                      )
+        if not len(params.ozone_scm_ha_ratis_storage_dir) == 0 and not os.path.exists(
+                params.ozone_scm_ha_ratis_storage_dir):
+            Directory(params.ozone_scm_ha_ratis_storage_dir,
+                      mode=0o755,
+                      cd_access='a',
+                      owner=params.ozone_user,
+                      group=params.user_group,
+                      create_parents=True,
+                      recursive_ownership=True
+                      )
+        if not len(params.ozone_scm_ha_ratis_snapshot_dir) == 0 and not os.path.exists(
+                params.ozone_scm_ha_ratis_snapshot_dir):
+            Directory(params.ozone_scm_ha_ratis_snapshot_dir,
+                      mode=0o755,
+                      cd_access='a',
+                      owner=params.ozone_user,
+                      group=params.user_group,
+                      create_parents=True,
+                      recursive_ownership=True
+                      )
+        cmd = format(
+            "cd {ozone_home} ;./bin/ozone scm --init ")
+        Logger.info('scm  init start !')
+        Execute(cmd, user=params.ozone_user, environment=env)
+        Logger.info('scm finish init!')
+
+
+    elif action == 'scm_bootstrap':
+        if params.ozone_scm_ratis_enable:
+            Logger.info('scm ha enabled,start scm bootstrap...')
+            cmd = format(
+                "cd {ozone_home} ;./bin/ozone scm --bootstrap ")
+            Execute(cmd,
+                    user=params.ozone_user,
+                    environment=env
+                    )
+            Logger.info('scm bootstrap finish.')
+
+    elif action == 'scm_stop':
+        cmd = format(
+            "cd {ozone_home} ; ./bin/ozone --daemon stop scm ")
+        Execute(cmd,
+                user=params.ozone_user,
+                environment=env
+                )
+    elif action == 'scm_ha':
+        if params.ozone_scm_ratis_enable:
+            Logger.info('scm ha enabled,start config scm ha start...')
+            ozone_service('ozone', action='scm_stop')
+            if not params.is_scm_ha():
+                Logger.info('need init and botstrap...')
+                ozone_service('ozone', action='scm_init')
+                ozone_service('ozone', action='scm_bootstrap')
+            else:
+                Logger.info('do not need init and botstrap...')
+            ozone_service('ozone', action='scm_start')
+            Logger.info('scm config ha finish.')
+
+    elif action == 'om_start':
+        if params.is_om_needinit():
+            Logger.info('ozone om  init start...')
+            ozone_service('ozone', action='om_init')
+            Logger.info('ozone om  init finished.')
+
+        cmd = format("cd {ozone_home} ;./bin/ozone --daemon start om ")
+        Execute(cmd,
+                user=params.ozone_user,
+                environment=env
+                )
+    elif action == 'om_init':
+        if not os.path.exists(params.ozone_metadata_dirs):
+            Directory(params.ozone_metadata_dirs,
+                      mode=0o755,
+                      owner=params.ozone_user,
+                      group=params.user_group,
+                      create_parents=True,
+                      recursive_ownership=True
+                      )
+        if not os.path.exists(params.ozone_om_db_dirs):
+            Directory(params.ozone_om_db_dirs,
+                      mode=0o755,
+                      owner=params.ozone_user,
+                      group=params.user_group,
+                      create_parents=True,
+                      recursive_ownership=True
+                      )
+
+        if not os.path.exists(params.ozone_om_ratis_storage_dir):
+            Directory(params.ozone_om_ratis_storage_dir,
+                      mode=0o755,
+                      owner=params.ozone_user,
+                      group=params.user_group,
+                      create_parents=True,
+                      recursive_ownership=True
+                      )
+        if not os.path.exists(params.ozone_om_ratis_snapshot_dir):
+            Directory(params.ozone_om_ratis_snapshot_dir,
+                      mode=0o755,
+                      owner=params.ozone_user,
+                      group=params.user_group,
+                      create_parents=True,
+                      recursive_ownership=True
+                      )
+
+        cmd = format(
+            "cd {ozone_home} ;./bin/ozone om --init > {ozone_home}/log/ozone/ozone_om_init.log 2>&1")
+        Execute(cmd, user=params.ozone_user, environment=env)
+        Logger.info('om finish init!')
+
+    elif action == 'om_ha':
+        if params.ozone_om_ratis_enable:
+            Logger.info('om ha enabled,start config scm om start...')
+            ozone_service('ozone', action='om_stop')
+            # ozone_service('ozone', action='om_init')
+            # ozone_service('ozone', action='om_bootstrap')
+            ozone_service('ozone', action='om_start')
+            Logger.info('scm config ha finish.')
+
+    elif action == 'om_stop':
+        cmd = format(
+            "cd {ozone_home} ;./bin/ozone --daemon stop om ")
+        Execute(cmd,
+                user=params.ozone_user,
+                environment=env
+                )
+    elif action == 'datanode_start':
+        if not os.path.exists(params.dfs_container_ratis_datanode_storage_dir):
+            Directory(params.dfs_container_ratis_datanode_storage_dir,
+                      mode=0o755,
+                      owner=params.ozone_user,
+                      group=params.user_group,
+                      create_parents=True,
+                      recursive_ownership=True
+                      )
+        if not os.path.exists(params.ozone_scm_datanode_id_dir):
+            Directory(params.ozone_scm_datanode_id_dir,
+                      mode=0o755,
+                      owner=params.ozone_user,
+                      group=params.user_group,
+                      create_parents=True,
+                      recursive_ownership=True
+                      )
+        if not os.path.exists(params.hdds_datanode_dir):
+            Directory(params.hdds_datanode_dir,
+                      mode=0o755,
+                      owner=params.ozone_user,
+                      group=params.user_group,
+                      create_parents=True,
+                      recursive_ownership=True
+                      )
+        if not os.path.exists(params.ozone_metadata_dirs):
+            Directory(params.ozone_metadata_dirs,
+                      mode=0o755,
+                      owner=params.ozone_user,
+                      group=params.user_group,
+                      create_parents=True,
+                      recursive_ownership=True
+                      )
+        cmd = format(
+            "cd {ozone_home} ; ./bin/ozone --daemon start datanode ")
+        Execute(cmd,
+                # not_if=ozone_no_op_test,
+                user=params.ozone_user,
+                environment=env
+                )
+    elif action == 'datanode_stop':
+        cmd = format(
+            "cd {ozone_home} ; ./bin/ozone --daemon stop datanode ")
+        Execute(cmd,
+                # not_if=ozone_no_op_test,
+                user=params.ozone_user,
+                environment=env
+                )
+    elif action == 'recon_start':
+        if not os.path.exists(params.ozone_recon_db_dir):
+            Directory(params.ozone_recon_db_dir,
+                      mode=0o755,
+                      owner=params.ozone_user,
+                      group=params.user_group,
+                      create_parents=True,
+                      recursive_ownership=True
+                      )
+        if not os.path.exists(params.ozone_om_ratis_storage_dir):
+            Directory(params.ozone_om_ratis_storage_dir,
+                      mode=0o755,
+                      owner=params.ozone_user,
+                      group=params.user_group,
+                      create_parents=True,
+                      recursive_ownership=True
+                      )
+        if not os.path.exists(params.ozone_recon_om_db_dir):
+            Directory(params.ozone_recon_om_db_dir,
+                      mode=0o755,
+                      cd_access='a',
+                      owner=params.ozone_user,
+                      group=params.user_group,
+                      create_parents=True,
+                      recursive_ownership=True
+                      )
+        cmd = format(
+            "cd {ozone_home} ;./bin/ozone --daemon start recon ")
+        Execute(cmd,
+                user=params.ozone_user,
+                environment=env
+                )
+    elif action == 'recon_stop':
+        cmd = format(
+            "cd {ozone_home} ; ./bin/ozone --daemon stop recon ")
+        Execute(cmd,
+                user=params.ozone_user,
+                environment=env
+                )
+    elif action == 's3g_start':
+        cmd = format(
+            "cd {ozone_home} ;./bin/ozone --daemon start s3g ")
+        Execute(cmd,
+                user=params.s3g_user,
+                environment=env
+                )
+    elif action == 's3g_stop':
+        cmd = format(
+            "cd {ozone_home} ; ./bin/ozone --daemon stop s3g ")
+        Execute(cmd,
+                user=params.s3g_user,
+                environment=env
+                )
+    else:
+        Logger.info(format("unknown command type: :{action}"))
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone_scm.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone_scm.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone_scm.py
new file mode 100644
--- /dev/null	(date 1739000612893)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/ozone_scm.py	(date 1739000612893)
@@ -0,0 +1,98 @@
+#!/usr/bin/env python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+from resource_management import *
+from resource_management import *
+from resource_management.libraries.functions import check_process_status
+
+from ozone import ozone
+from ozone_service import ozone_service
+
+
+class OzoneStorageManager(Script):
+    def install(self, env):
+        import params
+        env.set_params(params)
+        # configure the correct package name(metainfo.xml) so that stack-select can find it
+        self.install_packages(env)
+        Logger.info('install ozone scm server successfully!')
+
+    def configure(self, env):
+        import params
+        env.set_params(params)
+        ozone(name='ozone')
+        Logger.info('configure ozone scm server successfully!')
+
+    def start(self, env):
+        import params
+        env.set_params(params)
+        self.configure(env)  # for security reason
+        ozone_service('ozone', action='scm_start')
+        Logger.info('start ozone scm server successfully!')
+
+    def stop(self, env):
+        import params
+        env.set_params(params)
+        ozone_service('ozone', action='scm_stop')
+        Logger.info('stop ozone scm server successfully!')
+
+    def restart(self, env):
+        self.stop(env)
+        self.start(env)
+
+    def status(self, env):
+        import params
+        check_process_status(params.ozone_scm_pid_file)
+
+    def init(self, env):
+        import params
+        env.set_params(params)
+        self.configure(env)  # for security reason
+        ozone_service('ozone', action='scm_init')
+        Logger.info('init ozone scm server successfully!')
+
+    def bootstrap(self, env):
+        import params
+        env.set_params(params)
+        self.configure(env)  # for security reason
+        ozone_service('ozone', action='scm_bootstrap')
+        Logger.info('bootstrap ozone scm server successfully!')
+
+    def ha(self, env):
+        import params
+        env.set_params(params)
+        self.configure(env)  # for security reason
+        ozone_service('ozone', action='scm_ha')
+        Logger.info(' ozone scm  ha command execute successfully!')
+
+    def get_user(self):
+        import params
+        return params.ozone_user
+
+    def get_log_folder(self):
+        import params
+        return params.ozone_log_dir
+
+    def get_pid_files(self):
+        import params
+        return [params.ozone_scm_pid_file]
+
+
+if __name__ == "__main__":
+    OzoneStorageManager().execute()
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/params_linux.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/params_linux.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/params_linux.py
new file mode 100644
--- /dev/null	(date 1739000612870)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/params_linux.py	(date 1739000612870)
@@ -0,0 +1,432 @@
+#!/usr/bin/env python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+import os
+from resource_management import *
+from resource_management.libraries.functions.default import default
+from resource_management.libraries.functions.expect import expect
+from resource_management.libraries.functions.get_architecture import get_architecture
+from resource_management.libraries.functions.setup_ranger_plugin_xml import generate_ranger_service_config
+from resource_management.libraries.functions.setup_ranger_plugin_xml import get_audit_configs
+from resource_management.libraries.functions.stack_features import check_stack_feature, get_stack_feature_version
+from resource_management.libraries.script.script import Script
+
+import status_params
+
+# server configurations
+config = Script.get_config()
+Logger.info("Default system config:" + str(config))
+
+service_packagedir = os.path.realpath(__file__).split('/scripts')[0]
+config = Script.get_config()
+tmp_dir = Script.get_tmp_dir()
+
+architecture = get_architecture()
+
+# Stack info
+stack_version_unformatted = str(config['clusterLevelParams']['stack_version'])
+stack_version_formatted = format_stack_version(stack_version_unformatted)
+stack_root = Script.get_stack_root()
+stack_name = default("/hostLevelParams/stack_name", None)
+component_directory = status_params.component_directory
+user_group = config['configurations']['cluster-env']['user_group']
+ozone_home = format("{stack_root}/current/{component_directory}")
+ozone_conf_dir = format("{stack_root}/current/{component_directory}/etc/hadoop")
+
+ambari_server_hostname = config['ambariLevelParams']['ambari_server_host']
+current_host_name = config['agentLevelParams']['hostname']
+
+# ozone Configurations
+ozone_log_dir_prefix = config['configurations']['ozone-env']['ozone_log_dir_prefix']
+ozone_pid_dir_prefix = config['configurations']['ozone-env']['ozone_pid_dir_prefix']
+ozone_user = config['configurations']['ozone-env']['ozone_user']
+root_user = "root"
+
+user = ozone_user
+ozone_pid_dir = format("{ozone_pid_dir_prefix}/{user}")
+ozone_log_dir = format("{ozone_log_dir_prefix}/{user}")
+ozone_om_pid_file = format("{ozone_pid_dir}/ozone-{user}-om.pid")
+ozone_scm_pid_file = format("{ozone_pid_dir}/ozone-{user}-scm.pid")
+ozone_datanode_pid_file = format("{ozone_pid_dir}/ozone-{user}-datanode.pid")
+ozone_recon_pid_file = format("{ozone_pid_dir}/ozone-{user}-recon.pid")
+s3g_user = "root"
+ozone_s3g_pid_file = format("{ozone_pid_dir_prefix}/{s3g_user}/ozone-{s3g_user}-s3g.pid")
+
+ozone_scm_db_dirs = config['configurations']['ozone-site']['ozone.scm.db.dirs']
+ozone_metadata_dirs = config['configurations']['ozone-site']['ozone.metadata.dirs']
+
+dfs_container_ratis_datanode_storage_dir = config['configurations']['ozone-site'][
+    'dfs.container.ratis.datanode.storage.dir']
+ozone_scm_datanode_id_dir = config['configurations']['ozone-site']['ozone.scm.datanode.id.dir']
+hdds_datanode_dir = config['configurations']['ozone-site']['hdds.datanode.dir']
+
+ozone_recon_db_dir = config['configurations']['ozone-site']['ozone.recon.db.dir']
+ozone_recon_om_db_dir = config['configurations']['ozone-site']['ozone.recon.om.db.dir']
+ozone_om_ratis_storage_dir = config['configurations']['ozone-site']['ozone.om.ratis.storage.dir']
+
+ozone_scm_init_file = format("{ozone_scm_db_dirs}/scm/current/VERSION")
+ozone_scm_primordial_node_id = default('/configurations/ozone-site/ozone.scm.primordial.node.id', '')
+ozone_scm_ratis_enable = default('/configurations/ozone-site/ozone.scm.ratis.enable', False)
+ozone_scm_ha_ratis_storage_dir = default('/configurations/ozone-site/ozone.scm.ha.ratis.storage.dir', '')
+ozone_scm_ha_ratis_snapshot_dir = default('/configurations/ozone-site/ozone.scm.ha.ratis.snapshot.dir', '')
+
+ozone_om_db_dirs = config['configurations']['ozone-site']['ozone.om.db.dirs']
+ozone_om_init_file = format("{ozone_om_db_dirs}/om/current/VERSION")
+ozone_om_ratis_enable = default('/configurations/ozone-site/ozone.om.ratis.enable', False)
+# ozone_om_ha_ratis_storage_dir = default('/configurations/ozone-site/ozone.scm.ha.ratis.storage.dir', '' )
+ozone_om_ratis_storage_dir = config['configurations']['ozone-site']['ozone.om.ratis.storage.dir']
+ozone_om_ratis_snapshot_dir = config['configurations']['ozone-site']['ozone.om.ratis.snapshot.dir']
+
+ozone_om_certs_dir = os.path.join(ozone_metadata_dirs, "/om/certs")
+ozone_scm_certs_dir = os.path.join(ozone_metadata_dirs, "/scm/certs")
+
+# core-site
+core_site_configurations = config['configurations']['core-site']
+core_site_attributes = config['configurationAttributes']['core-site']
+if "core-site" not in config["configurations"]:
+    core_site_configurations = config['configurations']['ozone-core-site']
+    core_site_attributes = config['configurationAttributes']['ozone-core-site']
+
+Logger.info(format("core_site_configurations: {core_site_configurations}"))
+
+
+# check scm need to be inited
+def is_scm_needinit():
+    if os.path.exists(ozone_scm_init_file):
+        scm_version = get_scm_version()
+        Logger.info(scm_version)
+        # after enabale kerberos,need init ca certs.
+        if ozone_security_enabled and not os.path.exists(ozone_scm_certs_dir):
+            return True
+        return False
+    else:
+        return True
+
+    # check om need to be inited
+
+
+def is_om_needinit():
+    if os.path.exists(ozone_om_init_file):
+        om_version = get_om_version()
+        Logger.info(om_version)
+        # after enabale kerberos,need init ca certs.
+        if ozone_security_enabled and not os.path.exists(ozone_om_certs_dir):
+            return True
+        return False
+    else:
+        return True
+
+
+def is_scm_ha():
+    try:
+        Execute(format("ls {ozone_scm_ha_ratis_storage_dir} | wc -l  | grep -q ^0$"))
+        Logger.info(format("current scm ha dir: {ozone_scm_ha_ratis_storage_dir} exists and contains content"))
+        return False
+    except Fail:
+        return True
+
+
+# def is_om_ha():
+#    try:
+#       Execute(format("ls {ozone_om_ha_ratis_storage_dir} | wc -l  | grep -q ^0$"))
+#       Logger.info(format("current om ha dir: {ozone_om_ha_ratis_storage_dir} exists and contains content"))
+#       return False
+#    except Fail:
+#       return True
+
+
+# scm version file
+def get_scm_version():
+    if ozone_scm_init_file and os.path.isfile(ozone_scm_init_file):
+        with open(ozone_scm_init_file) as f:
+            file_content = f.read()
+            return file_content
+    else:
+        return ""
+
+
+# om version file
+def get_om_version():
+    if ozone_om_init_file and os.path.isfile(ozone_om_init_file):
+        with open(ozone_om_init_file) as f:
+            file_content = f.read()
+            return file_content
+    else:
+        return ""
+
+
+java_home = config['ambariLevelParams']['java_home']
+java_version = expect("/ambariLevelParams/java_version", int)
+java_exec = format("{java_home}/bin/java")
+
+# get the correct version to use for checking stack features
+version_for_stack_feature_checks = get_stack_feature_version(config)
+
+stack_supports_ranger_kerberos = check_stack_feature(StackFeature.RANGER_KERBEROS_SUPPORT,
+                                                     version_for_stack_feature_checks)
+stack_supports_ranger_audit_db = check_stack_feature(StackFeature.RANGER_AUDIT_DB_SUPPORT,
+                                                     version_for_stack_feature_checks)
+
+ozone_om_httpaddress = config['configurations']['ozone-site']['ozone.om.http-address']
+
+java64_home = config['ambariLevelParams']['java_home']
+security_enabled = config['configurations']['cluster-env']['security_enabled']
+ozone_security_enabled = config['configurations']['ozone-site']['ozone.security.enabled']
+hadoop_security_authentication = config['configurations']['ozone-site']['hadoop.security.authentication']  # kerberos
+if is_empty(hadoop_security_authentication):
+    hadoop_security_authentication = "simple"
+if security_enabled:
+    _hostname_lowercase = config['agentLevelParams']['hostname'].lower()
+    ozone_om_princ = config['configurations']['ozone-site']['ozone.om.kerberos.principal'].replace('_HOST',
+                                                                                                   _hostname_lowercase)
+    ozone_om_keytab_path = config['configurations']['ozone-site']['ozone.om.kerberos.keytab.file']
+
+# ranger ozone plugin section start
+
+# to get db connector jar
+jdk_location = config['ambariLevelParams']['jdk_location']
+
+# ranger host
+ranger_admin_hosts = default("/clusterHostInfo/ranger_admin_hosts", [])
+has_ranger_admin = not len(ranger_admin_hosts) == 0
+
+# ranger support xml_configuration flag, instead of depending on ranger xml_configurations_supported/ranger-env introduced, using stack feature
+xml_configurations_supported = check_stack_feature(StackFeature.RANGER_XML_CONFIGURATION,
+                                                   version_for_stack_feature_checks)
+
+# ranger ozone plugin enabled property
+enable_ranger_ozone = default("/configurations/ranger-ozone-plugin-properties/ranger-ozone-plugin-enabled", "No")
+# Logger.info("/configurations/ranger-ozone-plugin-properties/ranger-ozone-plugin-enabled")
+# Logger.info(enable_ranger_ozone)
+enable_ranger_ozone = True if enable_ranger_ozone.lower() == 'yes' else False
+# Logger.info(enable_ranger_ozone)
+
+policymgr_mgr_url = config['configurations']['admin-properties']['policymgr_external_url']
+
+# ranger ozone properties
+if enable_ranger_ozone:
+    # get ranger policy url
+    policymgr_mgr_url = config['configurations']['admin-properties']['policymgr_external_url']
+    Logger.info(policymgr_mgr_url)
+    # can't get vaelue,temp enable it
+    # if xml_configurations_supported:
+    #  policymgr_mgr_url = config['configurations']['ranger-ozone-security']['ranger.plugin.ozone.policy.rest.url']
+
+    if not is_empty(policymgr_mgr_url) and policymgr_mgr_url.endswith('/'):
+        policymgr_mgr_url = policymgr_mgr_url.rstrip('/')
+
+    # ranger audit db user
+    xa_audit_db_user = default('/configurations/admin-properties/audit_db_user', 'rangerlogger')
+
+    # ranger ozone service/repository name
+    repo_name = str(config['clusterName']) + '_ozone'
+    repo_name_value = config['configurations']['ranger-ozone-security']['ranger.plugin.ozone.service.name']
+    if not is_empty(repo_name_value) and repo_name_value != "{{repo_name}}":
+        repo_name = repo_name_value
+
+    common_name_for_certificate = config['configurations']['ranger-ozone-plugin-properties'][
+        'common.name.for.certificate']
+    repo_config_username = config['configurations']['ranger-ozone-plugin-properties']['REPOSITORY_CONFIG_USERNAME']
+    ranger_plugin_properties = config['configurations']['ranger-ozone-plugin-properties']
+    policy_user = config['configurations']['ranger-ozone-plugin-properties']['policy_user']
+    repo_config_password = config['configurations']['ranger-ozone-plugin-properties']['REPOSITORY_CONFIG_PASSWORD']
+
+    # ranger-env config
+    ranger_env = config['configurations']['ranger-env']
+
+    # create ranger-env config having external ranger credential properties
+    if not has_ranger_admin and enable_ranger_ozone:
+        external_admin_username = default('/configurations/ranger-ozone-plugin-properties/external_admin_username',
+                                          'admin')
+        external_admin_password = default('/configurations/ranger-ozone-plugin-properties/external_admin_password',
+                                          'admin')
+        external_ranger_admin_username = default(
+            '/configurations/ranger-ozone-plugin-properties/external_ranger_admin_username', 'amb_ranger_admin')
+        external_ranger_admin_password = default(
+            '/configurations/ranger-ozone-plugin-properties/external_ranger_admin_password', 'amb_ranger_admin')
+        ranger_env = {}
+        ranger_env['admin_username'] = external_admin_username
+        ranger_env['admin_password'] = external_admin_password
+        ranger_env['ranger_admin_username'] = external_ranger_admin_username
+        ranger_env['ranger_admin_password'] = external_ranger_admin_password
+
+    xa_audit_db_password = ''
+    if not is_empty(config['configurations']['admin-properties'][
+                        'audit_db_password']) and stack_supports_ranger_audit_db and has_ranger_admin:
+        xa_audit_db_password = config['configurations']['admin-properties']['audit_db_password']
+
+    downloaded_custom_connector = None
+    previous_jdbc_jar_name = None
+    driver_curl_source = None
+    driver_curl_target = None
+    previous_jdbc_jar = None
+
+    if has_ranger_admin and stack_supports_ranger_audit_db:
+        xa_audit_db_flavor = config['configurations']['admin-properties']['DB_FLAVOR']
+        jdbc_jar_name, previous_jdbc_jar_name, audit_jdbc_url, jdbc_driver = get_audit_configs(config)
+
+        downloaded_custom_connector = format(
+            "{exec_tmp_dir}/{jdbc_jar_name}") if stack_supports_ranger_audit_db else None
+        driver_curl_source = format("{jdk_location}/{jdbc_jar_name}") if stack_supports_ranger_audit_db else None
+        driver_curl_target = format(
+            "{stack_root}/current/{component_directory}/lib/{jdbc_jar_name}") if stack_supports_ranger_audit_db else None
+        previous_jdbc_jar = format(
+            "{stack_root}/current/{component_directory}/lib/{previous_jdbc_jar_name}") if stack_supports_ranger_audit_db else None
+        sql_connector_jar = ''
+
+    ozone_ranger_plugin_config = {
+        'username': repo_config_username,
+        'password': repo_config_password,
+        'ozone.om.http-address': ozone_om_httpaddress,
+        'hadoop.security.authorization': security_enabled,
+        'hadoop.security.authentication': hadoop_security_authentication,
+        # 'ozone.security.authentication': ozone_security_authentication,
+        'hadoop.security.auth_to_local': "",
+    }
+
+    if ozone_security_enabled:
+        ozone_ranger_plugin_config['policy.download.auth.users'] = ozone_user
+        ozone_ranger_plugin_config['tag.download.auth.users'] = ozone_user
+        ozone_ranger_plugin_config['policy.grantrevoke.auth.users'] = ozone_user
+
+    # there is something wrong when enable kerberos, infomation can't be updated,so init first
+    ozone_ranger_plugin_config['policy.download.auth.users'] = ozone_user
+    ozone_ranger_plugin_config['tag.download.auth.users'] = ozone_user
+    ozone_ranger_plugin_config['policy.grantrevoke.auth.users'] = ozone_user
+
+    # TODO:
+    # ozone_ranger_plugin_config['setup.additional.default.policies'] = "true"
+    # ozone_ranger_plugin_config['default-policy.1.name'] = "Service Check User Policy for Ozone"
+    # ozone_ranger_plugin_config['default-policy.1.resource.table'] = "ambarismoketest"
+    # ozone_ranger_plugin_config['default-policy.1.resource.column-family'] = "*"
+    # ozone_ranger_plugin_config['default-policy.1.resource.column'] = "*"
+    # ozone_ranger_plugin_config['default-policy.1.policyItem.1.users'] = policy_user
+    # ozone_ranger_plugin_config['default-policy.1.policyItem.1.accessTypes'] = "read,write,create"
+
+    custom_ranger_service_config = generate_ranger_service_config(ranger_plugin_properties)
+    if len(custom_ranger_service_config) > 0:
+        ozone_ranger_plugin_config.update(custom_ranger_service_config)
+
+    ozone_ranger_plugin_repo = {
+        'isEnabled': 'true',
+        'configs': ozone_ranger_plugin_config,
+        'description': 'ozone repo',
+        'name': repo_name,
+        'type': 'ozone'
+    }
+
+    ranger_ozone_principal = None
+    ranger_ozone_keytab = None
+    if stack_supports_ranger_kerberos and security_enabled and 'ozone' in component_directory.lower():
+        ranger_ozone_principal = ozone_om_princ
+        ranger_ozone_keytab = ozone_om_keytab_path
+
+    xa_audit_db_is_enabled = False
+    if xml_configurations_supported and stack_supports_ranger_audit_db:
+        xa_audit_db_is_enabled = config['configurations']['ranger-ozone-audit']['xasecure.audit.destination.db']
+
+    xa_audit_hdfs_is_enabled = config['configurations']['ranger-ozone-audit'][
+        'xasecure.audit.destination.hdfs'] if xml_configurations_supported else False
+    ssl_keystore_password = config['configurations']['ranger-ozone-policymgr-ssl'][
+        'xasecure.policymgr.clientssl.keystore.password'] if xml_configurations_supported else None
+    ssl_truststore_password = config['configurations']['ranger-ozone-policymgr-ssl'][
+        'xasecure.policymgr.clientssl.truststore.password'] if xml_configurations_supported else None
+    credential_file = format('/etc/ranger/{repo_name}/cred.jceks')
+
+    # for SQLA explicitly disable audit to DB for Ranger
+    if has_ranger_admin and stack_supports_ranger_audit_db and xa_audit_db_flavor.lower() == 'sqla':
+        xa_audit_db_is_enabled = False
+
+# need this to capture cluster name from where ranger ozone plugin is enabled
+cluster_name = config['clusterName']
+
+# ranger ozone plugin section end
+
+
+ganglia_server_hosts = default('/clusterHostInfo/ganglia_server_host', [])  # is not passed when ganglia is not present
+has_ganglia_server = not len(ganglia_server_hosts) == 0
+if has_ganglia_server:
+    ganglia_server_host = ganglia_server_hosts[0]
+
+set_instanceId = "false"
+if 'cluster-env' in config['configurations'] and \
+        'metrics_collector_external_hosts' in config['configurations']['cluster-env']:
+    ams_collector_hosts = config['configurations']['cluster-env']['metrics_collector_external_hosts']
+    set_instanceId = "true"
+else:
+    ams_collector_hosts = ",".join(default("/clusterHostInfo/metrics_collector_hosts", []))
+has_metric_collector = not len(ams_collector_hosts) == 0
+metric_collector_port = None
+if has_metric_collector:
+    if 'cluster-env' in config['configurations'] and \
+            'metrics_collector_external_port' in config['configurations']['cluster-env']:
+        metric_collector_port = config['configurations']['cluster-env']['metrics_collector_external_port']
+    else:
+        metric_collector_web_address = default("/configurations/ams-site/timeline.metrics.service.webapp.address",
+                                               "0.0.0.0:6188")
+        if metric_collector_web_address.find(':') != -1:
+            metric_collector_port = metric_collector_web_address.split(':')[1]
+        else:
+            metric_collector_port = '6188'
+    if default("/configurations/ams-site/timeline.metrics.service.http.policy", "HTTP_ONLY") == "HTTPS_ONLY":
+        metric_collector_protocol = 'https'
+    else:
+        metric_collector_protocol = 'http'
+    metric_truststore_path = default("/configurations/ams-ssl-client/ssl.client.truststore.location", "")
+    metric_truststore_type = default("/configurations/ams-ssl-client/ssl.client.truststore.type", "")
+    metric_truststore_password = default("/configurations/ams-ssl-client/ssl.client.truststore.password", "")
+    pass
+metrics_report_interval = default("/configurations/ams-site/timeline.metrics.sink.report.interval", 60)
+metrics_collection_period = default("/configurations/ams-site/timeline.metrics.sink.collection.period", 10)
+
+host_in_memory_aggregation = default("/configurations/ams-site/timeline.metrics.host.inmemory.aggregation", True)
+host_in_memory_aggregation_port = default("/configurations/ams-site/timeline.metrics.host.inmemory.aggregation.port",
+                                          61888)
+is_aggregation_https_enabled = False
+if default("/configurations/ams-site/timeline.metrics.host.inmemory.aggregation.http.policy",
+           "HTTP_ONLY") == "HTTPS_ONLY":
+    host_in_memory_aggregation_protocol = 'https'
+    is_aggregation_https_enabled = True
+else:
+    host_in_memory_aggregation_protocol = 'http'
+
+# node hostname
+hostname = config['agentLevelParams']['hostname']
+
+# zookeeper for hadoop metrics
+zookeeper_hosts = config['clusterHostInfo']['zookeeper_server_hosts']
+zookeeper_port = default('/configurations/zoo.cfg/clientPort', None)
+
+# get comma separated lists of zookeeper hosts from clusterHostInfo
+index = 0
+zookeeper_quorum = ""
+for host in zookeeper_hosts:
+    zookeeper_host = host
+    if zookeeper_port is not None:
+        zookeeper_host = host + ":" + str(zookeeper_port)
+
+    zookeeper_quorum += zookeeper_host
+    index += 1
+    if index < len(zookeeper_hosts):
+        zookeeper_quorum += ","
+
+    # for create_hdfs_directory
+hdfs_user_keytab = config['configurations']['hadoop-env']['hdfs_user_keytab']
+hdfs_user = config['configurations']['hadoop-env']['hdfs_user']
+hdfs_principal_name = config['configurations']['hadoop-env']['hdfs_principal_name']
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/params.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/params.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/params.py
new file mode 100644
--- /dev/null	(date 1739000409869)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/params.py	(date 1739000409869)
@@ -0,0 +1,29 @@
+#!/usr/bin/env python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+from ambari_commons import OSCheck
+from resource_management.libraries.functions.default import default
+
+if OSCheck.is_windows_family():
+    from params_windows import *
+else:
+    from params_linux import *
+
+host_sys_prepped = default("/hostLevelParams/host_sys_prepped", False)
+retryAble = default("/commandParams/command_retry_enabled", False)
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/setup_ranger_ozone.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/setup_ranger_ozone.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/setup_ranger_ozone.py
new file mode 100644
--- /dev/null	(date 1739000612862)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/setup_ranger_ozone.py	(date 1739000612862)
@@ -0,0 +1,93 @@
+#!/usr/bin/env python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+from resource_management.core.logger import Logger
+from resource_management.libraries.functions.setup_ranger_plugin_xml import setup_ranger_plugin
+
+
+def setup_ranger_ozone(upgrade_type=None, service_name="ozone-master"):
+    import params
+
+    if params.enable_ranger_ozone:
+
+        stack_version = None
+
+        if upgrade_type is not None:
+            stack_version = params.version
+
+        if params.retryAble:
+            Logger.info("Ozone: Setup ranger: command retry enables thus retrying if ranger admin is down !")
+        else:
+            Logger.info("Ozone: Setup ranger: command retry not enabled thus skipping if ranger admin is down !")
+
+        if params.xa_audit_hdfs_is_enabled:
+            try:
+                params.HdfsResource("/ranger/audit",
+                                    type="directory",
+                                    action="create_on_execute",
+                                    owner=params.hdfs_user,
+                                    group=params.user_group,
+                                    mode=0o755,
+                                    recursive_chmod=True
+                                    )
+                params.HdfsResource("/ranger/audit/ozone",
+                                    type="directory",
+                                    action="create_on_execute",
+                                    owner=params.ozone_user,
+                                    group=params.user_group,
+                                    mode=0o700,
+                                    recursive_chmod=True
+                                    )
+
+                params.HdfsResource(None, action="execute")
+            except Exception as err:
+                Logger.exception(
+                    "Audit directory creation in HDFS for OZONE Ranger plugin failed with error:\n{0}".format(err))
+
+        api_version = 'v2'
+
+        setup_ranger_plugin('ozone', 'ozone', params.previous_jdbc_jar, params.downloaded_custom_connector,
+                            params.driver_curl_source, params.driver_curl_target, params.java64_home,
+                            params.repo_name, params.ozone_ranger_plugin_repo,
+                            params.ranger_env, params.ranger_plugin_properties,
+                            params.policy_user, params.policymgr_mgr_url,
+                            params.enable_ranger_ozone, conf_dict=params.ozone_conf_dir,
+                            component_user=params.ozone_user, component_group=params.user_group,
+                            cache_service_list=['ozone'],
+                            plugin_audit_properties=params.config['configurations']['ranger-ozone-audit'],
+                            plugin_audit_attributes=params.config['configurationAttributes']['ranger-ozone-audit'],
+                            plugin_security_properties=params.config['configurations']['ranger-ozone-security'],
+                            plugin_security_attributes=params.config['configurationAttributes'][
+                                'ranger-ozone-security'],
+                            plugin_policymgr_ssl_properties=params.config['configurations'][
+                                'ranger-ozone-policymgr-ssl'],
+                            plugin_policymgr_ssl_attributes=params.config['configurationAttributes'][
+                                'ranger-ozone-policymgr-ssl'],
+                            component_list=['ozone'], audit_db_is_enabled=params.xa_audit_db_is_enabled,
+                            credential_file=params.credential_file, xa_audit_db_password=params.xa_audit_db_password,
+                            ssl_truststore_password=params.ssl_truststore_password,
+                            ssl_keystore_password=params.ssl_keystore_password,
+                            stack_version_override=stack_version, skip_if_rangeradmin_down=not params.retryAble,
+                            api_version=api_version,
+                            is_security_enabled=params.security_enabled,
+                            is_stack_supports_ranger_kerberos=params.stack_supports_ranger_kerberos if params.security_enabled else None,
+                            component_user_principal=params.ranger_ozone_principal if params.security_enabled else None,
+                            component_user_keytab=params.ranger_ozone_keytab if params.security_enabled else None)
+    else:
+        Logger.info('Ranger Ozone plugin is not enabled')
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/readme
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/readme b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/readme
new file mode 100644
--- /dev/null	(date 1739257607839)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/readme	(date 1739257607839)
@@ -0,0 +1,41 @@
+250211 推荐部署方式
+
+ozone manager 3台
+ozone datanode 3台
+ozone scm 3台
+ozone s3g 1台
+ozone recon server 1台
+
+
+
+第一台机器执行
+./ozone scm --init
+./ozone --daemon start scm
+
+其余机器执行
+./ozone scm --bootstrap
+./ozone --daemon start scm
+
+
+每个机器都执行
+./ozone om --init
+
+./ozone --daemon start om
+
+
+./ozone --daemon start datanode
+
+
+./ozone --daemon stop om
+
+
+./ozone --daemon stop scm
+
+
+./ozone --daemon stop datanode
+
+
+./ozone --daemon start recon
+
+
+
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/templates/hadoop-metrics2-ozone.properties.j2
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/templates/hadoop-metrics2-ozone.properties.j2 b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/templates/hadoop-metrics2-ozone.properties.j2
new file mode 100644
--- /dev/null	(date 1738999374923)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/templates/hadoop-metrics2-ozone.properties.j2	(date 1738999374923)
@@ -0,0 +1,69 @@
+{#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#}
+
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements. See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License. You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# syntax: [prefix].[source|sink|jmx].[instance].[options]
+# See package.html for org.apache.hadoop.metrics2 for details
+
+
+{% if has_metric_collector %}
+
+*.period={{metrics_collection_period}}
+*.sink.timeline.plugin.urls=file:///usr/lib/ambari-metrics-hadoop-sink/ambari-metrics-hadoop-sink.jar
+*.sink.timeline.class=org.apache.hadoop.metrics2.sink.timeline.HadoopTimelineMetricsSink
+*.sink.timeline.period={{metrics_collection_period}}
+*.sink.timeline.sendInterval={{metrics_report_interval}}000
+*.sink.timeline.slave.host.name={{hostname}}
+*.sink.timeline.zookeeper.quorum={{zookeeper_quorum}}
+*.sink.timeline.protocol={{metric_collector_protocol}}
+*.sink.timeline.port={{metric_collector_port}}
+*.sink.timeline.instanceId = {{cluster_name}}
+*.sink.timeline.set.instanceId = {{set_instanceId}}
+*.sink.timeline.host_in_memory_aggregation = {{host_in_memory_aggregation}}
+*.sink.timeline.host_in_memory_aggregation_port = {{host_in_memory_aggregation_port}}
+{% if is_aggregation_https_enabled %}
+*.sink.timeline.host_in_memory_aggregation_protocol = {{host_in_memory_aggregation_protocol}}
+{% endif %}
+
+# HTTPS properties
+*.sink.timeline.truststore.path = {{metric_truststore_path}}
+*.sink.timeline.truststore.type = {{metric_truststore_type}}
+*.sink.timeline.truststore.password = {{metric_truststore_password}}
+
+ozone.sink.timeline.collector.hosts={{ams_collector_hosts}}
+ozonemanager.sink.timeline.collector.hosts={{ams_collector_hosts}}
+storagecontainermanager.sink.timeline.collector.hosts={{ams_collector_hosts}}
+hddsdatanode.sink.timeline.collector.hosts={{ams_collector_hosts}}
+recon.sink.timeline.collector.hosts={{ams_collector_hosts}}
+
+
+{% endif %}
Index: ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/status_params.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/status_params.py b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/status_params.py
new file mode 100644
--- /dev/null	(date 1739000409915)
+++ b/ambari-server/src/main/resources/stacks/BIGTOP/3.2.0/services/OZONE/package/scripts/status_params.py	(date 1739000409915)
@@ -0,0 +1,51 @@
+#!/usr/bin/env python
+"""
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+"""
+from ambari_commons.os_check import OSCheck
+from resource_management.libraries.functions import StackFeature
+from resource_management.libraries.functions import format
+from resource_management.libraries.functions.default import default
+from resource_management.libraries.functions.stack_features import check_stack_feature
+from resource_management.libraries.functions.version import format_stack_version
+from resource_management.libraries.script.script import Script
+
+# a map of the Ambari role to the component name
+# for use with <stack-root>/current/<component>
+# TODO: add the map to the current with the actual
+SERVER_ROLE_DIRECTORY_MAP = {
+    'OZONE_HOME': 'ozone',
+}
+
+component_directory = Script.get_component_from_role(SERVER_ROLE_DIRECTORY_MAP, "OZONE_HOME")
+
+config = Script.get_config()
+
+if OSCheck.is_windows_family():
+    prometheus_win_service_name = "prometheusserver"
+else:
+
+    stack_version_unformatted = str(config['clusterLevelParams']['stack_version'])
+    stack_version_formatted = format_stack_version(stack_version_unformatted)
+    stack_root = Script.get_stack_root()
+
+    ozone_config_dir = "/etc/ozone/conf"
+    if stack_version_formatted and check_stack_feature(StackFeature.ROLLING_UPGRADE, stack_version_formatted):
+        kylin_conf_dir = format("{stack_root}/current/{component_directory}/conf")
+
+stack_name = default("/clusterLevelParams/stack_name", None)
